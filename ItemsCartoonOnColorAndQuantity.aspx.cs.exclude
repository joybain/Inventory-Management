using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using Delve;
using System.Data.SqlClient;
using System.Drawing;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.pdf.draw;

public partial class ItemsCartoonOnColorAndQuantity : System.Web.UI.Page
{
    private static Permis per;
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["user"] == null)
        {
            if (Session.SessionID != "" | Session.SessionID != null)
            {
                clsSession ses = clsSessionManager.getSession(Session.SessionID);
                if (ses != null)
                {
                    Session["user"] = ses.UserId;
                    Session["book"] = "AMB";
                    string connectionString = DataManager.OraConnString();
                    SqlDataReader dReader;
                    SqlConnection conn = new SqlConnection();
                    conn.ConnectionString = connectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText =
                        "Select user_grp,[description],UserType,case when UserType=1 then 'Bangladesh' else 'Philippine' end AS[LoginCountry] from utl_userinfo where upper(user_name)=upper('" +
                        Session["user"].ToString().ToUpper() + "') and status='A'";
                    conn.Open();
                    dReader = cmd.ExecuteReader();
                    string wnot = "", userType = "";
                    if (dReader.HasRows == true)
                    {
                        while (dReader.Read())
                        {
                            Session["userlevel"] = int.Parse(dReader["user_grp"].ToString());
                            //Session["dept"] = dReader["dept"].ToString();
                            wnot = "Welcome " + dReader["description"].ToString();
                            Session["LoginCountry"] = dReader["LoginCountry"].ToString();
                            userType = dReader["UserType"].ToString();
                        }
                        Session["wnote"] = wnot;
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandType = CommandType.Text;
                        //cmd.CommandText = "Select book_desc,company_address1,company_address2,separator_type from gl_set_of_books where book_name='" + Session["book"].ToString() + "' ";
                        if (Convert.ToInt32(userType) == 2)
                        {

                            Session["bookMAN"] = "MAN";
                        }
                        else
                        {
                            Session["bookMAN"] = Session["book"].ToString();
                        }
                        cmd.CommandText = "Select book_desc,company_address1,company_address2,separator_type,ShotName from gl_set_of_books where book_name='" + Session["bookMAN"] + "' ";

                        if (dReader.IsClosed == false)
                        {
                            dReader.Close();
                        }
                        dReader = cmd.ExecuteReader();
                        if (dReader.HasRows == true)
                        {
                            while (dReader.Read())
                            {
                                Session["septype"] = dReader["separator_type"].ToString();
                                Session["org"] = dReader["book_desc"].ToString();
                                Session["add1"] = dReader["company_address1"].ToString();
                                Session["add2"] = dReader["company_address2"].ToString();
                            }
                        }
                    }
                    dReader.Close();
                    conn.Close();
                }
            }
        }
        try
        {
            string pageName = DataManager.GetCurrentPageName();
            string modid = PermisManager.getModuleId(pageName);
            per = PermisManager.getUsrPermis(Session["user"].ToString().Trim().ToUpper(), modid);
            if (per != null && per.AllowView == "Y")
            {
                ((Label)Page.Master.FindControl("lblLogin")).Text = Session["wnote"].ToString();
                ((Label)Page.Master.FindControl("lblCountryName")).Text = Session["LoginCountry"].ToString();
                ((LinkButton)Page.Master.FindControl("lbLogout")).Visible = true;
            }
            else
            {
                Response.Redirect("Home.aspx?sid=sam");
            }
        }
        catch
        {
            Response.Redirect("Default.aspx?sid=sam");
        }
        if (!IsPostBack)
        {
            tbItemsDtl.Visible = tbColorSize.Visible = false;
            tbCartoon.Visible = Pandel1.Enabled = Panel2.Enabled = true;
            txtCartoonNo.Text = txtShiftmentNo.Text = "";
            DataTable dt12 = ShiftmentItemsCartoonManager.GetShowCartoonItems(txtCartoonNo.Text,txtShiftmentNo.Text,"");
            dgShiftmentItems.DataSource = dt12;
            ViewState["History"] = dt12;
            dgShiftmentItems.DataBind();

            DataTable dt = IdManager.GetShowDataTable("SELECT '' CHK,[ID],[ColorName] FROM [ColorInfo]");
            chkColor.DataSource = dt; chkColor.DataTextField = "ColorName"; chkColor.DataValueField = "ID";
            chkColor.DataBind();
            DataTable dt1 = IdManager.GetShowDataTable("SELECT '' CHK,[ID],[SizeName] FROM [SizeInfo]");
            chkSize.DataSource = dt1; chkSize.DataTextField = "SizeName"; chkSize.DataValueField = "ID";
            chkSize.DataBind();
            getColor();
            getSize();
            IdManager.getInsertUpdateDelete("DELETE FROM [TemporaryImage]");
            Session["ID"] = Session["Img"] = null;

            // ************************ Gride Textbox Add ***************//

            GrideViewColumns();
            ViewState["ColorInfo"] = null;
            ViewState["SizeInfo"] = null;
        }
    }
    private void GrideViewColumns()
    {
        dgQty.Columns.Clear();
        BoundField bfield = new BoundField();
        bfield.HeaderText = "";
        bfield.ItemStyle.Width = 1;
        bfield.ItemStyle.ForeColor = Color.White;        
        bfield.DataField = "ColorID";
        bfield.ItemStyle.Font.Bold = true;
        dgQty.Columns.Add(bfield);

        BoundField bfield1 = new BoundField();
        bfield1.HeaderText = "Color Name";
        bfield1.ItemStyle.Width = 150;
        bfield1.ItemStyle.Font.Bold = true;
        bfield1.DataField = "ColorName";
        dgQty.Columns.Add(bfield1);
    }
    private void getColor()
    {
        DataTable dt = new DataTable();
        dt.Columns.Add("ID", typeof(string));
        dt.Columns.Add("ColorName", typeof(string));
        //DataRow dr = dt.NewRow();
        //dt.Rows.Add(dr);
        ViewState["ColorInfo"] = dt;
    }
    private void getSize()
    {
        DataTable dt = new DataTable();
        dt.Columns.Add("ID", typeof(string));
        dt.Columns.Add("SizeName", typeof(string));
        ViewState["SizeInfo"] = dt;
    }
    private void getQty()
    {
        GrideViewColumns();
        DataTable dt = new DataTable();
        DataTable dtSz = (DataTable)ViewState["SizeInfo"];
        dt.Columns.Add("ColorID", typeof(string));
        dt.Columns.Add("ColorName", typeof(string));
        foreach (DataRow dr in dtSz.Rows)
        {
            dt.Columns.Add(dr["SizeName"].ToString(), typeof(string));
        }
        int countSZ = dtSz.Rows.Count;
        DataTable dtCL = (DataTable)ViewState["ColorInfo"];
        foreach (DataRow dr in dtCL.Rows)
        {
            DataRow dr1 = dt.NewRow();
            dr1["ColorID"] = dr["ID"].ToString();
            dr1["ColorName"] = dr["ColorName"].ToString();
            dt.Rows.Add(dr1);
        }
        ViewState["Qty"] = dt;
        foreach (DataRow dr in dtSz.Rows)
        {
            string coln = dr["SizeName"].ToString();
            TemplateField tf3 = new TemplateField();
            tf3.HeaderTemplate = new GridViewTemplate(DataControlRowType.Header, coln, new Label(), "");
            tf3.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            tf3.ItemStyle.HorizontalAlign = HorizontalAlign.Center;
            tf3.ItemStyle.Width = 90;
            dgQty.Columns.Add(tf3);
        }        
        dgQty.DataSource = dt;
        dgQty.DataBind();
    }
    protected void dgQty_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        //try
        //{
            if (e.Row.RowType == DataControlRowType.DataRow | e.Row.RowType == DataControlRowType.Header | e.Row.RowType == DataControlRowType.Footer)
            {
                e.Row.Cells[0].Attributes.Add("style", "display:none");
                //e.Row.Cells[0].Font.Bold = true;
            }
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                DataTable dtSz = (DataTable)ViewState["SizeInfo"];
                int a = 2;
                foreach (DataRow dr in dtSz.Rows)
                {
                    string txtSize = dr["SizeName"].ToString();
                    TextBox tb = (TextBox)(e.Row.Cells[a].FindControl(txtSize));
                    tb.Attributes.Add("style", "text-align:right");
                    tb.Attributes.Add("onfocus", "this.select();");
                    tb.Attributes.Add("onkeypress", "return isNumber(event)");
                    tb.Text = (e.Row.DataItem as DataRowView).Row[txtSize].ToString();
                    a++;
                }
               // e.Row.Cells[0].Attributes.Add("style", "display:none");
            }
           
        //}
        //catch (FormatException fex)
        //{
        //    ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('" + fex.Message + "');", true);
        //}
        //catch (Exception ex)
        //{
        //    if (ex.Message.Contains("Database"))
        //        ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Database Maintain Error. Contact to the Software Provider..!!');", true);
        //    else
        //        ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('There is some problem to do the task. Try again properly.!!');", true);
        //}
    }
    protected void dgShiftmentItems_SelectedIndexChanged(object sender, EventArgs e)
    {
        lblMasterID.Text = dgShiftmentItems.SelectedRow.Cells[8].Text;
        int Count = IdManager.GetShowSingleValueInt("Count(*)", "BoxingItemsID", "ShiftmentBoxingItemsQuantity", lblMasterID.Text);
        if (Count > 0)
        {
            DataTable dtt = ShiftmentItemsCartoonManager.GetShowCartoonItems(txtCartoonNo.Text, txtShiftmentNo.Text, lblMasterID.Text);
            lblCartoonNo.Text = dtt.Rows[0]["CartoonNo"].ToString();
            lblShiftmentNo.Text = dtt.Rows[0]["ShiftmentNO"].ToString();
            lblItemsName.Text = dtt.Rows[0]["ItemsName"].ToString();
            lblQuantity.Text = dtt.Rows[0]["Quantity"].ToString();
            lblColor.Text = dtt.Rows[0]["Color"].ToString();
            lblItemID.Text = dgShiftmentItems.SelectedRow.Cells[7].Text;
            lblMasterID.Text = dgShiftmentItems.SelectedRow.Cells[8].Text;
            ViewState["ShiftmentID"] = dtt.Rows[0]["ShiftmentID"].ToString();
            lblShiftmentID.Text = dtt.Rows[0]["ShiftmentID"].ToString();

            DataTable dt = IdManager.GetShowDataTable("SELECT '' CHK,[ID],[ColorName] FROM [ColorInfo] Order By ID ASC");
            chkColor.DataSource = dt; chkColor.DataTextField = "ColorName"; chkColor.DataValueField = "ID";
            chkColor.DataBind();
            DataTable dt1 = IdManager.GetShowDataTable("SELECT '' CHK,[ID],[SizeName] FROM [SizeInfo] Order By ID ASC ");
            chkSize.DataSource = dt1; chkSize.DataTextField = "SizeName"; chkSize.DataValueField = "ID";
            chkSize.DataBind();
            getColor();
            getSize();
            DataTable dtColor = IdManager.GetShowDataTable("SELECT '0' CHK,t1.[ID] ,t1.[ColorName] FROM [ColorInfo] t1 where t1.[ID]  not in (select tt.ColorID_SizeID from [ShiftmentItemsBoxingColorSize] tt where tt.[Type]=0 and tt.BoxingItemsID='" + lblMasterID.Text.Trim() + "')   UNION ALL SELECT '1' CHK,t1.[ColorID_SizeID]  ,t2.ColorName FROM ShiftmentItemsBoxingColorSize t1 inner join ColorInfo t2 on t2.ID=t1.ColorID_SizeID where t1.BoxingItemsID='" + lblMasterID.Text.Trim() + "' and t1.[Type]=0 order by t1.ID");
            for (int i = 0; i < dtColor.Rows.Count; i++)
            {
                if (dtColor.Rows[i]["CHK"].ToString() == "1")
                {
                    chkColor.Items[i].Selected = true;
                    tbColorSize.Visible = true;
                }
            }
            DataTable dtSize = IdManager.GetShowDataTable("SELECT '0' CHK,t1.[ID] ,t1.SizeName FROM SizeInfo t1 where t1.[ID]  not in (select tt.ColorID_SizeID from [ShiftmentItemsBoxingColorSize] tt where tt.[Type]=1 and tt.BoxingItemsID='" + lblMasterID.Text.Trim() + "')  UNION ALL SELECT '1' CHK,t1.[ColorID_SizeID] ,t2.SizeName FROM [ShiftmentItemsBoxingColorSize] t1 inner join SizeInfo t2 on t2.ID=t1.ColorID_SizeID where t1.BoxingItemsID='" + lblMasterID.Text.Trim() + "' and t1.[Type]=1 order by t1.ID");
            for (int i = 0; i < dtColor.Rows.Count; i++)
            {
                if (dtSize.Rows[i]["CHK"].ToString() == "1")
                {
                    chkSize.Items[i].Selected = true;
                    tbColorSize.Visible = true;
                }
            }
            btnProductQuantity_Click(sender, e);
            DataTable dt11 = ShiftmentItemsCartoonManager.getShiftmentItemsCartoonItemsQuantity(lblMasterID.Text,"");
            if (dt11.Rows.Count > 0)
            {
                dgQty.DataSource = dt11;
                dgQty.DataBind();
                Pandel1.Enabled = Panel2.Enabled = false;
            }
            BindGridData();
            btnProductImage.OnClientClick = "javascript:OpenWindow('frmImage.aspx?ID=" + lblMasterID.Text + "&RefNo=" + "00" + "');return false;";
            tbItemsDtl.Visible = true;
            tbCartoon.Visible = false;
        }
        else
        {
            DataTable dt = ShiftmentItemsCartoonManager.GetShowCartoonItems(txtCartoonNo.Text, txtShiftmentNo.Text, dgShiftmentItems.SelectedRow.Cells[8].Text);
            lblCartoonNo.Text = dt.Rows[0]["CartoonNo"].ToString();
            lblShiftmentNo.Text = dt.Rows[0]["ShiftmentNO"].ToString();
            lblItemsName.Text = dt.Rows[0]["ItemsName"].ToString();
            lblQuantity.Text = dt.Rows[0]["Quantity"].ToString();
            lblColor.Text = dt.Rows[0]["Color"].ToString();
            lblItemID.Text = dgShiftmentItems.SelectedRow.Cells[7].Text;
            lblMasterID.Text = dgShiftmentItems.SelectedRow.Cells[8].Text;
            ViewState["ShiftmentID"] = dt.Rows[0]["ShiftmentID"].ToString();
            lblShiftmentID.Text = dt.Rows[0]["ShiftmentID"].ToString();

            tbItemsDtl.Visible = true;
            tbCartoon.Visible = false;
            btnProductImage.OnClientClick = "javascript:OpenWindow('frmImage.aspx?ID=" + "" + "&RefNo=" + "00" + "');return false;";
        }
    }
    protected void btnColorSize_Click1(object sender, EventArgs e)
    {
        tbColorSize.Visible = true;
    }
    protected void btnProductImage_Click(object sender, EventArgs e)
    {

    }
    protected void btnProductQuantity_Click(object sender, EventArgs e)
    {
        GrideViewColumns();
        getColor();
        getSize();
        foreach (System.Web.UI.WebControls.ListItem item in chkColor.Items)
        {
            if (item.Selected)
            {
                string Name = "";
                DataTable dt = (DataTable)ViewState["ColorInfo"];
                Name = IdManager.GetShowSingleValueString("ColorName", "ID", "ColorInfo", item.Value);
                dt.Rows.Add(item.Value, Name);
                ViewState["ColorInfo"] = dt;
            }
        }
        DataTable dtt = new DataTable();
        foreach (System.Web.UI.WebControls.ListItem item in chkSize.Items)
        {
            if (item.Selected)
            {
                DataTable dt = (DataTable)ViewState["SizeInfo"];
                string Name = IdManager.GetShowSingleValueString("SizeName", "ID", "SizeInfo", item.Value);
                dt.Rows.Add(item.Value, Name);
                ViewState["SizeInfo"] = dt;
            }
        }
        DataTable ttb1 = (DataTable)ViewState["ColorInfo"];
        DataTable ttb2 = (DataTable)ViewState["SizeInfo"];
        if (ttb1.Rows.Count <= 0)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Select color first  ...!!');", true);
            return;
        }
        if (ttb2.Rows.Count <= 0)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Select size first  ...!!');", true);
            return;
        }
        ViewState["Qty"] = null;
        getQty();
        dgQty.Visible = true;
    }
    private void BindGridData()
    {
        SqlConnection connection = new SqlConnection(DataManager.OraConnString());
        SqlCommand command = new SqlCommand("SELECT '' AS imagename,[ID] AS ImageID, [Image] AS Image from [ShiftmentBoxingItemsImage] where [BoxingItemsID] ='" + "" + "'", connection);
        SqlDataAdapter daimages = new SqlDataAdapter(command);
        DataTable dt = new DataTable();
        daimages.Fill(dt);
        Session["Img"] = dt;
    }
    protected void dgQty_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {

    }
    protected void dgQty_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            DataTable dtSz = (DataTable)ViewState["SizeInfo"];
            int a = 2;
            foreach (DataRow dr in dtSz.Rows)
            {
                TextBox txtBx = new TextBox();
                txtBx.ID = dr["SizeName"].ToString();
                txtBx.Visible = true;
                //txtBx.AutoPostBack = true;
                txtBx.EnableViewState = true;
                e.Row.Cells[a].Controls.Add(txtBx);
                a++;
            }
        }
    }
    protected void BtnSearch_Click(object sender, EventArgs e)
    {
        DataTable dt12 = ShiftmentItemsCartoonManager.GetShowCartoonItems(txtCartoonNo.Text, lblShiftmentID.Text, "");
        dgShiftmentItems.DataSource = dt12;
        ViewState["History"] = dt12;
        dgShiftmentItems.DataBind();
    }
    protected void txtShiftmentNo_TextChanged(object sender, EventArgs e)
    {
        DataTable dt = ShiftmentAssignManager.GetShowShiftmentAssignOnSearch(txtShiftmentNo.Text);
        if (dt.Rows.Count > 0)
        { lblShiftmentID.Text = dt.Rows[0]["ID"].ToString(); }
    }
    protected void btnSave_Click(object sender, EventArgs e)
    {
        DataTable dtImg = (DataTable)Session["Img"];
        DataTable dtColor = (DataTable)ViewState["ColorInfo"];
        DataTable dtSize = (DataTable)ViewState["SizeInfo"];
        DataTable dtQt = new DataTable();
        ShiftmentItemsCartoon aShiftmentItemsCartoon = new ShiftmentItemsCartoon();
        if (lblCartoonNo.Text.Trim() == "")
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Cartoon No ..!!');", true);           
            return;
        }
        if (lblShiftmentNo.Text.Trim() == "")
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Shiftment No  ...!!');", true);            
            return;
        }
        //if (dtQt.Rows.Count <= 0)
        //{
        //   // ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Saved successfully.');", true);
        //   // ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Add Product Quantity In List ...!!');", true);
        //    //btnProductQuantity_Click(sender, e);
        //    ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert", "alert('Check Bro.....!!!');", true);
        //    return;
        //}
        int Count = IdManager.GetShowSingleValueInt("Count(*)", "BoxingItemsID", "ShiftmentBoxingItemsQuantity", lblMasterID.Text);
        if (Count > 0)
        {
            aShiftmentItemsCartoon.ID = lblMasterID.Text;
            aShiftmentItemsCartoon.ItemsID = lblItemID.Text;
            
            dtQt.Columns.Add("ColorID", typeof(string));
            dtQt.Columns.Add("SizeID", typeof(string));
            dtQt.Columns.Add("Quantity", typeof(string));
            decimal Tot = decimal.Zero;
            foreach (GridViewRow gvr in dgQty.Rows)
            {
                int ii = 2;
                foreach (DataRow dr in dtSize.Rows)
                {
                    DataRow ddr = dtQt.NewRow();
                    string txtSize = dr["SizeName"].ToString();
                    ddr["SizeID"] = dr["ID"].ToString();
                    ddr["ColorID"] = gvr.Cells[0].Text;
                    TextBox tb = (TextBox)(gvr.Cells[ii].FindControl(txtSize));
                    ddr["Quantity"] = tb.Text;
                    if (tb.Text.Trim() != "")
                    {
                        Tot += Convert.ToDecimal(ddr["Quantity"].ToString());
                    }
                    string a = tb.Text;
                    dtQt.Rows.Add(ddr);
                    ii++;
                }
            }
            ViewState["Qty"] = dtQt;
            if (dtQt.Rows.Count > 0)
            {
                if (Tot == Convert.ToDecimal(lblQuantity.Text))
                {
                    ShiftmentItemsCartoonManager.UpdateItemShiftmentForCartoon(aShiftmentItemsCartoon, dtImg, dtColor, dtSize, dtQt);                    
                    ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert", "alert('Record are update sucessfully...!!');", true);
                    btnSave.Enabled = false;
                    UpdatePanel1.Update();
                }
                else
                {                  
                    ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert", "alert('Product Quantity Are not Same...!!');", true);
                    return;
                }
            }
            else
            {
                ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert", "alert('Add Cartoon Color and Size Quantity ..!!');", true);
                return;
            }
        }
        else
        {
            aShiftmentItemsCartoon.ID = lblMasterID.Text;
            aShiftmentItemsCartoon.ItemsID = lblItemID.Text;           
            dtQt.Columns.Add("ColorID", typeof(string));
            dtQt.Columns.Add("SizeID", typeof(string));
            dtQt.Columns.Add("Quantity", typeof(string));
            decimal Tot = decimal.Zero;
            foreach (GridViewRow gvr in dgQty.Rows)
            {
                int ii = 2;
                foreach (DataRow dr in dtSize.Rows)
                {
                    DataRow ddr = dtQt.NewRow();
                    string txtSize = dr["SizeName"].ToString();

                    ddr["SizeID"] = dr["ID"].ToString();
                    ddr["ColorID"] = gvr.Cells[0].Text;
                    TextBox tb = (TextBox)(gvr.Cells[ii].FindControl(txtSize));
                    ddr["Quantity"] = tb.Text;
                    if (tb.Text.Trim() != "")
                    {
                        Tot += Convert.ToDecimal(ddr["Quantity"].ToString());
                    }
                    string a = tb.Text;
                    dtQt.Rows.Add(ddr);
                    ii++;
                }
            }
            ViewState["Qty"] = dtQt;
            if (dtQt.Rows.Count > 0)
            {
                if (Tot == Convert.ToDecimal(lblQuantity.Text))
                {
                    ShiftmentItemsCartoonManager.SaveItemShiftmentForCartoon(aShiftmentItemsCartoon, dtImg, dtColor, dtSize, dtQt);                   
                    ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert", "alert('Record are saved sucessfully...!!');", true);
                    btnSave.Enabled = false;
                    UpdatePanel1.Update();
                }
                else
                {                    
                    ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert", "alert('Product Quantity Are not Same...!!');", true);
                    return;
                }              
            }
            else
            {
                ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert", "alert('Add Cartoon Color and Size Quantity ..!!');", true);
                return;
            }
        }
    }
   
    protected void dgShiftmentItems_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        dgShiftmentItems.DataSource = ViewState["History"];
        dgShiftmentItems.PageIndex = e.NewPageIndex;
        dgShiftmentItems.DataBind();
    }
    protected void btnDelete_Click(object sender, EventArgs e)
    {
        if (txtCartoonNo.Text == "")
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Cartoon No ..!!');", true);
            return;
        }
        if (txtShiftmentNo.Text == "")
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Shiftment No  ...!!');", true);
            return;
        }

        if (lblMasterID.Text != "")
        {
            ShiftmentItemsCartoon aShiftmentItemsCartoon = new ShiftmentItemsCartoon();
            aShiftmentItemsCartoon.ID = lblMasterID.Text;
            aShiftmentItemsCartoon.ItemsID = lblItemID.Text;
            ShiftmentItemsCartoonManager.DeleteItemShiftmentForCartoon(aShiftmentItemsCartoon);
            btnDelete.Enabled = false;
            btnSave.Enabled = false;
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Cartoon Items Delete Sucessfully...!!');", true);
        }
        else
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Select Cartoon in the list.then delete ...!!');", true);
        }
    }
    protected void btnClear_Click(object sender, EventArgs e)
    {
        var pageName = System.IO.Path.GetFileName(Request.Url.ToString());
        Response.Redirect(pageName);
    }
   
    protected void dgShiftmentItems_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow | e.Row.RowType == DataControlRowType.Header | e.Row.RowType == DataControlRowType.Footer)
        {
            e.Row.Cells[7].Attributes.Add("style", "display:none");
            e.Row.Cells[8].Attributes.Add("style", "display:none");            
        } 
    }
    protected void dgShiftmentItems_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName == "OK")
        {
            GridViewRow gvr = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
            string Name = gvr.Cells[3].Text.ToString().Trim();
            ScriptManager.RegisterStartupScript(Page, Page.GetType(), "newWindow", "window.open('frmImageView.aspx?ID=" + gvr.Cells[7].Text.ToString().Trim() + " &ItemsName=" + Name + "','_blank','status=1,toolbar=0,menubar=0,location=1,top=250,left=250px,width=500px,height=250px,directories=no,status=no, linemenubar=no,scrollbars=no,resizable=no ,modal=yes');", true);
        }
    }
    protected void btnPrint_Click(object sender, EventArgs e)
    {
        getShiftmentQtyPrint();
    }
    private BarcodeLib.Barcode barcode = new BarcodeLib.Barcode();
    public void getShiftmentQtyPrint()
    {
        DataTable dtMst = ShiftmentItemsManager.GetShowItemsInfo(dgShiftmentItems.SelectedRow.Cells[7].Text.Trim());
        if (dtMst.Rows.Count > 0)
        {
            string filename = "PO_" + txtShiftmentNo.Text;
            Response.Clear();
            Response.ContentType = "application/pdf";
            Response.AddHeader("content-disposition", "attachment; filename=" + filename + ".pdf");
            Document document = new Document(PageSize.A4);
            PdfWriter writer = PdfWriter.GetInstance(document, Response.OutputStream);
            document.Open();
            iTextSharp.text.Rectangle page = document.PageSize;
            PdfPTable head = new PdfPTable(1);
            head.TotalWidth = page.Width - 50;          

            barcode.Alignment = BarcodeLib.AlignmentPositions.CENTER;
            int W = 550;
            int H = 160;

            BarcodeLib.TYPE type = BarcodeLib.TYPE.CODE128;
            barcode.IncludeLabel = false;
            barcode.RotateFlipType = (RotateFlipType)Enum.Parse(typeof(RotateFlipType), "RotateNoneFlipNone", true);
            barcode.LabelPosition = BarcodeLib.LabelPositions.BOTTOMCENTER;

            System.Drawing.Image generatedBarcode = barcode.Encode(type, dtMst.Rows[0]["ID"].ToString(), Color.Black, Color.White, W, H);
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            generatedBarcode.Save(stream, System.Drawing.Imaging.ImageFormat.Png);

            byte[] logo2 = stream.ToArray();
            iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(logo2);
            gif2.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
            gif2.ScalePercent(20f);

            PdfPCell cell;
            byte[] logo = GlBookManager.GetGlLogo(Session["book"].ToString());
            iTextSharp.text.Image gif = iTextSharp.text.Image.GetInstance(logo);
            gif.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
            gif.ScalePercent(8f);

            float[] titwidth = new float[3] { 15, 40,15 };
            PdfPTable dth = new PdfPTable(titwidth);
            dth.WidthPercentage = 100;

            cell = new PdfPCell(gif);
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.VerticalAlignment = Element.ALIGN_TOP;
            cell.HorizontalAlignment = Element.ALIGN_TOP;
            cell.Rowspan = 4;            
            cell.BorderWidth = 0f;
            dth.AddCell(cell);

            cell = new PdfPCell(new Phrase(Session["org"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD)));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;            
            cell.BorderWidth = 0f;
            // cell.FixedHeight = 20f;
            dth.AddCell(cell);

            cell = new PdfPCell(gif2);
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.VerticalAlignment = Element.ALIGN_MIDDLE;
            cell.HorizontalAlignment = Element.ALIGN_MIDDLE;
            cell.Rowspan = 4;
            cell.BorderWidth = 0f;
            dth.AddCell(cell);

            cell = new PdfPCell(new Phrase(Session["add1"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;           
            cell.BorderWidth = 0f;
            // cell.FixedHeight = 20f;
            dth.AddCell(cell);
            cell = new PdfPCell(new Phrase(Session["add2"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;            
            cell.BorderWidth = 0f;
            //cell.FixedHeight = 20f;
            dth.AddCell(cell);
            cell = new PdfPCell(new Phrase("Items Image", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;            
            cell.BorderWidth = 0f;
            //cell.FixedHeight = 30f;
            dth.AddCell(cell);
            document.Add(dth);
            //LineSeparator line = new LineSeparator(1, 100, null, Element.ALIGN_CENTER, -2);
            //document.Add(line);

            PdfPTable dtempty = new PdfPTable(1);
            cell = new PdfPCell(FormatHeaderPhrase(""));
            cell.BorderWidth = 0f;
            cell.FixedHeight = 10f;
            dtempty.AddCell(cell);
            document.Add(dtempty);            

            float[] MB = new float[1] { 100 };
            PdfPTable pdMB = new PdfPTable(MB);
            pdMB.WidthPercentage = 100;

            float[] widthdtl = new float[6] { 20, 20, 20, 20, 20, 20 };
            PdfPTable pdtdtl = new PdfPTable(widthdtl);
            pdtdtl.WidthPercentage = 100;           

            cell = new PdfPCell(FormatHeaderPhrase("CTN No : " + lblCartoonNo.Text));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            cell.Colspan = 2;           
            cell.BorderWidth = 0f;
            pdtdtl.AddCell(cell);

            cell = new PdfPCell(FormatHeaderPhrase("Shiftment No. : " + lblShiftmentNo.Text));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            cell.Colspan = 2;           
            cell.BorderWidth = 0f;
            pdtdtl.AddCell(cell);

            cell = new PdfPCell(FormatHeaderPhrase("Date : " + dtMst.Rows[0]["ShiftmentDate"].ToString()));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            cell.Colspan = 2;
            cell.BorderWidth = 0f;
            pdtdtl.AddCell(cell);

            cell = new PdfPCell(FormatHeaderPhrase(""));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            cell.Colspan = 6;
            cell.FixedHeight = 10f;
            cell.BorderWidth = 0f;
            pdtdtl.AddCell(cell);

            cell = new PdfPCell(FormatHeaderPhrase("Party Name"));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            //cell.BorderWidth = 0f;
            //cell.FixedHeight = 20f;
            cell.Colspan = 2;
            pdtdtl.AddCell(cell);
            cell = new PdfPCell(FormatHeaderPhrase("Items Name"));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            // cell.BorderWidth = 0f;
            //cell.FixedHeight = 20f;
            cell.Colspan = 2;
            pdtdtl.AddCell(cell);
            cell = new PdfPCell(FormatHeaderPhrase("Label"));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            // cell.BorderWidth = 0f;
            // cell.FixedHeight = 30f;
            cell.Colspan = 2;
            pdtdtl.AddCell(cell);
            if (dtMst.Rows.Count > 0)
            {
                cell = new PdfPCell(FormatFontPhrase(dtMst.Rows[0]["PartyName"].ToString()));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                //cell.BorderWidth = 0f;
                //cell.FixedHeight = 20f;
                cell.Colspan = 2;
                pdtdtl.AddCell(cell);
                cell = new PdfPCell(FormatFontPhrase(dtMst.Rows[0]["Name"].ToString()));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                //cell.BorderWidth = 0f;
                //cell.FixedHeight = 20f;
                cell.Colspan = 2;
                pdtdtl.AddCell(cell);
                cell = new PdfPCell(FormatFontPhrase(dtMst.Rows[0]["Label"].ToString()));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                //cell.BorderWidth = 0f;
                cell.Colspan = 2;
                pdtdtl.AddCell(cell);
            }
            cell = new PdfPCell(FormatFontPhrase(""));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            cell.BorderWidth = 0f;
            cell.FixedHeight = 8;
            cell.Colspan = 6;
            pdtdtl.AddCell(cell);
            DataTable dt = IdManager.GetShowDataTable("SELECT '' AS imagename,[ID] AS ImageID, [Image] AS Image from [ShiftmentBoxingItemsImage] where [BoxingItemsID] ='" + lblMasterID.Text + "'");
            if (dt.Rows.Count > 0)
            {
                PdfPTable pdtclient = new PdfPTable(dt.Rows.Count);
                pdtclient.WidthPercentage = 100;
                decimal tt = decimal.Zero;
                decimal tot = (6 / dt.Rows.Count);
                tt = 6 * Math.Ceiling(tot);
                for (int i = 0; i < tt; i++)
                {
                    if (dt.Rows.Count - 1 < i)
                    {
                        cell = new PdfPCell(FormatHeaderPhrase(""));
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        cell.BorderWidth = 0f;
                        pdtdtl.AddCell(cell);
                    }
                    else
                    {
                        DataRow dr = dt.Rows[i];
                        byte[] logo1 = (byte[])dr["Image"];
                        iTextSharp.text.Image gif1 = iTextSharp.text.Image.GetInstance(logo1);
                        gif1.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
                        gif1.ScalePercent(30f);
                        cell = new PdfPCell(gif1);
                        cell.PaddingBottom=10f;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        cell.BorderWidth = 0f;
                        pdtdtl.AddCell(cell);
                    }
                }
            }
            //DataTable dt11 = ShiftmentItemsManager.GetShiftmentItemsQuantity(txtID.Text);
            DataTable dt11 = ShiftmentItemsCartoonManager.getShiftmentItemsCartoonItemsQuantity(lblMasterID.Text, "");
            float[] widthbi = new float[dt11.Columns.Count];
            for (int i = 0; i < dt11.Columns.Count; i++)
            {
                widthbi[i] = 100 / dt11.Columns.Count;
            }
            PdfPTable with1 = new PdfPTable(widthbi);
            with1.WidthPercentage = 100;

            for (int i = 1; i < dt11.Columns.Count; i++)
            {
                cell = new PdfPCell(FormatHeaderPhrase(dt11.Columns[i].ColumnName));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                with1.AddCell(cell);
            }
            cell = new PdfPCell(FormatHeaderPhrase("Total"));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            with1.AddCell(cell);
            int ff = 0;
            double tot1 = 0;
            double tot2 = 0;
            for (int i = 0; i < dt11.Rows.Count; i++)
            {
                for (int j = 1; j < dt11.Columns.Count; j++)
                {
                    cell = new PdfPCell(FormatFontPhrase(dt11.Rows[i][j].ToString()));
                    if (ff == 0)
                    { cell.HorizontalAlignment = 0; }
                    else { cell.HorizontalAlignment = 1; }
                    cell.VerticalAlignment = 1;
                    with1.AddCell(cell);
                    if (dt11.Rows[i][j].ToString() != "" && ff > 0)
                    {
                        tot1 += Convert.ToDouble(dt11.Rows[i][j].ToString());
                        tot2 += Convert.ToDouble(dt11.Rows[i][j].ToString());
                    }
                    ff++;

                }
                cell = new PdfPCell(FormatFontPhrase(tot1.ToString("N3")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                with1.AddCell(cell);
                ff = 0;
                tot1 = 0;
            }
            cell = new PdfPCell(FormatHeaderPhrase("Total"));
            cell.HorizontalAlignment = 2;
            cell.VerticalAlignment = 1;
            cell.Colspan = dt11.Columns.Count - 1;
            with1.AddCell(cell);
            cell = new PdfPCell(FormatHeaderPhrase(tot2.ToString("N3")));
            cell.HorizontalAlignment = 2;
            cell.VerticalAlignment = 1;
            cell.Colspan = dt11.Columns.Count - 1;
            with1.AddCell(cell);

           

            cell = new PdfPCell(pdtdtl);
            cell.BorderWidth = 1f;
            pdMB.AddCell(cell);

            cell = new PdfPCell(with1);
            cell.BorderWidth = 1f;
            pdMB.AddCell(cell);
            //cell = new PdfPCell(pdtpur);
            //cell.BorderWidth = 0f;        
            document.Add(pdMB);

            

            document.Close();
            Response.Flush();
            Response.End();
        }
    }
    private static PdfPCell SignatureFormat(Document document, PdfPCell cell)
    {
        float[] widtl = new float[5] { 20, 20, 20, 20, 20 };
        PdfPTable pdtsig = new PdfPTable(widtl);
        pdtsig.WidthPercentage = 100;
        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.Colspan = 5;
        cell.FixedHeight = 40f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);


        cell = new PdfPCell(FormatPhrase("Prepared by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);

        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        cell = new PdfPCell(FormatPhrase("Checked by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);

        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        cell = new PdfPCell(FormatPhrase("Authorised by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        document.Add(pdtsig);
        return cell;
    }

    private static Phrase FormatPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9));
    }

    private static Phrase FormatHeaderPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD));
    }
    private static Phrase FormatFontPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.NORMAL));
    }   
}