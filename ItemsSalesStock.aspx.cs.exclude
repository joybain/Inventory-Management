using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using Delve;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.pdf.draw;
using System.Data.SqlClient;
using ClosedXML.Excel;
using System.IO;

public partial class ItemsSalesStock : System.Web.UI.Page
{
    private static Permis per;
    private readonly  ClsItemDetailsManager _aClsItemDetailsManager=new ClsItemDetailsManager();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["user"] == null)
        {
            if (Session.SessionID != "" | Session.SessionID != null)
            {
                clsSession ses = clsSessionManager.getSession(Session.SessionID);
                if (ses != null)
                {
                    Session["user"] = ses.UserId;
                    Session["book"] = "AMB";
                    string connectionString = DataManager.OraConnString();
                    SqlDataReader dReader;
                    SqlConnection conn = new SqlConnection();
                    conn.ConnectionString = connectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText =
                        "Select user_grp,[description],UserType,case when UserType=1 then 'Bangladesh' else 'Philippine' end AS[LoginCountry] from utl_userinfo where upper(user_name)=upper('" +
                        Session["user"].ToString().ToUpper() + "') and status='A'";
                    conn.Open();
                    dReader = cmd.ExecuteReader();
                    string wnot = "", userType = "";
                    if (dReader.HasRows == true)
                    {
                        while (dReader.Read())
                        {
                            Session["userlevel"] = int.Parse(dReader["user_grp"].ToString());
                            //Session["dept"] = dReader["dept"].ToString();
                            wnot = "Welcome " + dReader["description"].ToString();
                            Session["LoginCountry"] = dReader["LoginCountry"].ToString();
                            userType = dReader["UserType"].ToString();
                        }
                        Session["wnote"] = wnot;
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandType = CommandType.Text;
                        //cmd.CommandText = "Select book_desc,company_address1,company_address2,separator_type from gl_set_of_books where book_name='" + Session["book"].ToString() + "' ";
                        if (Convert.ToInt32(userType) == 2)
                        {

                            Session["bookMAN"] = "MAN";
                        }
                        else
                        {
                            Session["bookMAN"] = Session["book"].ToString();
                        }
                        cmd.CommandText = "Select book_desc,company_address1,company_address2,separator_type,ShotName from gl_set_of_books where book_name='" + Session["bookMAN"] + "' ";

                        if (dReader.IsClosed == false)
                        {
                            dReader.Close();
                        }
                        dReader = cmd.ExecuteReader();
                        if (dReader.HasRows == true)
                        {
                            while (dReader.Read())
                            {
                                Session["septype"] = dReader["separator_type"].ToString();
                                Session["org"] = dReader["book_desc"].ToString();
                                Session["add1"] = dReader["company_address1"].ToString();
                                Session["add2"] = dReader["company_address2"].ToString();
                            }
                        }
                    }
                    dReader.Close();
                    conn.Close();
                }
            }
        }
        try
        {
            string pageName = DataManager.GetCurrentPageName();
            string modid = PermisManager.getModuleId(pageName);
            per = PermisManager.getUsrPermis(Session["user"].ToString().Trim().ToUpper(), modid);
            if (per != null && per.AllowView == "Y")
            {
                ((Label)Page.Master.FindControl("lblLogin")).Text = Session["wnote"].ToString();
                ((Label)Page.Master.FindControl("lblCountryName")).Text = Session["LoginCountry"].ToString();
                ((LinkButton)Page.Master.FindControl("lbLogout")).Visible = true;
            }
            else
            {
                Response.Redirect("Home.aspx?sid=sam");
            }
        }
        catch
        {
            Response.Redirect("Default.aspx?sid=sam");
        } 
        if (!IsPostBack)
        {
            ddlCatagory.DataSource = MajorCategoryManager.GetMajorCats("");
            ddlCatagory.DataTextField = "mjr_desc";
            ddlCatagory.DataValueField = "mjr_code";
            ddlCatagory.DataBind();
            ddlCatagory.Items.Insert(0, "");

            Users usr = Delve.UsersManager.getUser(Session["user"].ToString());
            if (usr != null)
            {
                lblBranchID.Text = usr.Dept;
                lblBranchName.Text = "Branch Name : " + IdManager.GetShowSingleValueString("BranchName", "ID", "BranchInfo", usr.Dept);
            }
            else
            {
                ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert", "alert('Set branch this user.!!!');", true);
                return;
            }
           
            //**************** Other Stock *******
            for (int i = 0; i <= 2; i++)
            {
                DataTable dtt1 = ClsItemDetailsManager.GetBadStockInformation(i);

                if (i == 0)
                {
                    dgBadStock.DataSource = dtt1;
                    dgBadStock.DataBind();
                }
                else if (i == 1)
                {
                    dgLossStock.DataSource = dtt1;
                    dgLossStock.DataBind();
                }
                else if (i == 2)
                {
                    dgAccessStock.DataSource = dtt1;
                    dgAccessStock.DataBind();
                }
               
            }
            //*******  *********//
            DataTable dt = IdManager.GetShowDataTable("select ID,BranchName,Flag from BranchInfo order by BranchName asc");
            ddlBranch.DataSource = dt;
            ddlBranch.DataTextField = "BranchName";
            ddlBranch.DataValueField = "ID";
            ddlBranch.DataBind();
            ddlBranch.Items.Insert(0, "");
            //BranchDroppedDown(dt);
            TabPanel1.Visible = TabPanel2.Visible = TabPanel3.Visible = true;
            ddlBranch.Enabled = btnPrintAllBranch.Visible = true;
            RefreshAll("","");
            tabVch.ActiveTabIndex = 0;
            txtSupplierName.Visible = lblSearchSupplier.Visible = false;
        }
    }

    private void BranchDroppedDown(DataTable dt)
    {
        ddlBranch.Items.Clear();
        ddlBranch.DataSource = dt;
        ddlBranch.DataTextField = "BranchName";
        ddlBranch.DataValueField = "ID";
        ViewState["Branch"] = dt;
        ddlBranch.DataBind();
        ddlBranch.Items.Insert(0, "");
    }

    private void RefreshAll(string BranchID, string Flag)
    {
        String connectionString = DataManager.OraConnString();
        string FalgMainBranch = IdManager.GetShowSingleValueString("Flag", "ID", "BranchInfo", BranchID);
        string query = "";
        DataTable dtt;
        if (!string.IsNullOrEmpty(FalgMainBranch))
        {
            //query = @"select  t1.ID,t1.[Code]+' - '+t1.[Name] AS Items,t5.BrandName,t2.Name AS Catagory,t3.Name AS SubCat,t1.[UnitPrice],ISNULL(t4.Quantity,0) AS [ClosingStock],CASE WHEN tt.ShiftmentNO IS NULL THEN 'Local Purchase' ELSE tt.ShiftmentNO end AS ShiftmentNO  from ItemSalesStock t4 INNER JOIN  [Item] t1 on t1.ID=t4.ItemsID left join Category t2 on t2.ID=t1.CategoryID left join SubCategory t3 on t3.ID=t1.SubCategoryID left join ShiftmentAssigen tt on tt.ID=t4.[Type] left join Brand t5 on t5.ID=t1.Brand WHERE t4.Quantity>0";
            //dtt = DataManager.ExecuteQuery(connectionString, query, "autoname");
            DataTable dtAvailableStock = _aClsItemDetailsManager.GetShowAvailableStock(rbSearchType.SelectedValue,
                hfShipmentID.Value.ToString(), ddlCatagory.SelectedValue, ddlSubCatagory.SelectedValue, txtName.Text, BranchID, "");
            if (dtAvailableStock.Rows.Count > 0)
            {
                dgItems.DataSource = dtAvailableStock;
                ViewState["History"] = dtAvailableStock;
                dgItems.DataBind();
                dgItems.Caption = "<h1> Total Items : " + dtAvailableStock.Rows.Count + "</h1>";
            }
        }
        else
        {
            //query = @"select  t1.ID,t1.[Code]+' - '+t1.[Name] AS Items,t6.BrandName,t2.Name AS Catagory,t3.Name AS SubCat,t1.[UnitPrice],ISNULL(t5.Quantity,0) AS [ClosingStock],CASE WHEN tt.ShiftmentNO IS NULL THEN 'Local Purchase' ELSE tt.ShiftmentNO end AS ShiftmentNO  from ItemSalesStockBranchWise t5 INNER JOIN  ItemSalesStock t4  on t4.ID=t5.ItemsID INNER JOIN  [Item] t1 on t1.ID=t4.ItemsID left join Category t2 on t2.ID=t1.CategoryID left join SubCategory t3 on t3.ID=t1.SubCategoryID left join ShiftmentAssigen tt on tt.ID=t4.[Type] left join Brand t6 on t6.ID=t1.Brand WHERE t4.Quantity>0 and t5.BranchID='" + BranchID + "'";
            //dtt = DataManager.ExecuteQuery(connectionString, query, "autoname");      

            DataTable dtAvailableStock = _aClsItemDetailsManager.GetShowAvailableStock(rbSearchType.SelectedValue,
                hfShipmentID.Value.ToString(), ddlCatagory.SelectedValue, ddlSubCatagory.SelectedValue, txtName.Text,
                BranchID,hfSupplierID.Value);
            dgItems.DataSource = null;
            ViewState["History"] = null;
            dgItems.DataBind();
            if (dtAvailableStock.Rows.Count > 0)
            {
                dgItems.DataSource = dtAvailableStock;
                ViewState["History"] = dtAvailableStock;
                dgItems.DataBind();
                dgItems.Caption = "<h1> Total Items : " + dtAvailableStock.Rows.Count + "</h1>";
            }
            if (string.IsNullOrEmpty(Flag))
            {
                TabPanel1.Visible = TabPanel2.Visible = TabPanel3.Visible = false;
                btnPrintAllBranch.Visible = false;
                DataTable dt =
                    IdManager.GetShowDataTable(
                        "select ID,BranchName,Flag from BranchInfo  where Flag=1 UNION ALL select ID,BranchName,Flag from BranchInfo  where ID='" +
                        lblBranchID.Text + "'");
                //BranchDroppedDown(dt);
            }
        }
        txtName.Text = "";
        txtName.Focus();
    }
    protected void brnSearch_Click(object sender, EventArgs e)
    {
        DataTable dtAvailableStock = _aClsItemDetailsManager.GetShowAvailableStock(rbSearchType.SelectedValue,
            hfShipmentID.Value.ToString(), ddlCatagory.SelectedValue, ddlSubCatagory.SelectedValue, hfItemsID.Value.ToString(), ddlBranch.SelectedValue,hfSupplierID.Value);
        dgItems.DataSource = null;
        ViewState["History"] = null;
        dgItems.DataBind();
        if (dtAvailableStock.Rows.Count > 0)
        {
            dgItems.DataSource = dtAvailableStock;
            dgItems.DataBind();
            dgItems.Caption = "<h1> Total Items : " + dtAvailableStock.Rows.Count + "</h1>";
            ViewState["History"] = dtAvailableStock;
        }
    }
    protected void txtShiftmentNo_TextChanged(object sender, EventArgs e)
    {
        DataTable dt = ShiftmentAssignManager.GetShowShiftmentAssignOnSearch(txtShiftmentNo.Text);
        if (dt.Rows.Count > 0)
        {
            txtShiftmentNo.Text = dt.Rows[0]["ShiftmentNO"].ToString();
            hfShipmentID.Value = dt.Rows[0]["ID"].ToString();
        }
    }
    protected void dgItems_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        dgItems.DataSource = ViewState["History"];
        dgItems.PageIndex = e.NewPageIndex;      
        dgItems.DataBind();
    }
    protected void dgItems_SelectedIndexChanged(object sender, EventArgs e)
    {
        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "newWindow", "window.open('frmImageView.aspx?ID=" + dgItems.SelectedRow.Cells[14].Text + " &ItemsName=" + dgItems.SelectedRow.Cells[1].Text + "','_blank','status=1,toolbar=0,menubar=0,location=1,top=250,left=250px,width=500px,height=250px,directories=no,status=no, linemenubar=no,scrollbars=no,resizable=no ,modal=yes');", true);
    }
    protected void dgItems_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow | e.Row.RowType == DataControlRowType.Header | e.Row.RowType == DataControlRowType.Footer)
            {
                e.Row.Cells[16].Attributes.Add("style", "display:none");
                e.Row.Cells[5].Attributes.Add("style", "display:none");
                if (string.IsNullOrEmpty(ddlBranch.SelectedItem.Text))
                {
                    
                    if (rbSearchType.SelectedValue.ToString().Equals("1"))
                    {
                        e.Row.Cells[4].Attributes.Add("style", "display:none");
                        e.Row.Cells[7].Attributes.Add("style", "display:none");
                    }
                    else if (rbSearchType.SelectedValue.ToString().Equals("2"))
                    {
                        //e.Row.Cells[6].Attributes.Add("style", "display:none");
                        //e.Row.Cells[7].Attributes.Add("style", "display:none");
                        e.Row.Cells[8].Attributes.Add("style", "display:none");
                        e.Row.Cells[9].Attributes.Add("style", "display:none");
                        e.Row.Cells[10].Attributes.Add("style", "display:none");
                        //e.Row.Cells[11].Attributes.Add("style", "display:none");
                        //e.Row.Cells[12].Attributes.Add("style", "display:none");
                    }
                }
                else
                {

                    e.Row.Cells[3].Attributes.Add("style", "display:none");
                    e.Row.Cells[4].Attributes.Add("style", "display:none");
                    e.Row.Cells[6].Attributes.Add("style", "display:none");
                    e.Row.Cells[7].Attributes.Add("style", "display:none");
                    e.Row.Cells[8].Attributes.Add("style", "display:none");
                    e.Row.Cells[9].Attributes.Add("style", "display:none");
                    e.Row.Cells[10].Attributes.Add("style", "display:none");
                    e.Row.Cells[11].Attributes.Add("style", "display:none");
                    e.Row.Cells[12].Attributes.Add("style", "display:none");
                    e.Row.Cells[13].Attributes.Add("style", "display:none");
                    e.Row.Cells[14].Attributes.Add("style", "display:none");
                }
            }
        }
        catch (FormatException fex)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('" + fex.Message + "');", true);
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Database"))
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Database Maintain Error. Contact to the Software Provider..!!');", true);
            else
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('There is some problem to do the task. Try again properly.!!');", true);
        }
    }
    public DataTable StockMainAndBranch(string BranchID)
    {
        String connectionString = DataManager.OraConnString();
        string FalgMainBranch = IdManager.GetShowSingleValueString("Flag", "ID", "BranchInfo", BranchID);
        string query = "";
        DataTable dtt;
        if (!string.IsNullOrEmpty(FalgMainBranch))
        {
            query = @"select  t1.ID,t1.[Code]+' - '+t1.[Name] AS Items,t2.Name AS Catagory,t3.Name AS SubCat,t1.[UnitPrice],ISNULL(t4.Quantity,0) AS [ClosingStock],CASE WHEN tt.ShiftmentNO IS NULL THEN 'Local Purchase' ELSE tt.ShiftmentNO end AS ShiftmentNO ,t6.BrandName  from ItemSalesStock t4 INNER JOIN  [Item] t1 on t1.ID=t4.ItemsID left join Category t2 on t2.ID=t1.CategoryID left join SubCategory t3 on t3.ID=t1.SubCategoryID left join ShiftmentAssigen tt on tt.ID=t4.[Type] left join Brand t6 on t6.ID=t1.Brand WHERE t4.Quantity>0";
            dtt = DataManager.ExecuteQuery(connectionString, query, "autoname");
        }
        else
        {
            query = @" select  t1.ID,t1.[Code]+' - '+t1.[Name] AS Items,t2.Name AS Catagory,t3.Name AS SubCat,t1.[UnitPrice],ISNULL(t4.Quantity,0) AS [ClosingStock],CASE WHEN tt.ShiftmentNO IS NULL THEN 'Local Purchase' ELSE tt.ShiftmentNO end AS ShiftmentNO ,t6.BrandName from ItemSalesStockBranchWise t5 INNER JOIN  ItemSalesStock t4  on t4.ID=t5.ItemsID INNER JOIN  [Item] t1 on t1.ID=t4.ItemsID left join Category t2 on t2.ID=t1.CategoryID left join SubCategory t3 on t3.ID=t1.SubCategoryID left join ShiftmentAssigen tt on tt.ID=t4.[Type] left join Brand t6 on t6.ID=t1.Brand WHERE t4.Quantity>0 and t5.BranchID='" + BranchID + "'";
            dtt = DataManager.ExecuteQuery(connectionString, query, "autoname");
        }
        return dtt;
    }

    protected void btnPrint_Click(object sender, EventArgs e)
    {
        if (rbPrintType.SelectedValue.Equals("P"))
        {
            if (!rbSearchType.SelectedValue.Equals("2"))
            {
                PrintSingleBranchStockReport();
            }
            else
            {
                PrintSingleBranchStockLocalReport();
            }
        }
        else
        {
            DataTable dt = (DataTable) ViewState["History"];

            dt.Columns.Remove("ID");
            dt.Columns.Remove("UnitPrice");

            dt.Columns["Items"].ColumnName = "Items Name & Code";
            dt.Columns["ShiftmentNO"].ColumnName = "Ship/Local";
            dt.Columns["SubCat"].ColumnName = "Sub Catagory";
            dt.Columns["ClosingStock"].ColumnName = "Cl. Stock";
            dt.Columns["BrandName"].ColumnName = "Brand";
            dt.Columns["Ship_Qty"].ColumnName = "Ship./Purchase Qty.";
            dt.Columns["PurRtnQty"].ColumnName = "Purchase Return";
            //dt.Columns["Ship_Local"].ColumnName = "Ship/Local";
            dt.Columns["RejectQty"].ColumnName = "Reject Qty.";
            dt.Columns["ShortQty"].ColumnName = "Short Qty.";
            dt.Columns["ExcessQty"].ColumnName = "Excess Qty.";
            dt.Columns["transferQty"].ColumnName = "Trans Qty.";
            dt.Columns["TransRtnQty"].ColumnName = "Trans Rtn Qty";
            dt.Columns["SalesQty"].ColumnName = "Sold Qty.";
            dt.Columns["SupplierName"].ColumnName = "Supplier";
            dt.Columns["RtnQty"].ColumnName = "Rtn. Qty";
            if (rbSearchType.SelectedValue.Equals("1"))
            {
                dt.Columns.Remove("Supplier");
                dt.Columns.Remove("Purchase Return");
                dt.Columns["Ship./Purchase Qty."].ColumnName = "Ship Qty.";
                dt.Columns["Ship/Local"].ColumnName = "Shipment No.";
            }
            else if (rbSearchType.SelectedValue.Equals("2"))
            {
                dt.Columns.Remove("Reject Qty.");
                dt.Columns.Remove("Short Qty.");
                dt.Columns.Remove("Excess Qty.");
                dt.Columns.Remove("Ship/Local");
                dt.Columns["Ship./Purchase Qty."].ColumnName = "Purchase Qty.";
            }
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "TransferSummery");
                Response.Clear();
                Response.Buffer = true;
                Response.Charset = "";
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.AddHeader("content-disposition",
                    "attachment;filename=TotalItemsStock-(" +
                    DateTime.Now.ToString("dd/MM/yyyy") + ").xlsx");

                using (MemoryStream MyMemoryStream = new MemoryStream())
                {
                    wb.SaveAs(MyMemoryStream);
                    MyMemoryStream.WriteTo(Response.OutputStream);
                    Response.Flush();
                    Response.End();
                }
            }
        }
    }
    protected void btnPrintAllBranch_Click(object sender, EventArgs e)
    {
        DataTable dtBranch = (DataTable)ViewState["Branch"];
        Response.Clear();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment; filename='AllBranchStock-" + DateTime.Now.ToString("dd/MM/yyyy") + "'.pdf");
        Document document = new Document(PageSize.A4.Rotate(), 20f, 20f, 30f, 30f);
        PdfWriter writer = PdfWriter.GetInstance(document, Response.OutputStream);
        document.Open();

        PdfPCell cell;
        byte[] logo = GlBookManager.GetGlLogo(Session["book"].ToString());
        iTextSharp.text.Image gif = iTextSharp.text.Image.GetInstance(logo);
        gif.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
        gif.ScalePercent(8f);

        float[] titwidth = new float[2] { 10, 200 };
        PdfPTable dth = new PdfPTable(titwidth);
        dth.WidthPercentage = 100;

        cell = new PdfPCell(gif);
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Rowspan = 4;
        cell.BorderWidth = 0f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["org"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 15, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["add1"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.NORMAL)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["add2"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.NORMAL)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        string Heading = "";
        if (string.IsNullOrEmpty(ddlBranch.SelectedItem.Text))
        {
            Heading = "Total Items Stock On " + lblBranchName.Text;
        }
        else { Heading = "Total Items Stock On Branch :" + ddlBranch.SelectedItem.Text; }
        cell = new PdfPCell(new Phrase("All Branch Stock Summery & Detail", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
        cell.FixedHeight = 30f;
        dth.AddCell(cell);
        document.Add(dth);
        LineSeparator line = new LineSeparator(1, 100, null, Element.ALIGN_CENTER, -2);
        document.Add(line);

        float[] widthdtl = new float[7] { 10, 30, 20, 20, 20, 20, 20 };
        PdfPTable pdtdtl = new PdfPTable(widthdtl);
        pdtdtl.WidthPercentage = 100;
        pdtdtl.HeaderRows = 1;
        cell = new PdfPCell(FormatHeaderPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.FixedHeight = 15f;
        cell.Border = 0;
        cell.Colspan = 7;
        pdtdtl.AddCell(cell);

        foreach (DataRow row in dtBranch.Rows)
        {
            cell = new PdfPCell(new Phrase("Branch Name : " + row["BranchName"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 13, iTextSharp.text.Font.BOLD)));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.Colspan = 7;      
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            cell = new PdfPCell(FormatHeaderPhrase("Serial"));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            // cell.FixedHeight = 20f;
            //cell.PaddingTop = 12;        
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);
            cell = new PdfPCell(FormatHeaderPhrase("Items Name & Code"));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            //cell.PaddingTop = 12;
            // cell.FixedHeight = 20f;        
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            cell = new PdfPCell(FormatHeaderPhrase("Brand"));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            //cell.PaddingTop = 12;
            // cell.FixedHeight = 20f;       
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            cell = new PdfPCell(FormatHeaderPhrase("Shiftment No."));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            //cell.PaddingTop = 12;
            // cell.FixedHeight = 20f;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            cell = new PdfPCell(FormatHeaderPhrase("Catagory"));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            //cell.PaddingTop = 12;
            // cell.FixedHeight = 20f;       
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);
            
            cell = new PdfPCell(FormatHeaderPhrase("Unit Price"));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            //cell.PaddingTop = 12;        
            // cell.FixedHeight = 20f;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);
            cell = new PdfPCell(FormatHeaderPhrase("Closing Stock"));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            // cell.FixedHeight = 20f;        
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            int Serial = 1;
            decimal totCloseAmt = 0;
            DataTable dtdtl = StockMainAndBranch(row["ID"].ToString());
            foreach (DataRow dr in dtdtl.Rows)
            {

                cell = new PdfPCell(FormatPhrase(Serial.ToString()));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;                
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);
                Serial++;
                cell = new PdfPCell(FormatPhrase(dr["Items"].ToString()));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(dr["BrandName"].ToString()));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(dr["ShiftmentNO"].ToString()));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(dr["Catagory"].ToString()));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(dr["UnitPrice"].ToString()));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(dr["ClosingStock"].ToString()));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);
                totCloseAmt += Convert.ToDecimal(dr["ClosingStock"].ToString());
            }
            cell = new PdfPCell(FormatHeaderPhrase("Total"));
            cell.HorizontalAlignment = 2;
            cell.VerticalAlignment = 1;
            // cell.FixedHeight = 20f;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            cell.Colspan = 6;
            pdtdtl.AddCell(cell);
            cell = new PdfPCell(FormatHeaderPhrase(totCloseAmt.ToString("N3")));
            cell.HorizontalAlignment = 2;
            cell.VerticalAlignment = 1;
            // cell.FixedHeight = 20f;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);
        }
        cell = new PdfPCell(FormatHeaderPhrase(""));
        cell.HorizontalAlignment = 2;
        cell.VerticalAlignment = 1;
         cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Border = 0;
        cell.Colspan = 7;
        pdtdtl.AddCell(cell);
        document.Add(pdtdtl);

        float[] wth = new float[2] { 20, 15 };
        PdfPTable pdt = new PdfPTable(wth);
        pdt.WidthPercentage = 40;

        cell = new PdfPCell(FormatHeaderPhrase("Branch Name"));
        cell.HorizontalAlignment = 2;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdt.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Closing Stock"));
        cell.HorizontalAlignment = 2;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdt.AddCell(cell);

        DataTable dt = null;
        decimal totStk = 0;
        dt = IdManager.GetShowDataTable("select SUM(t1.Quantity) AS Qty,(select t.BranchName from BranchInfo t where t.Flag=1) AS BranchName from dbo.ItemSalesStock t1");
        if (dt.Rows.Count > 0)
        {
            cell = new PdfPCell(FormatPhrase(dt.Rows[0]["BranchName"].ToString()));
            cell.HorizontalAlignment = 2;
            cell.VerticalAlignment = 1;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdt.AddCell(cell);
            cell = new PdfPCell(FormatHeaderPhrase(dt.Rows[0]["Qty"].ToString()));
            cell.HorizontalAlignment = 2;
            cell.VerticalAlignment = 1;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdt.AddCell(cell);
            totStk += Convert.ToDecimal(dt.Rows[0]["Qty"].ToString());
        }
        dt = IdManager.GetShowDataTable("select t2.BranchName,SUM(t1.Quantity) AS Qty from ItemSalesStockBranchWise t1 inner join BranchInfo t2 on t2.ID=t1.BranchID group by t1.BranchID,t2.BranchName");
        foreach (DataRow drr in dt.Rows)
        {
            cell = new PdfPCell(FormatPhrase(drr["BranchName"].ToString()));
            cell.HorizontalAlignment = 2;
            cell.VerticalAlignment = 1;
            cell.BorderColor = BaseColor.LIGHT_GRAY;                    
            pdt.AddCell(cell);
            cell = new PdfPCell(FormatHeaderPhrase(drr["Qty"].ToString()));
            cell.HorizontalAlignment = 2;
            cell.VerticalAlignment = 1;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdt.AddCell(cell);
            totStk += Convert.ToDecimal(drr["Qty"].ToString());
        }
        cell = new PdfPCell(FormatHeaderPhrase("Total"));
        cell.HorizontalAlignment = 2;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdt.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase(totStk.ToString("N0")));
        cell.HorizontalAlignment = 2;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdt.AddCell(cell);       
        
        document.Add(pdt);
        document.Close();
        Response.Flush();
        Response.End();

    }
   
    private static Phrase FormatPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9));
    }

    private static Phrase FormatHeaderPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD));
    }
    protected void btnClear_Click(object sender, EventArgs e)
    {
        var pageName = System.IO.Path.GetFileName(Request.Url.ToString());
        Response.Redirect(pageName);
    }
    protected void ddlBranch_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (string.IsNullOrEmpty(ddlBranch.SelectedItem.Text))
        {
            RefreshAll("", "");
        }
        else
        {
            DataTable dtBranchStock = _aClsItemDetailsManager.GetShowAvailableStockBranch(rbSearchType.SelectedValue,
                hfShipmentID.Value.ToString(), ddlCatagory.SelectedValue, ddlSubCatagory.SelectedValue, txtName.Text,
                ddlBranch.SelectedValue, hfSupplierID.Value);
            dgItems.DataSource = dtBranchStock;
            dgItems.DataBind();
            dgItems.Caption = "<h1> Total Items : " + dtBranchStock.Rows.Count + "</h1>";
        }
    }
    private void PrintSingleBranchStockLocalReport()
    {
        Response.Clear();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment; filename='Stock-Items'.pdf");
        Document document = new Document(PageSize.A4, 20f, 20f, 20f, 20f);
        PdfWriter writer = PdfWriter.GetInstance(document, Response.OutputStream);
        document.Open();

        PdfPCell cell;
        byte[] logo = GlBookManager.GetGlLogo(Session["book"].ToString());
        iTextSharp.text.Image gif = iTextSharp.text.Image.GetInstance(logo);
        gif.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
        gif.ScalePercent(8f);

        float[] titwidth = new float[2] { 10, 200 };
        PdfPTable dth = new PdfPTable(titwidth);
        dth.WidthPercentage = 100;

        cell = new PdfPCell(gif);
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Rowspan = 4;
        cell.BorderWidth = 0f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["org"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["add1"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        // cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["add2"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        // cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        string Heading = "";
        if (string.IsNullOrEmpty(ddlBranch.SelectedItem.Text))
        {
            Heading = "Total Items Stock On " + lblBranchName.Text;
        }
        else { Heading = "Total Items Stock On Branch :" + ddlBranch.SelectedItem.Text; }
        cell = new PdfPCell(new Phrase(Heading, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        // cell.Colspan = 7;
        cell.BorderWidth = 0f;
        cell.FixedHeight = 30f;
        dth.AddCell(cell);
        document.Add(dth);
        LineSeparator line = new LineSeparator(1, 100, null, Element.ALIGN_CENTER, -2);
        document.Add(line);

        float[] widthdtl = new float[5] { 5, 30, 15, 30, 15 };
        PdfPTable pdtdtl = new PdfPTable(widthdtl);
        pdtdtl.WidthPercentage = 100;
        pdtdtl.HeaderRows = 2;

        cell = new PdfPCell(FormatHeaderPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.FixedHeight = 15f;
        cell.Border = 0;
        cell.Colspan = 5;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("SL."));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        // cell.FixedHeight = 20f;
        //cell.PaddingTop = 12;        
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Items Name & Code"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.PaddingTop = 12;
        // cell.FixedHeight = 20f;        
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Brand"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.PaddingTop = 12;
        // cell.FixedHeight = 20f;   
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Supplier Name"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.PaddingTop = 12;
        // cell.FixedHeight = 20f;  
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);
       

        cell = new PdfPCell(FormatHeaderPhrase("Cl. Stock"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        // cell.FixedHeight = 20f;        
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        int Serial = 1;
        decimal totCloseAmt = 0;
        DataTable dtdtl = (DataTable)ViewState["History"];
        foreach (DataRow dr in dtdtl.Rows)
        {
            cell = new PdfPCell(FormatPhrase(Serial.ToString()));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            // cell.FixedHeight = 20f;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);
            Serial++;
            cell = new PdfPCell(FormatPhrase(dr["Items"].ToString()));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            cell = new PdfPCell(FormatPhrase(dr["BrandName"].ToString()));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            cell = new PdfPCell(FormatPhrase(dr["SupplierName"].ToString()));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            if (string.IsNullOrEmpty(dr["ClosingStock"].ToString()))
            {
                cell = new PdfPCell(FormatPhrase("-"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
            }
            else
            {
                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["ClosingStock"]).ToString("N0")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
            }
            //cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["ClosingStock"]).ToString("N0")));
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);
            totCloseAmt += Convert.ToDecimal(dr["ClosingStock"].ToString());
        }
        cell = new PdfPCell(FormatHeaderPhrase("Total"));
        cell.HorizontalAlignment = 2;
        cell.VerticalAlignment = 1;
        // cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Colspan = 4;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase(totCloseAmt.ToString("N0")));
        cell.HorizontalAlignment = 2;
        cell.VerticalAlignment = 1;
        // cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        document.Add(pdtdtl);
        document.Close();
        Response.Flush();
        Response.End();
    }
    private void PrintSingleBranchStockReport()
    {
        Response.Clear();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment; filename='Stock-Items'.pdf");
        Document document = new Document(PageSize.A4.Rotate(), 20f, 20f, 20f, 20f);
        PdfWriter writer = PdfWriter.GetInstance(document, Response.OutputStream);
        document.Open();

        PdfPCell cell;
        byte[] logo = GlBookManager.GetGlLogo(Session["book"].ToString());
        iTextSharp.text.Image gif = iTextSharp.text.Image.GetInstance(logo);
        gif.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
        gif.ScalePercent(8f);

        float[] titwidth = new float[2] { 10, 200 };
        PdfPTable dth = new PdfPTable(titwidth);
        dth.WidthPercentage = 100;

        cell = new PdfPCell(gif);
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Rowspan = 4;
        cell.BorderWidth = 0f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["org"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["add1"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
       // cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["add2"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
       // cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        string Heading = "";
        if (string.IsNullOrEmpty(ddlBranch.SelectedItem.Text))
        {
            Heading = "Total Items Stock On " + lblBranchName.Text;
        }
        else { Heading = "Total Items Stock On Branch :" + ddlBranch.SelectedItem.Text; }
        cell = new PdfPCell(new Phrase(Heading, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
       // cell.Colspan = 7;
        cell.BorderWidth = 0f;
        cell.FixedHeight = 30f;
        dth.AddCell(cell);
        document.Add(dth);
        LineSeparator line = new LineSeparator(1, 100, null, Element.ALIGN_CENTER, -2);
        document.Add(line);

        float[] widthdtl = new float[12] {10, 30, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20};
        PdfPTable pdtdtl = new PdfPTable(widthdtl);
        pdtdtl.WidthPercentage = 100;
        pdtdtl.HeaderRows = 2;

        cell = new PdfPCell(FormatHeaderPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.FixedHeight = 15f;
        cell.Border = 0;
        cell.Colspan = 12;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Serial"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        // cell.FixedHeight = 20f;
        //cell.PaddingTop = 12;        
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Items Name & Code"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.PaddingTop = 12;
        // cell.FixedHeight = 20f;        
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Brand"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.PaddingTop = 12;
        // cell.FixedHeight = 20f;   
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Shipment No."));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.PaddingTop = 12;
        // cell.FixedHeight = 20f;  
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        //cell = new PdfPCell(FormatHeaderPhrase("Unit Price"));
        //cell.HorizontalAlignment = 1;
        //cell.VerticalAlignment = 1;
        ////cell.PaddingTop = 12;        
        //// cell.FixedHeight = 20f;
        //cell.BorderColor = BaseColor.LIGHT_GRAY;
        //pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Ship. Qty."));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.PaddingTop = 12;        
        // cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Reject Qty."));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.PaddingTop = 12;        
        // cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Short Qty."));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.PaddingTop = 12;        
        // cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Excess Qty."));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.PaddingTop = 12;        
        // cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Trans Qty."));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.PaddingTop = 12;        
        // cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Sold Qty."));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.PaddingTop = 12;        
        // cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Rtn. Qty"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.PaddingTop = 12;        
        // cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Cl. Stock"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        // cell.FixedHeight = 20f;        
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        int Serial = 1;
        decimal totCloseAmt = 0;
        DataTable dtdtl = (DataTable)ViewState["History"];
        foreach (DataRow dr in dtdtl.Rows)
        {
            cell = new PdfPCell(FormatPhrase(Serial.ToString()));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            // cell.FixedHeight = 20f;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);
            Serial++;
            cell = new PdfPCell(FormatPhrase(dr["Items"].ToString()));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            cell = new PdfPCell(FormatPhrase(dr["BrandName"].ToString()));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            cell = new PdfPCell(FormatPhrase(dr["ShiftmentNO"].ToString()));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            //if (string.IsNullOrEmpty(dr["UnitPrice"].ToString()))
            //{
            //    cell = new PdfPCell(FormatPhrase("-"));
            //    cell.HorizontalAlignment = 1;
            //    cell.VerticalAlignment = 1;
            //}
            //else
            //{
            //    cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["UnitPrice"]).ToString("N2")));
            //    cell.HorizontalAlignment = 2;
            //    cell.VerticalAlignment = 1;
            //} 
            //cell.BorderColor = BaseColor.LIGHT_GRAY;
            //pdtdtl.AddCell(cell);

            if (string.IsNullOrEmpty(dr["Ship_Qty"].ToString()))
            {
                cell = new PdfPCell(FormatPhrase("-"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
            }
            else
            {
                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["Ship_Qty"]).ToString("N0")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
            }
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            if (string.IsNullOrEmpty(dr["RejectQty"].ToString()))
            {
                cell = new PdfPCell(FormatPhrase("-"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
            }
            else
            {
                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["RejectQty"]).ToString("N0")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
            }
           // cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["RejectQty"]).ToString("N0")));
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            if (string.IsNullOrEmpty(dr["ShortQty"].ToString()))
            {
                cell = new PdfPCell(FormatPhrase("-"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
            }
            else
            {
                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["ShortQty"]).ToString("N0")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
            }
           // cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["ShortQty"]).ToString("N0")));
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            if (string.IsNullOrEmpty(dr["ExcessQty"].ToString()))
            {
                cell = new PdfPCell(FormatPhrase("-"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
            }
            else
            {
                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["ExcessQty"]).ToString("N0")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
            }
           // cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["ExcessQty"]).ToString("N0")));
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            if (string.IsNullOrEmpty(dr["transferQty"].ToString()))
            {
                cell = new PdfPCell(FormatPhrase("-"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
            }
            else
            {
                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["transferQty"]).ToString("N0")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
            }
           // cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["transferQty"]).ToString("N0")));
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            if (string.IsNullOrEmpty(dr["SalesQty"].ToString()))
            {
                cell = new PdfPCell(FormatPhrase("-"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
            }
            else
            {
                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["SalesQty"]).ToString("N0")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
            }
            //cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["SalesQty"]).ToString("N0")));
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            if (string.IsNullOrEmpty(dr["RtnQty"].ToString()))
            {
                cell = new PdfPCell(FormatPhrase("-"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
            }
            else
            {
                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["RtnQty"]).ToString("N0")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
            }
            //cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["SalesQty"]).ToString("N0")));
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);

            if (string.IsNullOrEmpty(dr["ClosingStock"].ToString()))
            {
                cell = new PdfPCell(FormatPhrase("-"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
            }
            else
            {
                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["ClosingStock"]).ToString("N0")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
            }
            //cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["ClosingStock"]).ToString("N0")));
            cell.BorderColor = BaseColor.LIGHT_GRAY;
            pdtdtl.AddCell(cell);
            totCloseAmt += Convert.ToDecimal(dr["ClosingStock"].ToString());
        }
        cell = new PdfPCell(FormatHeaderPhrase("Total"));
        cell.HorizontalAlignment = 2;
        cell.VerticalAlignment = 1;
        // cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Colspan = 11;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase(totCloseAmt.ToString("N0")));
        cell.HorizontalAlignment = 2;
        cell.VerticalAlignment = 1;
        // cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        document.Add(pdtdtl);
        document.Close();
        Response.Flush();
        Response.End();
    }
    protected void ddlCatagory_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            ddlSubCatagory.DataSource = SubMajorCategoryManager.GetSubMajorCategories(ddlCatagory.SelectedValue);
            ddlSubCatagory.DataTextField = "Name";
            ddlSubCatagory.DataValueField = "ID";
            ddlSubCatagory.DataBind();
            ddlSubCatagory.Items.Insert(0, "");
            UP2.Update();
        }
        catch (FormatException fex)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('" + fex.Message + "');", true);
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Database"))
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Database Maintain Error. Contact to the Software Provider..!!');", true);
            else
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('There is some problem to do the task. Try again properly.!!');", true);
        }
    }
    protected void txtName_TextChanged(object sender, EventArgs e)
    {
        hfItemsID.Value =
            IdManager.GetShowSingleValueInt("ID", "UPPER(ItemsName)", "View_SalesItems", txtName.Text.ToUpper())
                .ToString();
        UP3.Update();
    }
    protected void rbSearchType_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (rbSearchType.SelectedValue.Equals("2"))
        {
            txtSupplierName.Text = string.Empty;
            lblSearchSupplier.Visible =txtSupplierName.Visible= true;
            txtShiftmentNo.Visible = false;
        }
        else
        {
            txtSupplierName.Text = string.Empty;
            lblSearchSupplier.Visible = txtSupplierName.Visible = false;
            txtShiftmentNo.Visible = true;
        }
    }
    protected void txtSupplierName_TextChanged(object sender, EventArgs e)
    {
        DataTable dtSupplier = PurchaseVoucherManager.GetSupplierInfo(txtSupplierName.Text);
        if (dtSupplier.Rows.Count > 0)
        {
            hfSupplierID.Value = dtSupplier.Rows[0]["ID"].ToString();
        }
        else
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Not Found Supplier.!!');", true);
            txtSupplierName.Text = hfSupplierID.Value = "";
            txtSupplierName.Focus();
        }
    }
}