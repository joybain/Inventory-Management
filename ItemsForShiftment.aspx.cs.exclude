using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using Delve;
using System.Data.SqlClient;
using sales;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.pdf.draw;

public partial class ItemsForShiftment : System.Web.UI.Page
{
    private static Permis per;
    ShiftmentAssignManager _aShiftmentAssignManager = new ShiftmentAssignManager();

    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["user"] == null)
        {
            if (Session.SessionID != "" | Session.SessionID != null)
            {
                clsSession ses = clsSessionManager.getSession(Session.SessionID);
                if (ses != null)
                {
                    Session["user"] = ses.UserId;
                    Session["book"] = "AMB";
                    string connectionString = DataManager.OraConnString();
                    SqlDataReader dReader;
                    SqlConnection conn = new SqlConnection();
                    conn.ConnectionString = connectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText =
                        "Select user_grp,[description],UserType,case when UserType=1 then 'Bangladesh' else 'Philippine' end AS[LoginCountry] from utl_userinfo where upper(user_name)=upper('" +
                        Session["user"].ToString().ToUpper() + "') and status='A'";
                    conn.Open();
                    dReader = cmd.ExecuteReader();
                    string wnot = "", userType = "";
                    if (dReader.HasRows == true)
                    {
                        while (dReader.Read())
                        {
                            Session["userlevel"] = int.Parse(dReader["user_grp"].ToString());
                            //Session["dept"] = dReader["dept"].ToString();
                            wnot = "Welcome " + dReader["description"].ToString();
                            Session["LoginCountry"] = dReader["LoginCountry"].ToString();
                            userType = dReader["UserType"].ToString();
                        }

                        Session["wnote"] = wnot;
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandType = CommandType.Text;
                        //cmd.CommandText = "Select book_desc,company_address1,company_address2,separator_type from gl_set_of_books where book_name='" + Session["book"].ToString() + "' ";
                        if (Convert.ToInt32(userType) == 2)
                        {

                            Session["bookMAN"] = "MAN";
                        }
                        else
                        {
                            Session["bookMAN"] = Session["book"].ToString();
                        }

                        cmd.CommandText =
                            "Select book_desc,company_address1,company_address2,separator_type,ShotName from gl_set_of_books where book_name='" +
                            Session["bookMAN"] + "' ";

                        if (dReader.IsClosed == false)
                        {
                            dReader.Close();
                        }

                        dReader = cmd.ExecuteReader();
                        if (dReader.HasRows == true)
                        {
                            while (dReader.Read())
                            {
                                Session["septype"] = dReader["separator_type"].ToString();
                                Session["org"] = dReader["book_desc"].ToString();
                                Session["add1"] = dReader["company_address1"].ToString();
                                Session["add2"] = dReader["company_address2"].ToString();
                            }
                        }
                    }

                    dReader.Close();
                    conn.Close();
                }
            }
        }

        try
        {
            string pageName = DataManager.GetCurrentPageName();
            string modid = PermisManager.getModuleId(pageName);
            per = PermisManager.getUsrPermis(Session["user"].ToString().Trim().ToUpper(), modid);
            if (per != null && per.AllowView == "Y")
            {
                ((Label) Page.Master.FindControl("lblLogin")).Text = Session["wnote"].ToString();
                ((Label) Page.Master.FindControl("lblCountryName")).Text = Session["LoginCountry"].ToString();
                ((LinkButton) Page.Master.FindControl("lbLogout")).Visible = true;
            }
            else
            {
                Response.Redirect("Home.aspx?sid=sam");
            }
        }
        catch
        {
            Response.Redirect("Default.aspx?sid=sam");
        }

        if (!IsPostBack)
        {
            DataTable dt = IdManager.GetShowDataTable("SELECT '' CHK,[ID],[ColorName] FROM [ColorInfo]");
            chkColor.DataSource = dt;
            chkColor.DataTextField = "ColorName";
            chkColor.DataValueField = "ID";
            chkColor.DataBind();
            DataTable dt1 = IdManager.GetShowDataTable("SELECT '' CHK,[ID],[SizeName] FROM [SizeInfo]");
            chkSize.DataSource = dt1;
            chkSize.DataTextField = "SizeName";
            chkSize.DataValueField = "ID";
            chkSize.DataBind();
            getColor();
            getSize();
            IdManager.getInsertUpdateDelete("DELETE FROM [TemporaryImage]");
            Session["ID"] = Session["Img"] = null;
            DataTable dtt = ShiftmentItemsManager.GetShowShiftmentItemsDetails("");
            dgHistory.DataSource = dtt;
            ViewState["dgHistory"] = dtt;
            dgHistory.DataBind();
            //  tbImage.Visible = false;
            tbColorSize.Visible = dgQty.Visible = lblSq.Visible =btnChangeQty.Visible= false;
            txtQuantity.Enabled = true;
            tdHistory.Visible = btnSave.Enabled = btnDelete.Enabled = true;
            btnProductImage.OnClientClick =
                "javascript:OpenWindow('frmImage.aspx?ID=" + "" + "&RefNo=" + "11" + "');return false;";
            txtID.Text = "";
            ViewState["OldQt"] = "";
            txtShiftmentNo.Focus();
            btnChangeRate.Visible = false;

        }
    }

    private void getColor()
    {
        DataTable dt = new DataTable();
        dt.Columns.Add("ID", typeof(string));
        dt.Columns.Add("ColorName", typeof(string));
        //DataRow dr = dt.NewRow();
        //dt.Rows.Add(dr);
        ViewState["ColorInfo"] = dt;
    }

    private void getSize()
    {
        DataTable dt = new DataTable();
        dt.Columns.Add("ID", typeof(string));
        dt.Columns.Add("SizeName", typeof(string));
        ViewState["SizeInfo"] = dt;
    }

    private void getQty()
    {

        DataTable dt = new DataTable();
        DataTable dtSz = (DataTable) ViewState["SizeInfo"];
        dt.Columns.Add("ColorID", typeof(string));
        dt.Columns.Add("ColorName", typeof(string));
        foreach (DataRow dr in dtSz.Rows)
        {
            dt.Columns.Add(dr["SizeName"].ToString(), typeof(string));
        }

        int countSZ = dtSz.Rows.Count;
        DataTable dtCL = (DataTable) ViewState["ColorInfo"];
        foreach (DataRow dr in dtCL.Rows)
        {
            DataRow dr1 = dt.NewRow();
            dr1["ColorID"] = dr["ID"].ToString();
            dr1["ColorName"] = dr["ColorName"].ToString();
            dt.Rows.Add(dr1);
        }

        ViewState["Qty"] = dt;
        foreach (DataRow dr in dtSz.Rows)
        {
            string coln = dr["SizeName"].ToString();
            TemplateField tf3 = new TemplateField();
            tf3.HeaderTemplate = new GridViewTemplate(DataControlRowType.Header, coln, new Label(), "");
            tf3.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            tf3.ItemStyle.HorizontalAlign = HorizontalAlign.Center;
            tf3.ItemStyle.Width = 90;
            dgQty.Columns.Add(tf3);
        }

        dgQty.DataSource = dt;
        dgQty.DataBind();
    }

    protected void dgQty_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow | e.Row.RowType == DataControlRowType.Header |
                e.Row.RowType == DataControlRowType.Footer)
            {
                e.Row.Cells[0].Attributes.Add("style", "display:none");
            }

            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                DataTable dtSz = (DataTable) ViewState["SizeInfo"];
                int a = 2;
                foreach (DataRow dr in dtSz.Rows)
                {
                    string txtSize = dr["SizeName"].ToString();
                    TextBox tb = (TextBox) (e.Row.Cells[a].FindControl(txtSize));
                    tb.Text = (e.Row.DataItem as DataRowView).Row[txtSize].ToString();
                    a++;
                }
            }
        }
        catch (FormatException fex)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('" + fex.Message + "');", true);
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Database"))
                ClientScript.RegisterStartupScript(this.GetType(), "Warning",
                    "alert('Database Maintain Error. Contact to the Software Provider..!!');", true);
            else
                ClientScript.RegisterStartupScript(this.GetType(), "Warning",
                    "alert('There is some problem to do the task. Try again properly.!!');", true);
        }
    }

    protected void txtShiftmentNo_TextChanged(object sender, EventArgs e)
    {
        DataTable dt = ShiftmentAssignManager.GetShowShiftmentAssignOnSearch(txtShiftmentNo.Text);
        if (dt.Rows.Count > 0)
        {
            txtShiftmentNo.Text = dt.Rows[0]["ShiftmentNO"].ToString();
            txtShiftmentDate.Text = dt.Rows[0]["ShiftmentDate"].ToString();
            lblShiftmentID.Text = dt.Rows[0]["ID"].ToString();

            DataTable dtShipSenderInfo =
                _aShiftmentAssignManager.GetShipmentSenderInfo(lblShiftmentID.Text, "", "", "2");
            if (dtShipSenderInfo.Rows.Count > 0)
            {
                ddlSenderName.DataSource = dtShipSenderInfo;
                ddlSenderName.DataTextField = "Search";
                ddlSenderName.DataValueField = "SenderID";
                ddlSenderName.DataBind();
                ddlSenderName.Items.Insert(0, "");
            }

            ddlCustomer.Items.Clear();
            ddlCustomer.SelectedIndex = -1;
            txtItemsName.Text = txtSupplierName.Text = lbISupID.Text = lbIGlCOA.Text =
                txtQuantity.Text = txtLabel.Text = txtPartyRate.Text = txtRemarks.Text = string.Empty;
            txtItemsName.Focus();
            UP1.Update();
        }
        else
        {
            txtShiftmentNo.Text = "";
            txtShiftmentNo.Focus();
        }
    }

    protected void txtPartyName_TextChanged(object sender, EventArgs e)
    {
        DataTable dt = PartyInfoManager.GetParty(txtPartyName.Text);
        if (dt.Rows.Count > 0)
        {
            lblPartyID.Text = dt.Rows[0]["ID"].ToString();
            txtPartyName.Text = dt.Rows[0]["PartyName"].ToString();
            Session["ID"] = lblPartyID.Text;
            txtItemsName.Enabled = true;
            txtItemsName.Focus();
            UP1.Update();
        }
        else
        {
            txtItemsName.Enabled = true;
            txtPartyName.Focus();
            UP1.Update();
        }
    }

    protected void txtSupplierName_TextChanged(object sender, EventArgs e)
    {
        DataTable dt = SupplierManager.GetShowSupplierOnPayment(txtSupplierName.Text, "", "S");
        if (dt.Rows.Count > 0)
        {
            lbISupID.Text = dt.Rows[0]["SupplierID"].ToString();
            txtSupplierName.Text = dt.Rows[0]["ContactName"].ToString();
            lbIGlCOA.Text = dt.Rows[0]["Gl_CoaCode"].ToString();
            double ShipmentRate = IdManager.GetShowSingleValueCurrency("UnitPrice",
                "ItemPurchaseMstID=" + dt.Rows[0]["ID"].ToString() + " AND ItemID", "ItemPurchaseDtl", lblItemsId.Text);
            txtPartyRate.Text = ShipmentRate.ToString("N2");
            txtQuantity.Focus();
            UP1.Update();
        }
        else
        {
            txtSupplierName.Text = "";
            lbISupID.Text = "";
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('No Supplier Found..!!');", true);
            txtSupplierName.Focus();
        }
    }

    protected void txtItemsName_TextChanged(object sender, EventArgs e)
    {
        //************ Show Items & Party Wise Stock Quantity *******************//
        DataTable dtItems = ClsItemDetailsManager.GetShowItemsInfoSearch(txtItemsName.Text, "");
        if (dtItems.Rows.Count > 0)
        {
            lblItemsId.Text = dtItems.Rows[0]["ID"].ToString();
            txtItemsName.Text = dtItems.Rows[0]["Name"].ToString();
            txtLabel.Text = dtItems.Rows[0]["BrandName"].ToString();
            int? totQty = (int?) dtItems.Rows[0]["ClosingStock"];
            int? UsedQty = string.IsNullOrEmpty(txtQuantity.Text) ? 0 : Convert.ToInt32(txtQuantity.Text);
            ViewState["Qt"] = totQty;
            lblSq.Text = "S.Q : ( " + (UsedQty + totQty).ToString() + " )";
            if (totQty > 0)
            {
                txtQuantity.Enabled = true;
            }
            else
            {
                txtQuantity.Enabled = false;
            }

            lblSq.Visible = true;
            txtSupplierName.Focus();
            UP1.Update();
        }
        else
        {
            txtItemsName.Text = "";
            txtItemsName.Focus();
        }
    }

    //*************************  btnSave_Click & Update ************************ //
    protected void btnSave_Click(object sender, EventArgs e)
    {
        int checkItemDuplicate = IdManager.GetShowSingleValueInt("COUNT(*)",
            " [ShiftmentBoxingItemsDtl] where [ItemsID]='" + txtID.Text + "'");
        if (checkItemDuplicate > 0)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale",
                "alert('This Item already Assign in this shipment carton .\\n you can not update this if you want to change please contract your administrator..!!');",
                true);
            return;
        }

        if (txtShiftmentNo.Text == "")
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Shiftment NO. ...!!');", true);
            return;
        }

        //if (txtPartyName.Text == "")
        //{
        //    ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Party Name ...!!');", true);
        //    return;
        //}
        if (txtItemsName.Text == "")
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Items Namne ...!!');", true);
            return;
        }

        if (txtQuantity.Text == "")
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Quantity ...!!');", true);
            return;
        }

        if (string.IsNullOrEmpty(lbISupID.Text))
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Supplier....!!');", true);
            return;
        }

        if (txtPartyRate.Text == "")
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Party Rate....!!');", true);
            return;
        }

        if (string.IsNullOrEmpty(ddlSenderName.SelectedItem.Text))
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Select Sender Name..!!');", true);
            return;
        }

        if (string.IsNullOrEmpty(ddlCustomer.SelectedItem.Text))
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Select Customer..!!');", true);
            return;
        }

        if (txtID.Text.Trim() == "")
        {
            //int checkDuplicate = IdManager.GetShowSingleValueInt("COUNT(*)",
            //    " [ShiftmentItems] where [ItemsID]='" + lblItemsId.Text + "' and convert(decimal,[PartyRate])=" +
            //    Convert.ToDecimal(txtPartyRate.Text) + " and ShiftmentID='" + lblShiftmentID.Text + "' and SenderID='" +
            //    ddlSenderName.SelectedValue + "' ");
            //if (checkDuplicate > 0)
            //{
            //    ClientScript.RegisterStartupScript(this.GetType(), "ale",
            //         "alert('This Item already Assign in this shipment same rate .\\n you can update this items please change this items rate..!!');",
            //         true);
            //    return;
            //}
            ShiftmentItems aShiftmentItems = new ShiftmentItems();
            aShiftmentItems.ID = txtID.Text;
            aShiftmentItems.ShiftmentNO = lblShiftmentID.Text;
            aShiftmentItems.PartyID = "1";
            aShiftmentItems.SupplierID = lbISupID.Text;
            aShiftmentItems.ItemsID = lblItemsId.Text;
            aShiftmentItems.Quantity = txtQuantity.Text;
            aShiftmentItems.PartyRate = txtPartyRate.Text;
            aShiftmentItems.Label = txtLabel.Text;
            aShiftmentItems.Remarks = txtRemarks.Text;

            aShiftmentItems.SenderID = ddlSenderName.SelectedValue;
            aShiftmentItems.CustomerID = ddlCustomer.SelectedValue;

            aShiftmentItems.LoginBy = Session["user"].ToString().Trim();
            ShiftmentItemsManager.SaveItemShiftmentInfo(aShiftmentItems);
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Record are saved sucessfully...!!');",
                true);
            txtItemsName.Text = txtSupplierName.Text = lbISupID.Text = lbIGlCOA.Text =
                txtQuantity.Text = txtLabel.Text = txtPartyRate.Text = txtRemarks.Text = string.Empty;
            DataTable dtt = ShiftmentItemsManager.GetShowShiftmentItemsDetails("");
            dgHistory.DataSource = dtt;
            ViewState["dgHistory"] = dtt;
            dgHistory.DataBind();
            txtItemsName.Focus();

        }
        else
        {
            //int checkDuplicate = IdManager.GetShowSingleValueInt("COUNT(*)",
            //    " [ShiftmentItems] where [ItemsID]='" + lblItemsId.Text + "' and convert(decimal,[PartyRate])=" +
            //    Convert.ToDecimal(txtPartyRate.Text) + " and ShiftmentID='" + lblShiftmentID.Text + "'  and SenderID='" +
            //    ddlSenderName.SelectedValue + "' and ID!=" +
            //    txtID.Text + " ");
            //if (checkDuplicate > 0)
            //{
            //    ClientScript.RegisterStartupScript(this.GetType(), "ale",
            //        "alert('This Item already Assign in this shipment same rate .\\n you can update this items please change this items rate..!!');",
            //        true);
            //    return;
            //}
            ShiftmentItems aShiftmentItems = new ShiftmentItems();
            aShiftmentItems.ID = txtID.Text;
            aShiftmentItems.ShiftmentNO = lblShiftmentID.Text;
            aShiftmentItems.PartyID = "1";
            aShiftmentItems.SupplierID = lbISupID.Text;
            aShiftmentItems.ItemsID = lblItemsId.Text;
            aShiftmentItems.Quantity = txtQuantity.Text;
            aShiftmentItems.PartyRate = txtPartyRate.Text;
            aShiftmentItems.Label = txtLabel.Text;
            aShiftmentItems.Remarks = txtRemarks.Text;

            aShiftmentItems.SenderID = ddlSenderName.SelectedValue;
            aShiftmentItems.CustomerID = ddlCustomer.SelectedValue;

            aShiftmentItems.LoginBy = Session["user"].ToString().Trim();
            ShiftmentItemsManager.UpdateItemShiftmentInfo(aShiftmentItems);
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Record are update successfully...!!');",
                true);
            btnSave.Enabled = false;
        }

    }

    //*************************  btnDelete_Click ************************ //
    protected void btnDelete_Click(object sender, EventArgs e)
    {
        if (txtShiftmentNo.Text == "")
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Shiftment NO. ...!!');", true);
            return;
        }

        if (txtPartyName.Text == "")
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Party Name ...!!');", true);
            return;
        }

        if (txtItemsName.Text == "")
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Items Namne ...!!');", true);
            return;
        }

        if (txtQuantity.Text == "")
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Quantity ...!!');", true);
            return;
        }

        int count = IdManager.GetShowSingleValueInt("COUNT(*)", "ShiftmentID", "ShiftmentBoxingMst",
            lblShiftmentID.Text.Trim());
        if (count > 0)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale",
                "alert('This shiftment alrady used Cartoon.You never delete this shiftment....!!');", true);
            return;
        }

        ShiftmentItems aShiftmentItems = new ShiftmentItems();
        aShiftmentItems.ID = txtID.Text;
        ShiftmentItemsManager.GetDeleteShiftmentInformation(aShiftmentItems);
        ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Record are Delete sucessfully...!!');", true);
        btnDelete.Enabled = false;
        btnSave.Enabled = false;
    }

    protected void dgHistory_SelectedIndexChanged(object sender, EventArgs e)
    {

        ViewState["OldQt"] = "";
        txtID.Text = dgHistory.SelectedRow.Cells[1].Text;
        DataTable dtMst = ShiftmentItemsManager.GetShowItemsInfo(txtID.Text.Trim());
        if (dtMst.Rows.Count > 0)
        {
            txtItemsName.Text = dtMst.Rows[0]["Name"].ToString();
            lblItemsId.Text = dtMst.Rows[0]["ItemsID"].ToString();
            txtShiftmentNo.Text = dtMst.Rows[0]["ShiftmentNO"].ToString();
            lblShiftmentID.Text = dtMst.Rows[0]["ShiftmentID"].ToString();

            DataTable dtShipSenderInfo =
                _aShiftmentAssignManager.GetShipmentSenderInfo(lblShiftmentID.Text, "", "", "2");
            if (dtShipSenderInfo.Rows.Count > 0)
            {
                ddlSenderName.DataSource = dtShipSenderInfo;
                ddlSenderName.DataTextField = "Search";
                ddlSenderName.DataValueField = "SenderID";
                ddlSenderName.DataBind();
                ddlSenderName.Items.Insert(0, "");
            }


            txtShiftmentDate.Text = dtMst.Rows[0]["ShiftmentDate"].ToString();
            txtPartyName.Text = dtMst.Rows[0]["PartyName"].ToString();
            lblPartyID.Text = dtMst.Rows[0]["PartyID"].ToString();
            txtSupplierName.Text = dtMst.Rows[0]["SupplierName"].ToString();
            lbISupID.Text = dtMst.Rows[0]["SupplierID"].ToString();
            txtQuantity.Text = dtMst.Rows[0]["Quantity"].ToString();
            //******** Closing Stock ************//
            DataTable dtItems = ClsItemDetailsManager.GetShowItemsInfoSearch("", lblItemsId.Text);
            if (dtItems.Rows.Count > 0)
            {
                //lblItemsId.Text = dtItems.Rows[0]["ID"].ToString();
                //txtItemsName.Text = dtItems.Rows[0]["Name"].ToString();
                //txtLabel.Text = dtItems.Rows[0]["BrandName"].ToString();
                int? totQty = (int?) dtItems.Rows[0]["ClosingStock"];
                int? UsedQty = string.IsNullOrEmpty(txtQuantity.Text) ? 0 : Convert.ToInt32(txtQuantity.Text);
                ViewState["Qt"] = totQty;
                lblSq.Text = "S.Q : ( " + (UsedQty + totQty).ToString() + " )";
                if (totQty > 0)
                {
                    txtQuantity.Enabled = true;
                }
                else
                {
                    txtQuantity.Enabled = false;
                }

                lblSq.Visible = true;
            }

            ViewState["OldQt"] = dtMst.Rows[0]["Quantity"].ToString();
            txtLabel.Text = dtMst.Rows[0]["Label"].ToString();
            txtPartyRate.Text = dtMst.Rows[0]["PartyRate"].ToString();
            txtRemarks.Text = dtMst.Rows[0]["Remarks"].ToString();
            //double totQty = IdManager.GetShowSingleValueCurrency("Quantity", "ItemsID='" + lblItemsId.Text + "' and  PartyID", "ItemPartyStock", lblPartyID.Text);
            //ViewState["Qt"] = totQty + Convert.ToDouble(dtMst.Rows[0]["Quantity"]);
            //lblSq.Text = "S.Q : ( " + ViewState["Qt"].ToString() + " )";
            //if (totQty > 0)
            //{ txtQuantity.Enabled = true; }
            //else 
            //{ txtQuantity.Enabled = false; }
            lblSq.Visible = true;
            try
            {
                if (Session["user"].ToString().Equals("mohsin") || Session["user"].ToString().Equals("sam"))
                {
                    btnChangeRate.Visible = btnChangeQty.Visible = txtQuantity.Enabled =  true;
                }
            }
            catch
            {
                btnChangeRate.Visible = btnChangeQty.Visible = txtQuantity.Enabled = false;
            }

            try
            {
                ddlSenderName.SelectedValue = dtMst.Rows[0]["SenderID"].ToString();
                DataTable dtShipSenderInfo1 =
                    _aShiftmentAssignManager.GetShipmentSenderInfo(lblShiftmentID.Text, "", ddlSenderName.SelectedValue,
                        "3");
                if (dtShipSenderInfo1 != null)
                {
                    if (dtShipSenderInfo1.Rows.Count > 0)
                    {
                        ddlCustomer.DataSource = dtShipSenderInfo1;
                        ddlCustomer.DataTextField = "Search";
                        ddlCustomer.DataValueField = "ID";
                        ddlCustomer.DataBind();
                        ddlCustomer.Items.Insert(0, "");
                    }
                }
            }
            catch
            {
                ddlSenderName.SelectedValue = null;

            }

            try
            {
                ddlCustomer.SelectedValue = dtMst.Rows[0]["CustomerID"].ToString();
            }
            catch
            {
                ddlCustomer.SelectedValue = null;
            }

            UP1.Update();
        }
    }

    //*******************  txtQuantity_TextChanged ** Check Stock Quantity **************
    protected void txtQuantity_TextChanged(object sender, EventArgs e)
    {
        double Qty =
            IdManager.GetShowSingleValueCurrency("isnull([Quantity],0)",
                "ShiftmentItems where ID='" + txtID.Text + "'");
        if (Convert.ToDouble(txtQuantity.Text) > Convert.ToDouble(ViewState["Qt"]) + Qty)
        {
            ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert",
                "alert('Quantity is over this Stock Quantity ...!!');", true);
            if (ViewState["OldQt"] != "")
            {
                txtQuantity.Text = ViewState["OldQt"].ToString();
            }
            else
            {
                txtQuantity.Text = "0";
            }

            txtQuantity.Focus();
            return;
        }
        else
        {
            txtRemarks.Focus();
        }
    }

    private void BindGridData()
    {
        SqlConnection connection = new SqlConnection(DataManager.OraConnString());
        SqlCommand command =
            new SqlCommand(
                "SELECT '' AS imagename,[ID] AS ImageID, [Image] AS Image from [ShiftmentItemsImage] where [MasterID] ='" +
                txtID.Text + "'", connection);
        SqlDataAdapter daimages = new SqlDataAdapter(command);
        DataTable dt = new DataTable();
        daimages.Fill(dt);
        Session["Img"] = dt;
    }

    protected void dgQty_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {

    }

    //********************** Color & Size Setting **************************//
    protected void btnColorSize_Click(object sender, EventArgs e)
    {
        foreach (System.Web.UI.WebControls.ListItem item in chkColor.Items)
        {
            if (item.Selected)
            {
                if (item.Selected)
                {
                    string Name = "";
                    DataTable dt = (DataTable) ViewState["ColorInfo"];
                    Name = IdManager.GetShowSingleValueString("ColorName", "ID", "ColorInfo", item.Value);
                    dt.Rows.Add(item.Value, Name);
                    ViewState["ColorInfo"] = dt;
                }
            }
        }

        DataTable dtt = new DataTable();
        foreach (System.Web.UI.WebControls.ListItem item in chkSize.Items)
        {
            if (item.Selected)
            {
                if (item.Selected)
                {
                    DataTable dt = (DataTable) ViewState["SizeInfo"];
                    string Name = IdManager.GetShowSingleValueString("SizeName", "ID", "SizeInfo", item.Value);
                    dt.Rows.Add(item.Value, Name);
                    ViewState["SizeInfo"] = dt;
                }
            }
        }

        ViewState["Qty"] = null;
        dgQty.DataSource = null;
        dgQty.DataBind();
        getQty();
        dgQty.Visible = true;
    }

    protected void dgQty_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {

            DataTable dtSz = (DataTable) ViewState["SizeInfo"];
            int a = 2;
            foreach (DataRow dr in dtSz.Rows)
            {
                TextBox txtBx = new TextBox();
                txtBx.ID = dr["SizeName"].ToString();
                txtBx.Visible = true;
                txtBx.EnableViewState = true;
                e.Row.Cells[a].Controls.Add(txtBx);
                a++;
            }
        }
    }

    protected void btnProductImage_Click(object sender, EventArgs e)
    {
        //tbImage.Visible = true;
    }

    protected void btnProductQuantity_Click(object sender, EventArgs e)
    {
        dgQty.Visible = true;
    }

    protected void btnColorSize_Click1(object sender, EventArgs e)
    {
        tbColorSize.Visible = true;
        dgHistory.Visible = false;
    }

    protected void btnFind_Click(object sender, EventArgs e)
    {
        DataTable dt = (DataTable) ViewState["dgHistory"];
        dgHistory.DataSource = dt;
        DataTable dt3 = ShiftmentItemsManager.GetShiftmetBySearch(txtShiftmentNo.Text, txtItemsName.Text);
        ViewState["dgHistory"] = dt3;
        dgHistory.DataSource = dt3;
        dgHistory.DataBind();
    }

    protected void btnClear_Click(object sender, EventArgs e)
    {
        var pageName = System.IO.Path.GetFileName(Request.Url.ToString());
        Response.Redirect(pageName);
    }

    protected void dgHistory_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        dgHistory.DataSource = ViewState["dgHistory"];
        dgHistory.PageIndex = e.NewPageIndex;
        dgHistory.DataBind();
    }

    protected void dgHistory_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow | e.Row.RowType == DataControlRowType.Header |
            e.Row.RowType == DataControlRowType.Footer)
        {
            e.Row.Cells[1].Attributes.Add("style", "display:none");
            e.Row.Cells[4].Attributes.Add("style", "display:none");
        }
    }

    protected void btnPrint_Click(object sender, EventArgs e)
    {
        getPurchaseOrder();
    }

    public void getPurchaseOrder()
    {
        string filename = "PO_" + txtShiftmentNo.Text;
        Response.Clear();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment; filename=" + filename + ".pdf");
        Document document = new Document(PageSize.A4, 50f, 50f, 40f, 40f);
        PdfWriter writer = PdfWriter.GetInstance(document, Response.OutputStream);
        document.Open();
        Rectangle page = document.PageSize;
        PdfPTable head = new PdfPTable(1);
        head.TotalWidth = page.Width - 50;
        Phrase phrase = new Phrase(DateTime.Now.ToString("dd/MM/yyyy"), new Font(Font.FontFamily.TIMES_ROMAN, 8));
        PdfPCell c = new PdfPCell(phrase);
        c.Border = Rectangle.NO_BORDER;
        c.VerticalAlignment = Element.ALIGN_BOTTOM;
        c.HorizontalAlignment = Element.ALIGN_RIGHT;
        head.AddCell(c);
        head.WriteSelectedRows(0, -1, 0, page.Height - document.TopMargin + head.TotalHeight + 20,
            writer.DirectContent);

        PdfPCell cell;
        byte[] logo = GlBookManager.GetGlLogo(Session["book"].ToString());
        iTextSharp.text.Image gif = iTextSharp.text.Image.GetInstance(logo);
        gif.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
        gif.ScalePercent(8f);

        float[] titwidth = new float[2] {10, 200};
        PdfPTable dth = new PdfPTable(titwidth);
        dth.WidthPercentage = 100;

        cell = new PdfPCell(gif);
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Rowspan = 4;
        cell.BorderWidth = 0f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["org"].ToString(),
            FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["add1"].ToString(),
            FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["add2"].ToString(),
            FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
        //cell.FixedHeight = 20f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase("Items Image",
            FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
        //cell.FixedHeight = 30f;
        dth.AddCell(cell);
        document.Add(dth);
        LineSeparator line = new LineSeparator(1, 100, null, Element.ALIGN_CENTER, -2);
        document.Add(line);

        PdfPTable dtempty = new PdfPTable(1);
        cell = new PdfPCell(FormatHeaderPhrase(""));
        cell.BorderWidth = 0f;
        cell.FixedHeight = 10f;
        dtempty.AddCell(cell);
        document.Add(dtempty);

        float[] MB = new float[1] {100};
        PdfPTable pdMB = new PdfPTable(MB);
        pdMB.WidthPercentage = 100;

        float[] widthdtl = new float[6] {20, 20, 20, 20, 20, 20};
        PdfPTable pdtdtl = new PdfPTable(widthdtl);
        pdtdtl.WidthPercentage = 100;

        DataTable dtMst = ShiftmentItemsManager.GetShowItemsInfo(txtID.Text.Trim());
        pdtdtl.WidthPercentage = 100;

        cell = new PdfPCell(FormatHeaderPhrase("Shiftment No :" + txtShiftmentNo.Text));
        cell.HorizontalAlignment = 0;
        cell.VerticalAlignment = 1;
        cell.Colspan = 3;
        //cell.FixedHeight = 20f;
        cell.BorderWidth = 0f;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Date :" + txtShiftmentDate.Text));
        cell.HorizontalAlignment = 0;
        cell.VerticalAlignment = 1;
        cell.Colspan = 3;
        // cell.FixedHeight = 20f;
        cell.BorderWidth = 0f;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase(""));
        cell.HorizontalAlignment = 0;
        cell.VerticalAlignment = 1;
        cell.Colspan = 6;
        cell.FixedHeight = 10f;
        cell.BorderWidth = 0f;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Party Name"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        //cell.BorderWidth = 0f;
        //cell.FixedHeight = 20f;
        cell.Colspan = 2;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Items Name"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        // cell.BorderWidth = 0f;
        //cell.FixedHeight = 20f;
        cell.Colspan = 2;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Label"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        // cell.BorderWidth = 0f;
        // cell.FixedHeight = 30f;
        cell.Colspan = 2;
        pdtdtl.AddCell(cell);
        if (dtMst.Rows.Count > 0)
        {
            cell = new PdfPCell(FormatFontPhrase(dtMst.Rows[0]["PartyName"].ToString()));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            //cell.BorderWidth = 0f;
            //cell.FixedHeight = 20f;
            cell.Colspan = 2;
            pdtdtl.AddCell(cell);
            cell = new PdfPCell(FormatFontPhrase(dtMst.Rows[0]["Name"].ToString()));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            //cell.BorderWidth = 0f;
            //cell.FixedHeight = 20f;
            cell.Colspan = 2;
            pdtdtl.AddCell(cell);
            cell = new PdfPCell(FormatFontPhrase(dtMst.Rows[0]["Label"].ToString()));
            cell.HorizontalAlignment = 0;
            cell.VerticalAlignment = 1;
            //cell.BorderWidth = 0f;
            cell.Colspan = 2;
            pdtdtl.AddCell(cell);
        }

        cell = new PdfPCell(FormatFontPhrase(""));
        cell.HorizontalAlignment = 0;
        cell.VerticalAlignment = 1;
        cell.BorderWidth = 0f;
        cell.FixedHeight = 8;
        cell.Colspan = 6;
        pdtdtl.AddCell(cell);
        DataTable dt = IdManager.GetShowDataTable(
            "SELECT '' AS imagename,[ID] AS ImageID, [Image] AS Image from [ShiftmentItemsImage] where [MasterID] ='" +
            txtID.Text + "'");
        PdfPTable pdtclient = new PdfPTable(dt.Rows.Count);
        pdtclient.WidthPercentage = 100;
        decimal tt = decimal.Zero;
        decimal tot = (6 / dt.Rows.Count);
        tt = 6 * Math.Ceiling(tot);
        for (int i = 0; i < tt; i++)
        {
            if (dt.Rows.Count - 1 < i)
            {
                cell = new PdfPCell(FormatHeaderPhrase(""));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                cell.BorderWidth = 0f;
                pdtdtl.AddCell(cell);
            }
            else
            {
                DataRow dr = dt.Rows[i];
                byte[] logo1 = (byte[]) dr["Image"];
                iTextSharp.text.Image gif1 = iTextSharp.text.Image.GetInstance(logo1);
                gif1.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
                gif1.ScalePercent(30f);
                cell = new PdfPCell(gif1);
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                cell.BorderWidth = 0f;
                pdtdtl.AddCell(cell);
            }
        }

        DataTable dt11 = ShiftmentItemsManager.GetShiftmentItemsQuantity(txtID.Text);
        float[] widthbi = new float[dt11.Columns.Count];
        for (int i = 0; i < dt11.Columns.Count; i++)
        {
            widthbi[i] = 100 / dt11.Columns.Count;
        }

        PdfPTable with1 = new PdfPTable(widthbi);
        with1.WidthPercentage = 100;
        for (int i = 0; i < dt11.Columns.Count; i++)
        {
            cell = new PdfPCell(FormatHeaderPhrase(dt11.Columns[i].ColumnName));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            with1.AddCell(cell);
        }

        for (int i = 0; i < dt11.Rows.Count; i++)
        {
            for (int j = 0; j < dt11.Columns.Count; j++)
            {
                cell = new PdfPCell(FormatFontPhrase(dt11.Rows[i][j].ToString()));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                with1.AddCell(cell);
            }
        }

        cell = new PdfPCell(pdtdtl);
        cell.BorderWidth = 1f;
        pdMB.AddCell(cell);

        cell = new PdfPCell(with1);
        cell.BorderWidth = 1f;
        pdMB.AddCell(cell);
        document.Add(pdMB);

        document.Close();
        Response.Flush();
        Response.End();
    }

    private static PdfPCell SignatureFormat(Document document, PdfPCell cell)
    {
        float[] widtl = new float[5] {20, 20, 20, 20, 20};
        PdfPTable pdtsig = new PdfPTable(widtl);
        pdtsig.WidthPercentage = 100;
        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.Colspan = 5;
        cell.FixedHeight = 40f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);


        cell = new PdfPCell(FormatPhrase("Prepared by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);

        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        cell = new PdfPCell(FormatPhrase("Checked by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);

        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        cell = new PdfPCell(FormatPhrase("Authorised by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        document.Add(pdtsig);
        return cell;
    }

    private static Phrase FormatPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9));
    }

    private static Phrase FormatHeaderPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD));
    }

    private static Phrase FormatFontPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.NORMAL));
    }

    protected void btnChangeRate_Click(object sender, EventArgs e)
    {
        ShiftmentItemsManager.UpdateChangerate(txtPartyRate.Text, Session["user"].ToString().Trim(), txtID.Text);
        ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert",
            "alert('Rate Change Sucessfully.!!');", true);
    }

    protected void ddlSenderName_SelectedIndexChanged(object sender, EventArgs e)
    {
        DataTable dtShipSenderInfo =
            _aShiftmentAssignManager.GetShipmentSenderInfo(lblShiftmentID.Text, "", ddlSenderName.SelectedValue, "3");
        if (dtShipSenderInfo != null)
        {
            if (dtShipSenderInfo.Rows.Count > 0)
            {
                ddlCustomer.DataSource = dtShipSenderInfo;
                ddlCustomer.DataTextField = "Search";
                ddlCustomer.DataValueField = "ID";
                ddlCustomer.DataBind();
                ddlCustomer.Items.Insert(0, "");
            }
        }
    }
    protected void btnChangeQty_Click(object sender, EventArgs e)
    {
        double CtnQty =
            IdManager.GetShowSingleValueCurrency("SUM(t2.Quantity)",
                "ShiftmentBoxingItemsDtl t2 where t2.ItemsID=" + txtID.Text);
        if (Convert.ToDouble(txtQuantity.Text) < CtnQty)
        {
            ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert",
                "alert('Change Qty are less then Carton Qty..!!');", true);
            return;
        }

        ShiftmentItemsManager.UpdateItemShiftmentInfoQty(txtID.Text, txtQuantity.Text);
        ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert",
            "alert('Qty Change successfully..!!');", true);
    }
}
     