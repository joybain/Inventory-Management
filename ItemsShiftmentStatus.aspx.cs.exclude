using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using Delve;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System.Drawing;

public partial class ItemsShiftmentStatus : System.Web.UI.Page
{
    private static Permis per;
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["user"] == null)
        {
            if (Session.SessionID != "" | Session.SessionID != null)
            {
                clsSession ses = clsSessionManager.getSession(Session.SessionID);
                if (ses != null)
                {
                    Session["user"] = ses.UserId;
                    Session["book"] = "AMB";
                    string connectionString = DataManager.OraConnString();
                    SqlDataReader dReader;
                    SqlConnection conn = new SqlConnection();
                    conn.ConnectionString = connectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText =
                        "Select user_grp,[description],UserType,case when UserType=1 then 'Bangladesh' else 'Philippine' end AS[LoginCountry] from utl_userinfo where upper(user_name)=upper('" +
                        Session["user"].ToString().ToUpper() + "') and status='A'";
                    conn.Open();
                    dReader = cmd.ExecuteReader();
                    string wnot = "", userType = "";
                    if (dReader.HasRows == true)
                    {
                        while (dReader.Read())
                        {
                            Session["userlevel"] = int.Parse(dReader["user_grp"].ToString());
                            //Session["dept"] = dReader["dept"].ToString();
                            wnot = "Welcome " + dReader["description"].ToString();
                            Session["LoginCountry"] = dReader["LoginCountry"].ToString();
                            userType = dReader["UserType"].ToString();
                        }
                        Session["wnote"] = wnot;
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandType = CommandType.Text;
                        //cmd.CommandText = "Select book_desc,company_address1,company_address2,separator_type from gl_set_of_books where book_name='" + Session["book"].ToString() + "' ";
                        if (Convert.ToInt32(userType) == 2)
                        {

                            Session["bookMAN"] = "MAN";
                        }
                        else
                        {
                            Session["bookMAN"] = Session["book"].ToString();
                        }
                        cmd.CommandText = "Select book_desc,company_address1,company_address2,separator_type,ShotName from gl_set_of_books where book_name='" + Session["bookMAN"] + "' ";

                        if (dReader.IsClosed == false)
                        {
                            dReader.Close();
                        }
                        dReader = cmd.ExecuteReader();
                        if (dReader.HasRows == true)
                        {
                            while (dReader.Read())
                            {
                                Session["septype"] = dReader["separator_type"].ToString();
                                Session["org"] = dReader["book_desc"].ToString();
                                Session["add1"] = dReader["company_address1"].ToString();
                                Session["add2"] = dReader["company_address2"].ToString();
                            }
                        }
                    }
                    dReader.Close();
                    conn.Close();
                }
            }
        }
        try
        {
            string pageName = DataManager.GetCurrentPageName();
            string modid = PermisManager.getModuleId(pageName);
            per = PermisManager.getUsrPermis(Session["user"].ToString().Trim().ToUpper(), modid);
            if (per != null && per.AllowView == "Y")
            {
                ((Label)Page.Master.FindControl("lblLogin")).Text = Session["wnote"].ToString();
                ((Label)Page.Master.FindControl("lblCountryName")).Text = Session["LoginCountry"].ToString();
                ((LinkButton)Page.Master.FindControl("lbLogout")).Visible = true;
            }
            else
            {
                Response.Redirect("Home.aspx?sid=sam");
            }
        }
        catch
        {
            Response.Redirect("Default.aspx?sid=sam");
        }        
        if (!IsPostBack)
        {
            txtCartoonNo.Text = txtShiftmentNo.Text = "";            
            DataTable dt = ShiftmentItemsCartoonManager.GetShowShiftmentItems(txtCartoonNo.Text, txtShiftmentNo.Text);
            dgShiftmentItems.DataSource = dt;
            ViewState["History"] = dt;
            dgShiftmentItems.DataBind();
            txtCartoonNo.Focus();
        }
    }
    protected void txtShiftmentNo_TextChanged(object sender, EventArgs e)
    {
        DataTable dtt = ShiftmentAssignManager.GetShowShiftmentAssignOnSearch(txtShiftmentNo.Text);
        if (dtt.Rows.Count > 0)
        {
            txtShiftmentNo.Text = dtt.Rows[0]["ShiftmentNO"].ToString();           
        }
        DataTable dt = ShiftmentItemsCartoonManager.GetShowShiftmentItems(txtCartoonNo.Text, txtShiftmentNo.Text);
        dgShiftmentItems.DataSource = dt;
        ViewState["History"] = dt;
        dgShiftmentItems.DataBind();
    }
    protected void BtnSearch_Click(object sender, EventArgs e)
    {
        DataTable dt = ShiftmentItemsCartoonManager.GetShowShiftmentItems(txtCartoonNo.Text, txtShiftmentNo.Text);
        dgShiftmentItems.DataSource = dt;
        ViewState["History"] = dt;
        dgShiftmentItems.DataBind();
    }
    protected void dgShiftmentItems_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        dgShiftmentItems.DataSource = ViewState["History"];
        dgShiftmentItems.PageIndex = e.NewPageIndex;
        dgShiftmentItems.DataBind();
    }
    protected void btnRefresh_Click(object sender, EventArgs e)
    {
        txtCartoonNo.Text = txtShiftmentNo.Text = "";        
        DataTable dt = ShiftmentItemsCartoonManager.GetShowShiftmentItems(txtCartoonNo.Text, txtShiftmentNo.Text);
        dgShiftmentItems.DataSource = dt;
        ViewState["History"] = dt;
        dgShiftmentItems.DataBind();
        txtCartoonNo.Focus();
    }
    protected void dgShiftmentItems_SelectedIndexChanged(object sender, EventArgs e)
    {
        getShiftmentQtyPrint();
    }

    private BarcodeLib.Barcode barcode = new BarcodeLib.Barcode();
    public void getShiftmentQtyPrint()
    {
        DataTable dtMst = ShiftmentItemsManager.GetShowItemsInfo(dgShiftmentItems.SelectedRow.Cells[1].Text.ToString(),"");
        if (dtMst.Rows.Count > 0)
        {
            string filename = "CartonNo(" + dgShiftmentItems.SelectedRow.Cells[3].Text.ToString()+")";
            Response.Clear();
            Response.ContentType = "application/pdf";
            Response.AddHeader("content-disposition", "attachment; filename=" + filename + ".pdf");
            Document document = new Document(PageSize.A4);
            PdfWriter writer = PdfWriter.GetInstance(document, Response.OutputStream);
            document.Open();
            iTextSharp.text.Rectangle page = document.PageSize;
            PdfPTable head = new PdfPTable(1);
            head.TotalWidth = page.Width - 50;

            barcode.Alignment = BarcodeLib.AlignmentPositions.CENTER;
            int W = 550;
            int H = 160;

            BarcodeLib.TYPE type = BarcodeLib.TYPE.CODE128;
            barcode.IncludeLabel = false;
            barcode.RotateFlipType = (RotateFlipType)Enum.Parse(typeof(RotateFlipType), "RotateNoneFlipNone", true);
            barcode.LabelPosition = BarcodeLib.LabelPositions.BOTTOMCENTER;

            System.Drawing.Image generatedBarcode = barcode.Encode(type, dgShiftmentItems.SelectedRow.Cells[1].Text.ToString(), Color.Black, Color.White, W, H);
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            generatedBarcode.Save(stream, System.Drawing.Imaging.ImageFormat.Png);

            byte[] logo2 = stream.ToArray();
            iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(logo2);
            gif2.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
            gif2.ScalePercent(20f);

            PdfPCell cell;
            byte[] logo = GlBookManager.GetGlLogo(Session["book"].ToString());
            iTextSharp.text.Image gif = iTextSharp.text.Image.GetInstance(logo);
            gif.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
            gif.ScalePercent(8f);

            float[] titwidth = new float[3] { 15, 40, 15 };
            PdfPTable dth = new PdfPTable(titwidth);
            dth.WidthPercentage = 100;

            cell = new PdfPCell(gif);
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.VerticalAlignment = Element.ALIGN_TOP;
            cell.HorizontalAlignment = Element.ALIGN_TOP;
            cell.Rowspan = 4;
            cell.BorderWidth = 0f;
            dth.AddCell(cell);

            cell = new PdfPCell(new Phrase(Session["org"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD)));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.BorderWidth = 0f;
            // cell.FixedHeight = 20f;
            dth.AddCell(cell);

            cell = new PdfPCell(gif2);
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.VerticalAlignment = Element.ALIGN_MIDDLE;
            cell.HorizontalAlignment = Element.ALIGN_MIDDLE;
            cell.Rowspan = 4;
            cell.BorderWidth = 0f;
            dth.AddCell(cell);

            cell = new PdfPCell(new Phrase(Session["add1"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.BorderWidth = 0f;
            // cell.FixedHeight = 20f;
            dth.AddCell(cell);
            cell = new PdfPCell(new Phrase(Session["add2"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.BorderWidth = 0f;
            //cell.FixedHeight = 20f;
            dth.AddCell(cell);
            cell = new PdfPCell(new Phrase("Items Image", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.BorderWidth = 0f;
            //cell.FixedHeight = 30f;
            dth.AddCell(cell);
            document.Add(dth);
            //LineSeparator line = new LineSeparator(1, 100, null, Element.ALIGN_CENTER, -2);
            //document.Add(line);

            PdfPTable dtempty = new PdfPTable(1);
            cell = new PdfPCell(FormatHeaderPhrase(""));
            cell.BorderWidth = 0f;
            cell.FixedHeight = 10f;
            dtempty.AddCell(cell);
            document.Add(dtempty);
            int serial = 0;
            foreach (DataRow drr in dtMst.Rows)
            {
                float[] MB = new float[1] { 100 };
                PdfPTable pdMB = new PdfPTable(MB);
                pdMB.WidthPercentage = 100;

                float[] widthdtl = new float[6] { 20, 20, 20, 20, 20, 20 };
                PdfPTable pdtdtl = new PdfPTable(widthdtl);
                pdtdtl.WidthPercentage = 100;

                if (serial == 0) { cell = new PdfPCell(FormatHeaderPhrase("CTN No : " + dtMst.Rows[0]["CartoonNo"].ToString())); }
                else { cell = new PdfPCell(FormatHeaderPhrase("")); }
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.Colspan = 2;
                cell.BorderWidth = 0f;
                pdtdtl.AddCell(cell);

                if (serial == 0) { cell = new PdfPCell(FormatHeaderPhrase("Shipment No. : " + dtMst.Rows[0]["ShiftmentNO"].ToString())); }
                else { cell = new PdfPCell(FormatHeaderPhrase("")); }
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.Colspan = 2;
                cell.BorderWidth = 0f;
                pdtdtl.AddCell(cell);

                if (serial == 0) { cell = new PdfPCell(FormatHeaderPhrase("Date : " + dtMst.Rows[0]["ShiftmentDate"].ToString())); }
                else { cell = new PdfPCell(FormatHeaderPhrase("")); }
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.Colspan = 2;
                cell.BorderWidth = 0f;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatHeaderPhrase(""));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.Colspan = 6;
                cell.FixedHeight = 8f;
                cell.BorderWidth = 0f;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatHeaderPhrase("Party Name"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                //cell.BorderWidth = 0f;
                //cell.FixedHeight = 20f;
                cell.Colspan = 2;
                pdtdtl.AddCell(cell);
                cell = new PdfPCell(FormatHeaderPhrase("Items Name"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                // cell.BorderWidth = 0f;
                //cell.FixedHeight = 20f;
                cell.Colspan = 2;
                pdtdtl.AddCell(cell);
                cell = new PdfPCell(FormatHeaderPhrase("Label"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                // cell.BorderWidth = 0f;
                // cell.FixedHeight = 30f;
                cell.Colspan = 2;
                pdtdtl.AddCell(cell);
                if (dtMst.Rows.Count > 0)
                {
                    cell = new PdfPCell(FormatFontPhrase(drr["PartyName"].ToString()));
                    cell.HorizontalAlignment = 0;
                    cell.VerticalAlignment = 1;
                    //cell.BorderWidth = 0f;
                    //cell.FixedHeight = 20f;
                    cell.Colspan = 2;
                    pdtdtl.AddCell(cell);
                    cell = new PdfPCell(FormatFontPhrase(drr["Name"].ToString()));
                    cell.HorizontalAlignment = 0;
                    cell.VerticalAlignment = 1;
                    //cell.BorderWidth = 0f;
                    //cell.FixedHeight = 20f;
                    cell.Colspan = 2;
                    pdtdtl.AddCell(cell);
                    cell = new PdfPCell(FormatFontPhrase(drr["Label"].ToString()));
                    cell.HorizontalAlignment = 0;
                    cell.VerticalAlignment = 1;
                    //cell.BorderWidth = 0f;
                    cell.Colspan = 2;
                    pdtdtl.AddCell(cell);
                }
                cell = new PdfPCell(FormatFontPhrase(""));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.BorderWidth = 0f;
                cell.FixedHeight = 8;
                cell.Colspan = 6;
                pdtdtl.AddCell(cell);
                DataTable dt = IdManager.GetShowDataTable("SELECT '' AS imagename,[ID] AS ImageID, [Image] AS Image from [ShiftmentBoxingItemsImage] where [BoxingItemsID] ='" + dgShiftmentItems.SelectedRow.Cells[1].Text.ToString() + "' and ItemsID='" + drr["SHITEMSid"].ToString() + "' ");
                if (dt.Rows.Count > 0)
                {
                    PdfPTable pdtclient = new PdfPTable(dt.Rows.Count);
                    pdtclient.WidthPercentage = 100;
                    decimal tt = decimal.Zero;
                    decimal tot = (6 / dt.Rows.Count);
                    tt = 6 * Math.Ceiling(tot);
                    for (int i = 0; i < tt; i++)
                    {
                        if (dt.Rows.Count - 1 < i)
                        {
                            cell = new PdfPCell(FormatHeaderPhrase(""));
                            cell.HorizontalAlignment = 1;
                            cell.VerticalAlignment = 1;
                            cell.BorderWidth = 0f;
                            pdtdtl.AddCell(cell);
                        }
                        else
                        {
                            DataRow dr = dt.Rows[i];
                            byte[] logo1 = (byte[])dr["Image"];
                            iTextSharp.text.Image gif1 = iTextSharp.text.Image.GetInstance(logo1);
                            gif1.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
                            gif1.ScalePercent(30f);
                            cell = new PdfPCell(gif1);
                            cell.PaddingBottom = 10f;
                            cell.HorizontalAlignment = 1;
                            cell.VerticalAlignment = 1;
                            cell.BorderWidth = 0f;
                            pdtdtl.AddCell(cell);
                        }
                    }
                }
                //DataTable dt11 = ShiftmentItemsManager.GetShiftmentItemsQuantity(txtID.Text);
                DataTable dt11 = ShiftmentItemsCartoonManager.getShiftmentItemsCartoonItemsQuantity(dgShiftmentItems.SelectedRow.Cells[1].Text.ToString(), drr["SHITEMSid"].ToString());
                if (dt11 != null)
                {
                    float[] widthbi = new float[dt11.Columns.Count];
                    for (int i = 0; i < dt11.Columns.Count; i++)
                    {
                        widthbi[i] = 100 / dt11.Columns.Count;
                    }
                    PdfPTable with1 = new PdfPTable(widthbi);
                    with1.WidthPercentage = 100;
                    cell = new PdfPCell(FormatHeaderPhrase("Color Name"));
                    cell.HorizontalAlignment = 1;
                    cell.VerticalAlignment = 1;
                    with1.AddCell(cell);

                    for (int i = 2; i < dt11.Columns.Count; i++)
                    {
                        cell = new PdfPCell(FormatHeaderPhrase(dt11.Columns[i].ColumnName));
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        with1.AddCell(cell);
                    }
                    cell = new PdfPCell(FormatHeaderPhrase("Total"));
                    cell.HorizontalAlignment = 1;
                    cell.VerticalAlignment = 1;
                    with1.AddCell(cell);
                    int ff = 0;
                    double tot1 = 0;
                    double tot2 = 0;
                    for (int i = 0; i < dt11.Rows.Count; i++)
                    {
                        for (int j = 1; j < dt11.Columns.Count; j++)
                        {
                            cell = new PdfPCell(FormatFontPhrase(dt11.Rows[i][j].ToString()));
                            if (ff == 0)
                            { cell.HorizontalAlignment = 0; }
                            else { cell.HorizontalAlignment = 1; }
                            cell.VerticalAlignment = 1;
                            with1.AddCell(cell);
                            if (dt11.Rows[i][j].ToString() != "" && ff > 0)
                            {
                                tot1 += Convert.ToDouble(dt11.Rows[i][j].ToString());
                                tot2 += Convert.ToDouble(dt11.Rows[i][j].ToString());
                            }
                            ff++;

                        }
                        cell = new PdfPCell(FormatFontPhrase(tot1.ToString()));
                        cell.HorizontalAlignment = 2;
                        cell.VerticalAlignment = 1;
                        with1.AddCell(cell);
                        ff = 0;
                        tot1 = 0;
                    }
                    cell = new PdfPCell(FormatHeaderPhrase("Total"));
                    cell.HorizontalAlignment = 2;
                    cell.VerticalAlignment = 1;
                    cell.Colspan = dt11.Columns.Count - 1;
                    with1.AddCell(cell);
                    cell = new PdfPCell(FormatHeaderPhrase(tot2.ToString()));
                    cell.HorizontalAlignment = 2;
                    cell.VerticalAlignment = 1;
                    cell.Colspan = dt11.Columns.Count - 1;
                    with1.AddCell(cell);

                    cell = new PdfPCell(pdtdtl);
                    cell.BorderWidth = 1f;
                    pdMB.AddCell(cell);

                    cell = new PdfPCell(with1);
                    cell.BorderWidth = 1f;
                    pdMB.AddCell(cell);
                    document.Add(pdMB);
                    serial++;
                }
            }
            document.Close();
            Response.Flush();
            Response.End();
        }
    }
    private static PdfPCell SignatureFormat(Document document, PdfPCell cell)
    {
        float[] widtl = new float[5] { 20, 20, 20, 20, 20 };
        PdfPTable pdtsig = new PdfPTable(widtl);
        pdtsig.WidthPercentage = 100;
        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.Colspan = 5;
        cell.FixedHeight = 40f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);


        cell = new PdfPCell(FormatPhrase("Prepared by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);

        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        cell = new PdfPCell(FormatPhrase("Checked by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);

        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        cell = new PdfPCell(FormatPhrase("Authorised by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        document.Add(pdtsig);
        return cell;
    }

    private static Phrase FormatPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9));
    }

    private static Phrase FormatHeaderPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD));
    }
    private static Phrase FormatFontPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.NORMAL));
    }
    protected void dgShiftmentItems_RowDataBound(object sender, GridViewRowEventArgs e)
    {

        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.Cells[6].Text == "Receive") { e.Row.Cells[6].BackColor = Color.Red; e.Row.Cells[6].ForeColor = Color.White; }
           // else { e.Row.Cells[6].BackColor = Color.Yellow; e.Row.Cells[6].ForeColor = Color.White; }
        } 
    }
}