using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using Delve;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.pdf.draw;
using System.Data.SqlClient;
using sales;

public partial class PurchaseVoucherLocal : System.Web.UI.Page
{
    private static DataTable dtsup = new DataTable();
    private static DataTable dtmsr = new DataTable();
    public static decimal priceDr = 0;
    private static Permis per;

    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["user"] == null)
        {
            if (Session.SessionID != "" | Session.SessionID != null)
            {
                clsSession ses = clsSessionManager.getSession(Session.SessionID);
                if (ses != null)
                {
                    Session["user"] = ses.UserId;
                    Session["book"] = "AMB";
                    string connectionString = DataManager.OraConnString();
                    SqlDataReader dReader;
                    SqlConnection conn = new SqlConnection();
                    conn.ConnectionString = connectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText =
                        "Select user_grp,[description],UserType,case when UserType=1 then 'Bangladesh' else 'Philippine' end AS[LoginCountry] from utl_userinfo where upper(user_name)=upper('" +
                        Session["user"].ToString().ToUpper() + "') and status='A'";
                    conn.Open();
                    dReader = cmd.ExecuteReader();
                    string wnot = "", userType = "";
                    if (dReader.HasRows == true)
                    {
                        while (dReader.Read())
                        {
                            Session["userlevel"] = int.Parse(dReader["user_grp"].ToString());
                            //Session["dept"] = dReader["dept"].ToString();
                            wnot = "Welcome " + dReader["description"].ToString();
                            Session["LoginCountry"] = dReader["LoginCountry"].ToString();
                            userType = dReader["UserType"].ToString();
                        }
                        Session["wnote"] = wnot;
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandType = CommandType.Text;
                        //cmd.CommandText = "Select book_desc,company_address1,company_address2,separator_type from gl_set_of_books where book_name='" + Session["book"].ToString() + "' ";
                        if (Convert.ToInt32(userType) == 2)
                        {

                            Session["bookMAN"] = "MAN";
                        }
                        else
                        {
                            Session["bookMAN"] = Session["book"].ToString();
                        }
                        cmd.CommandText =
                            "Select book_desc,company_address1,company_address2,separator_type,ShotName from gl_set_of_books where book_name='" +
                            Session["bookMAN"] + "' ";

                        if (dReader.IsClosed == false)
                        {
                            dReader.Close();
                        }
                        dReader = cmd.ExecuteReader();
                        if (dReader.HasRows == true)
                        {
                            while (dReader.Read())
                            {
                                Session["septype"] = dReader["separator_type"].ToString();
                                Session["org"] = dReader["book_desc"].ToString();
                                Session["add1"] = dReader["company_address1"].ToString();
                                Session["add2"] = dReader["company_address2"].ToString();
                            }
                        }
                    }
                    dReader.Close();
                    conn.Close();
                }
            }
        }
        try
        {
            string pageName = DataManager.GetCurrentPageName();
            string modid = PermisManager.getModuleId(pageName);
            per = PermisManager.getUsrPermis(Session["user"].ToString().Trim().ToUpper(), modid);
            if (per != null && per.AllowView == "Y")
            {
                ((Label) Page.Master.FindControl("lblLogin")).Text = Session["wnote"].ToString();
                ((Label) Page.Master.FindControl("lblCountryName")).Text = Session["LoginCountry"].ToString();
                ((LinkButton) Page.Master.FindControl("lbLogout")).Visible = true;
            }
            else
            {
                Response.Redirect("Home.aspx?sid=sam");
            }
        }
        catch
        {
            Response.Redirect("Default.aspx?sid=sam");
        }
        if (!IsPostBack)
        {
            try
            {
                if (Convert.ToInt32(Session["UserType"].ToString()) == 1)
                {
                    ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('you login BD user.\\n please login PH user. Thanks ..!!!');", true);
                    return;
                }
                Session["Cash_Code"] = "";
                double CurrencyRate = BankAndCashBlanceCheck.GetCurrency(btnSave, txtGRNODate, 0);
                ViewState["CurrencyRate"] = CurrencyRate;
                Session["UserType"] = IdManager.GetShowSingleValueString(" t.UserType", "t.USER_NAME", "UTL_USERINFO t",
                    Session["user"].ToString());
                ViewState["dtOldPvLocal"] = null;
                DropDownListValue();
                txtGRNODate.Attributes.Add("onBlur", "formatdate('" + txtGRNODate.ClientID + "')");
                txtPODate.Attributes.Add("onBlur", "formatdate('" + txtPODate.ClientID + "')");
                txtChallanDate.Attributes.Add("onBlur", "formatdate('" + txtChallanDate.ClientID + "')");

                txtGRNODate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txtPODate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txtChallanDate.Text = DateTime.Now.ToString("dd/MM/yyyy");

                PanelHistory.Visible = true;
                tabVch.Visible = false;
                DataTable dt1 = IdManager.GetShowDataTable("SELECT * FROM [FixGlCoaCode]");
                Session["Cash_Code"] = dt1.Rows[0]["CashInHand_BD"].ToString();
                Session["Cash_Name"] = dt1.Rows[0]["CashName_BD"].ToString();

                btnDelete.Enabled = btnSave.Enabled = btnNew.Visible = true;
                txtGRNO.Enabled =
                    txtChallanNo.Enabled =
                        txtPO.Enabled =
                            txtGRNODate.Enabled =
                                txtChallanDate.Enabled =
                                    txtSupplierSearch.Enabled =
                                        txtRemarks.Enabled =
                                            HyperLink1.Visible =
                                                txtShiftmentNo.Enabled =
                                                    ddlParty.Enabled = chkAdvance.Enabled = false;
                txtAddTot.Text = "0";
                txtID.Text = "";
                ddlPaymentMethord.SelectedIndex = -1;
                btnNew.Visible = true;
                Users usr = Delve.UsersManager.getUser(Session["user"].ToString());
                if (usr != null)
                {
                    lblBranchID.Text = usr.Dept;
                    lblBranchName.Text = "Branch Name : " +
                                         IdManager.GetShowSingleValueString("BranchName", "ID", "BranchInfo", usr.Dept);
                    DataTable dt = PurchaseVoucherManagerLocal.GetShowPurchaseMst(usr.Dept);
                    dgPVMst.DataSource = dt;
                    Session["PvMst"] = dt;
                    dgPVMst.DataBind();
                }
                else
                {
                    ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert",
                        "alert('Set branch this user.!!!');", true);
                    return;
                }
                //laberPerson.Visible = false;
                txtGRNO.Focus();
                if (Session["PurchaseVoucherLocal"] != null)
                {
                    txtID.Text = Session["PurchaseVoucherLocal"].ToString();
                    btnFind_Click(sender, e);
                    Session["PurchaseVoucherLocal"] = null;
                }
            }
            catch (FormatException fex)
            {
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('" + fex.Message + "');", true);
            }
            catch (Exception ex)
            {

                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('" + ex.Message + "');", true);
            }
        }
        else
        {
            ShowFooterTotal();
        }
    }

    private void DropDownListValue()
    {
        //string queryLoc = "select '' ID,'' ContactName  union select ID ,ContactName from Supplier where Country='2' order by 1";
        //util.PopulationDropDownList(ddlSupplier, "CostType", queryLoc, "ContactName", "ID");

        string queryCon = @"SELECT [COUNTRY_CODE],[COUNTRY_DESC] FROM [COUNTRY_INFO]";
        util.PopulationDropDownList(ddlPopSupplier, "CostType", queryCon, "COUNTRY_DESC", "COUNTRY_CODE");
        //ddlPopSupplier.Items.Insert(0, "");

        string query = "select '' ID,'' ContactName  union select ID ,ContactName from Labure where SupplierGroupID='CP' order by 1";
        util.PopulationDropDownList(ddlCarriagePerson, "CostType", query, "ContactName", "ID");

        string query1 = "select '' ID,'' ContactName  union select ID ,ContactName from Labure where SupplierGroupID='LP' order by 1";
        util.PopulationDropDownList(ddlLaburePerson, "CostType", query1, "ContactName", "ID");

        string query2 = "select '' [bank_id],'' [bank_name]  union select [bank_id] ,[bank_name] from [bank_info] order by 1";
        util.PopulationDropDownList(ddlBank, "bank_info", query2, "bank_name", "bank_id");

        string query3 = "select '' ID,'' PartyName  union select  ID,PartyName from  PartyInfo order by 1";
        util.PopulationDropDownList(ddlParty, "PartyInfo", query3, "PartyName", "ID");
    }
    protected void btnNew_Click(object sender, EventArgs e)
    {
        ClearFields();
        PanelHistory.Visible = btnNew.Visible = btnNew.Visible = false;       
        getEmptyDtl();      
      //  ddlSupplier.SelectedIndex = -1;
        ddlPaymentMethord.SelectedIndex = -1;
        tabVch.Visible = HyperLink1.Visible = chkAdvance.Enabled =txtPODate.Enabled= true;
        txtChallanNo.Enabled = txtPO.Enabled = txtGRNODate.Enabled = txtChallanDate.Enabled = txtSupplierSearch.Enabled = txtRemarks.Enabled = dgPVDetailsDtl.Enabled = txtShiftmentNo.Enabled = ddlParty.Enabled = true;
        txtChallanNo.Focus();
    }
    private void ClearFields()
    {
        Session["purdtl"] = null;
        txtGRNO.Text = "";
        txtPO.Text = "";
        txtChallanNo.Text = "";
        txtRemarks.Text = "";
       // txtSiftment.Text = "";
        txtGRNODate.Text = System.DateTime.Now.Date.ToString("dd/MM/yyyy");
        txtPODate.Text = System.DateTime.Now.Date.ToString("dd/MM/yyyy");
        txtChallanDate.Text = System.DateTime.Now.Date.ToString("dd/MM/yyyy");
        txtTotalAmount.Text = "0";
        txtOtherCharge.Text = "0";
        txtCarriageCharge.Text = "0";
        txtLabureCharge.Text = "0";
        txtTotPayment.Text = "0";
        txtDue.Text = "0";
        //ddlPaymentMethord.SelectedIndex = 1;
        ddlBank.SelectedIndex = -1;
        txtChequeDate.Text = "";
        txtChequeNo.Text = "";
        txtChequeAmount.Text = "0";
        txtID.Text = "";
        txtTotItems.Text = txtAddTot.Text = "0";
        VisiblePayment(false, false, false, false, false, false, false, false);
    }
    private void getEmptyDtl()
    {      
        dgPVDetailsDtl.Visible = true;
        DataTable dtDtlGrid = new DataTable();
        dtDtlGrid.Columns.Add("ID", typeof(string));
        dtDtlGrid.Columns.Add("item_code", typeof(string));
        dtDtlGrid.Columns.Add("item_desc", typeof(string));
        dtDtlGrid.Columns.Add("msr_unit_code", typeof(string));
        dtDtlGrid.Columns.Add("item_rate", typeof(string));
        dtDtlGrid.Columns.Add("qnty", typeof(string));
        dtDtlGrid.Columns.Add("Additional", typeof(string));
        dtDtlGrid.Columns.Add("UMO", typeof(string));
        dtDtlGrid.Columns.Add("BrandName", typeof(string));
        DataRow dr = dtDtlGrid.NewRow();
        dr["Additional"] = "0";
        dtDtlGrid.Rows.Add(dr);
        dgPVDetailsDtl.DataSource = dtDtlGrid;
        Session["purdtl"] = dtDtlGrid;
        dgPVDetailsDtl.DataBind();
        ShowFooterTotal();
    }
    protected void btnSave_Click(object sender, EventArgs e)
    {
        try
        {
            DataTable dt = (DataTable)Session["purdtl"];
            DataTable dtOldPvLocal = (DataTable)ViewState["dtOldPvLocal"];
            if (txtSupplierSearch.Text == "")
            {
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Enter Supplier...!!');", true);
            }
            else if (ddlPaymentMethord.SelectedValue == "Q" && ddlChequeStatus.SelectedItem.Text == "") { ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Select Cheque Status..!!');", true); }
            else if (ddlPaymentMethord.SelectedValue == "Q" && Convert.ToDouble(txtTotPayment.Text) > 0 && ddlChequeStatus.SelectedValue == "P")
            {
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Incorrect Check Status.!!');", true);
            }
            else if (dt.Rows.Count<=0)
            {
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Empty Items.!!');", true);
            }
            else
            {
                PurchaseVoucherInfoLocal purmst = PurchaseVoucherManagerLocal.GetPurchaseMst(txtID.Text.Trim());
                if (purmst != null)
                {
                    if (per.AllowEdit == "Y")
                    {
                        int CountGRN = IdManager.GetShowSingleValueInt("COUNT(*)", "UPPER(GRN)", "ItemPurchaseLocalMst",
                            txtGrnNo.Text.ToUpper(), Convert.ToInt32(txtID.Text));
                        if (CountGRN > 0)
                        {
                            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Warning :\\n This Local GRN already exist.!!');", true);
                            return;
                        }
                        purmst.ID = txtID.Text;
                        purmst.GoodsReceiveNo = txtGRNO.Text.Trim();
                        purmst.GoodsReceiveDate = txtGRNODate.Text;
                        purmst.PurchaseOrderNo = txtPO.Text;
                        purmst.PurchaseOrderDate = txtPODate.Text;
                        purmst.ChallanNo = txtChallanNo.Text;
                        purmst.ChallanDate = txtChallanDate.Text;
                        purmst.Supplier = hfSupplierID.Value;
                        purmst.SupplierName = txtSupplierSearch.Text;
                        purmst.Remarks = txtRemarks.Text;
                        purmst.TotalAmount = txtTotalAmount.Text.Replace(",", "");
                        purmst.TotalPayment = txtTotPayment.Text.Replace(",", "");
                        purmst.CarriagePerson = ddlCarriagePerson.SelectedValue;
                        purmst.CarriageCharge = txtCarriageCharge.Text.Replace(",", "");
                        purmst.LaburePerson = ddlLaburePerson.SelectedValue;
                        purmst.LabureCharge = txtLabureCharge.Text.Replace(",", "");
                        purmst.OtherCharge = txtOtherCharge.Text.Replace(",", "");
                        purmst.PaymentMethord = ddlPaymentMethord.SelectedValue;
                        purmst.BankId = ddlBank.SelectedValue;
                        purmst.ChequeNo = txtChequeNo.Text;
                        purmst.ChequeDate = txtChequeDate.Text;
                        purmst.ChequeAmount = txtChequeAmount.Text.Replace(",", "");
                        if (ddlParty.SelectedItem.Text == "") { purmst.PartyID = "1"; }
                        else { purmst.PartyID = ddlParty.SelectedValue; }
                        purmst.ShiftmentID = lblShiftmentID.Text;
                        purmst.LoginBy = Session["user"].ToString();
                        purmst.ChkStatus = ddlChequeStatus.SelectedValue;
                        purmst.BranchID = lblBranchID.Text;

                        //********************** Journal Voucher Update *************//
                        string VCH_SYS_NO = IdManager.GetShowSingleValueString("VCH_SYS_NO",
                            "t1.PAYEE='PV' and SUBSTRING(t1.VCH_REF_NO,1,2)='JV' and t1.SERIAL_NO", "GL_TRANS_MST t1",
                            txtGRNO.Text);
                        VouchMst vmst = VouchManager.GetVouchMst(VCH_SYS_NO.Trim());
                        if (vmst != null)
                        {
                            vmst.FinMon = FinYearManager.getFinMonthByDate(txtGRNODate.Text);
                            vmst.ValueDate = txtGRNODate.Text;
                            vmst.VchCode = "03";
                            //vmst.SerialNo = txtGRNO.Text.Trim();
                            vmst.Particulars = txtRemarks.Text;
                            vmst.ControlAmt = txtTotalAmount.Text.Replace(",", "");
                            //vmst.Payee = "PV";
                            vmst.CheqAmnt = "0";
                            vmst.UpdateUser = Session["user"].ToString().ToUpper();
                            vmst.UpdateDate = System.DateTime.Now.ToString("dd/MM/yyyy");
                            vmst.AuthoUserType = Session["userlevel"].ToString();
                        }
                        PurchaseVoucherManagerLocal.UpdatePurchaseVoucher(purmst, dt, dtOldPvLocal, vmst,
                            Session["Supplier_COA"].ToString(), Session["UserType"].ToString(),
                            ViewState["CurrencyRate"].ToString());
                        ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Record are update successfully...!!');", true);
                        btnSave.Enabled = false;
                    }
                    else
                    {
                        ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('You are not Permitted this Step...!!');", true);
                    }
                }
                else
                {
                    if (per.AllowAdd == "Y")
                    {
                        int CountGRN = IdManager.GetShowSingleValueInt("COUNT(*)", "UPPER(GRN)", "ItemPurchaseLocalMst", txtGrnNo.Text.ToUpper());
                        if (CountGRN > 0)
                        {
                            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Warning :\\n This Local GRN already exist.!!');", true);
                            return;
                        }
                        purmst = new PurchaseVoucherInfoLocal();
                        purmst.GoodsReceiveDate = txtGRNODate.Text;
                        purmst.PurchaseOrderNo = txtPO.Text;
                        purmst.PurchaseOrderDate = txtPODate.Text;
                        purmst.ChallanNo = txtChallanNo.Text;
                        purmst.ChallanDate = txtChallanDate.Text;
                        purmst.Supplier =hfSupplierID.Value;
                        purmst.SupplierName = txtSupplierSearch.Text;
                        purmst.Remarks = txtRemarks.Text;
                        purmst.TotalAmount = txtTotalAmount.Text.Replace(",", "");
                        purmst.TotalPayment = txtTotPayment.Text.Replace(",", "");
                        purmst.CarriagePerson = ddlCarriagePerson.SelectedValue;
                        purmst.CarriageCharge = txtCarriageCharge.Text.Replace(",", "");
                        purmst.LaburePerson = ddlLaburePerson.SelectedValue;
                        purmst.LabureCharge = txtLabureCharge.Text.Replace(",", "");
                        purmst.OtherCharge = txtOtherCharge.Text.Replace(",", "");
                        purmst.PaymentMethord = ddlPaymentMethord.SelectedValue;
                        purmst.BankId = ddlBank.SelectedValue;
                        purmst.ChequeNo = txtChequeNo.Text;
                        purmst.ChequeDate = txtChequeDate.Text;
                        purmst.ChequeAmount = txtChequeAmount.Text.Replace(",", "");
                        purmst.LoginBy = Session["user"].ToString();
                        if (chkAdvance.Checked == true)
                        { purmst.AdvancePayFlag = "1"; }
                        txtGRNO.Text = IdManager.GetDateTimeWiseSerial("LGRN", "GRN", "[ItemPurchaseLocalMst]");
                        purmst.GoodsReceiveNo = txtGRNO.Text.Trim();
                        if (ddlParty.SelectedItem.Text == "") { purmst.PartyID = "1"; }
                        else { purmst.PartyID = ddlParty.SelectedValue; }
                        purmst.ShiftmentID = lblShiftmentID.Text;
                        purmst.ChkStatus = ddlChequeStatus.SelectedValue;
                        purmst.BranchID = lblBranchID.Text;

                        //*************************** Account Entry ******************//
                        //********* Jurnal Voucher *********//
                        VouchMst vmst = new VouchMst();
                        vmst.FinMon = FinYearManager.getFinMonthByDate(txtGRNODate.Text);
                        vmst.ValueDate = txtGRNODate.Text;
                        vmst.VchCode = "03";
                        vmst.RefFileNo = "";
                        vmst.VolumeNo = "";
                        vmst.SerialNo = txtGRNO.Text.Trim();
                        vmst.Particulars = txtRemarks.Text;
                        vmst.ControlAmt = txtTotalAmount.Text.Replace(",", "");
                        vmst.Payee = "PV";
                        vmst.CheckNo = txtChequeNo.Text;
                        vmst.CheqDate = txtChequeDate.Text;
                        vmst.CheqAmnt = "0";
                        vmst.MoneyRptNo = "";
                        vmst.MoneyRptDate = "";
                        vmst.TransType = "R";
                        vmst.BookName = "AMB";
                        vmst.EntryUser = Session["user"].ToString();
                        vmst.EntryDate = DateTime.Parse(DateTime.Now.ToString()).ToString("dd/MM/yyyy");
                        vmst.Status = "U";
                        vmst.AuthoUserType = Session["userlevel"].ToString();
                        vmst.VchSysNo = IdManager.GetNextID("gl_trans_mst", "vch_sys_no").ToString();
                        vmst.VchRefNo = "JV-" + vmst.VchSysNo.ToString().PadLeft(10, '0');

                        int ID = PurchaseVoucherManagerLocal.SavePurchaseVoucher(purmst, dt, lblOrNo.Text, vmst,
                            Session["Supplier_COA"].ToString(), Session["UserType"].ToString(),
                            ViewState["CurrencyRate"].ToString()); 
                        ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Record has been saved successfully...!!');", true);
                        btnSave.Enabled = false;
                        Session["purdtl"] = PurchaseVoucherManagerLocal.GetPurchaseItemsDetails(ID.ToString());
                    }
                    else
                    {
                        ClientScript.RegisterStartupScript(this.GetType(),"ale", "alert('You are not Permitted this Step...!!');", true);
                    }
                }
            }
        }
        catch (FormatException fex)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('" + fex.Message + "');", true);
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Database"))
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Database Maintain Error. Contact to the Software Provider..!!');", true);
            else
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('There is some problem to do the task. Try again properly.!!');", true);
        }
    }
    const string PHLocalPurchase = "1-7020101";
    const string ClosingStock = "1-1030002";

    protected void Delete_Click(object sender, EventArgs e)
    {
        if (per.AllowDelete == "Y")
        {
            PurchaseVoucherInfoLocal purmst = PurchaseVoucherManagerLocal.GetPurchaseMst(txtID.Text.Trim());
            if (purmst != null)
            {
                purmst.ID = txtID.Text;
                purmst.GoodsReceiveNo = txtGRNO.Text.Trim();
                DataTable dtOldPvLocal = (DataTable)ViewState["dtOldPvLocal"];
                PurchaseVoucherManagerLocal.DeletePurchaseVoucher(purmst, dtOldPvLocal);
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Record has been delete successfully...!!');", true);
                btnDelete.Enabled = false;
                btnSave.Enabled = false;
            }
        }
        else
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('You are not Permitted this Step...!!');", true);
        }
    }
    protected void Find_Click(object sender, EventArgs e)
    {

    }
    protected void Clear_Click(object sender, EventArgs e)
    {
        var pageName = System.IO.Path.GetFileName(Request.Url.ToString());
        Response.Redirect(pageName);
        //Response.Redirect("PurchaseVoucher.aspx?mno=5.18");
        //RefreshAll();
    }

    private void RefreshAll()
    {
        ClearFields();
        Session["Cash_Code"] = "";
        DropDownListValue();
        dgPVDetailsDtl.DataSource = null;
        dgPVDetailsDtl.DataBind();
        PanelHistory.Visible = btnNew.Visible = true;
        tabVch.Visible = false;
        DataTable dt1 = IdManager.GetShowDataTable("SELECT * FROM [FixGlCoaCode]");
        Session["Cash_Code"] = dt1.Rows[0]["CashInHand_BD"].ToString();
        Session["Cash_Name"] = dt1.Rows[0]["CashName_BD"].ToString();
        DataTable dt = PurchaseVoucherManagerLocal.GetShowPurchaseMst(lblBranchID.Text);
        dgPVMst.DataSource = dt;
        Session["PvMst"] = dt;
        lblOrNo.Text = ""; txtID.Text = "";
        dgPVMst.DataBind();      
        btnDelete.Enabled =btnSave.Enabled = true;
        txtGRNO.Enabled = txtChallanNo.Enabled = txtPO.Enabled = txtGRNODate.Enabled = txtChallanDate.Enabled = txtSupplierSearch.Enabled = txtRemarks.Enabled = false;
        txtGRNO.Focus();
    }
    //************* Pv Items Details ******//
    protected void dgPurDtl_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                if (((DataRowView)e.Row.DataItem)["qnty"].ToString() != "" && ((DataRowView)e.Row.DataItem)["item_rate"].ToString() != "")
                {
                    decimal total = decimal.Parse(((DataRowView)e.Row.DataItem)["item_rate"].ToString()) *
                                   decimal.Parse(((DataRowView)e.Row.DataItem)["qnty"].ToString());
                    ((Label)e.Row.FindControl("lblTotal")).Text = total.ToString("N3");

                    decimal totAdd = decimal.Parse(((Label)e.Row.FindControl("lblTotal")).Text)+((decimal.Parse(((Label)e.Row.FindControl("lblTotal")).Text) * decimal.Parse(((DataRowView)e.Row.DataItem)["Additional"].ToString())) / 100);
                    ((Label)e.Row.FindControl("lblAddTotal")).Text = totAdd.ToString("N3");
                   
                }
                e.Row.Cells[9].Attributes.Add("style", "display:none");
                e.Row.Cells[6].Attributes.Add("style", "display:none");
                e.Row.Cells[7].Attributes.Add("style", "display:none");
            }       
            else if (e.Row.RowType == DataControlRowType.Header)
            {
                e.Row.Cells[9].Attributes.Add("style", "display:none");
                e.Row.Cells[6].Attributes.Add("style", "display:none");
                e.Row.Cells[7].Attributes.Add("style", "display:none");
            }
            else if (e.Row.RowType == DataControlRowType.Footer)
            {
                e.Row.Cells[9].Attributes.Add("style", "display:none");
                e.Row.Cells[6].Attributes.Add("style", "display:none");
                e.Row.Cells[7].Attributes.Add("style", "display:none");
            }
            else if (e.Row.RowType == DataControlRowType.Footer)
            {
                e.Row.Cells[9].Attributes.Add("style", "display:none");
                e.Row.Cells[6].Attributes.Add("style", "display:none");
                e.Row.Cells[7].Attributes.Add("style", "display:none");
            }
        }
        catch (FormatException fex)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('" + fex.Message + "');", true);
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Database"))
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Database Maintain Error. Contact to the Software Provider..!!');", true);
            else
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('There is some problem to do the task. Try again properly.!!');", true);
        }
    }
    protected void dgPurDtl_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        if (Session["purdtl"] != null)
        {
            DataTable dtDtlGrid = (DataTable)Session["purdtl"];
            dtDtlGrid.Rows.RemoveAt(dgPVDetailsDtl.Rows[e.RowIndex].DataItemIndex);
            if (dtDtlGrid.Rows.Count > 0)
            {
                string found = "";
                foreach (DataRow drf in dtDtlGrid.Rows)
                {
                    if (drf["item_code"].ToString() == "" && drf["item_desc"].ToString() == "")
                    {
                        found = "Y";
                    }
                }
                if (found == "")
                {
                    DataRow dr = dtDtlGrid.NewRow();
                    dtDtlGrid.Rows.Add(dr);
                }
                dgPVDetailsDtl.DataSource = dtDtlGrid;
                dgPVDetailsDtl.DataBind();
            }
            else
            {
                getEmptyDtl();
            }
            ShowFooterTotal();
        }
        else
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Your session is over. Try it again!!');", true);
        }
    }

    // *************** PV History **************//

    protected void dgPurMst_PageIndexChanging(object sender, GridViewPageEventArgs e)    
    {        
        dgPVMst.PageIndex = e.NewPageIndex;
        dgPVMst.DataSource = Session["PvMst"];
        dgPVMst.DataBind();
    }
    protected void dgPurMst_SelectedIndexChanged(object sender, EventArgs e)
    {
        Session["PurchaseVoucherLocal"] = dgPVMst.SelectedRow.Cells[8].Text;
        Response.Write("<script>");
        Response.Write("window.open('PurchaseVoucherLocal.aspx?mno=5.18','_blank')");
        Response.Write("</script>");
       
    }
    protected void dgPVMst_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow | e.Row.RowType == DataControlRowType.Header | e.Row.RowType == DataControlRowType.Footer)
            {
                e.Row.Cells[8].Attributes.Add("style", "display:none");
                e.Row.Cells[4].Attributes.Add("style", "display:none");
            }
        }
        catch (FormatException fex)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('" + fex.Message + "');", true);
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Database"))
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Database Maintain Error. Contact to the Software Provider..!!');", true);
            else
                ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('There is some problem to do the task. Try again properly.!!');", true);
        }
    }
    //*********************** PV Details ********************************//
    public DataTable PopulateMeasure()
    {
        dtmsr = ItemManager.GetMeasure();
        DataRow dr = dtmsr.NewRow();
        dtmsr.Rows.InsertAt(dr, 0);
        return dtmsr;
    }
    protected void txtItemCode_TextChanged(object sender, EventArgs e)
    {

    }
    protected void txtItemDesc_TextChanged(object sender, EventArgs e)
    {
        GridViewRow gvr = (GridViewRow)((TextBox)sender).NamingContainer;
        DataTable dtdtl = (DataTable)Session["purdtl"];
        DataRow dr = dtdtl.Rows[gvr.DataItemIndex];
        DataTable dt = ItemManager.GetItems(((TextBox)gvr.FindControl("txtItemDesc")).Text);
        if (dt.Rows.Count > 0)
        {
            //DataRow[] rows = dtdtl.Select("ID = " + ((DataRow)dt.Rows[0])["ID"].ToString() + " ");
            //// DataRow drr = dtdtl.AsEnumerable().SingleOrDefault(r => r.Field<int?>("ItemsID") ==Convert.ToInt32(((DataRow)dt.Rows[0])["ItemsID"].ToString()));
            //if (rows != null)
            //{
            //    if (rows.Length > 0)
            //    {
            //        ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert", "alert('This items already added...!!!');", true);
            //        ((TextBox)gvr.FindControl("txtItemDesc")).Text = "";
            //        ((TextBox)gvr.FindControl("txtItemDesc")).Focus();
            //        return;
            //    }
            //}
            bool IsCheck = false;
            foreach (DataRow ddr in dtdtl.Rows)
            {
                if (string.IsNullOrEmpty(dr["item_desc"].ToString()))
                {
                    if (ddr["ID"].ToString().Equals(((DataRow)dt.Rows[0])["ID"].ToString()))
                    {
                        IsCheck = true;
                        break;
                    }
                }
            }
            if (IsCheck == true)
            {
                ScriptManager.RegisterClientScriptBlock((sender as Control), this.GetType(), "alert", "alert('This items already added...!!!');", true);
                ((TextBox)gvr.FindControl("txtItemDesc")).Text = "";
                ((TextBox)gvr.FindControl("txtItemDesc")).Focus();
                return;
            }
            dtdtl.Rows.Remove(dr);
            dr = dtdtl.NewRow();
            dr["ID"] = ((DataRow)dt.Rows[0])["ID"].ToString();
            dr["item_desc"] = ((DataRow)dt.Rows[0])["item_desc"].ToString();
            dr["item_code"] = ((DataRow)dt.Rows[0])["item_code"].ToString();
            dr["msr_unit_code"] = ((DataRow)dt.Rows[0])["msr_unit_code"].ToString();
            dr["item_rate"] = "0";
            dr["qnty"] = "0";
            dr["Additional"] = "0";
            dr["UMO"] = ((DataRow)dt.Rows[0])["UMO"].ToString();
            dr["BrandName"] = ((DataRow)dt.Rows[0])["BrandName"].ToString();
            dtdtl.Rows.InsertAt(dr, gvr.DataItemIndex);
        }
        //string found = "";
        //foreach (DataRow drd in dtdtl.Rows)
        //{
        //    if (drd["item_code"].ToString() == "" && drd["item_desc"].ToString() == "")
        //    {
        //        found = "Y";
        //    }
        //}
        //if (found == "")
        //{
        //    DataRow drd = dtdtl.NewRow();
        //    dtdtl.Rows.Add(drd);
        //}
        dgPVDetailsDtl.DataSource = dtdtl;
        dgPVDetailsDtl.DataBind();
        ShowFooterTotal();
       // ((TextBox)gvr.FindControl("txtItemRate")).Focus();
        ((TextBox)dgPVDetailsDtl.Rows[dgPVDetailsDtl.Rows.Count - 1].FindControl("txtItemRate")).Focus();
    }
    private void ShowFooterTotal()
    {
        decimal ctot = decimal.Zero;
        decimal totAddi = 0;
        decimal totRat = 0;
        decimal totQty = 0;
        decimal totItemsP = 0;
        decimal totA = 0;
        decimal Total = 0;

        if (Session["purdtl"] != null)
        {
            DataTable dt = (DataTable)Session["purdtl"];
            foreach (DataRow drp in dt.Rows)
            {
                if (drp["item_code"].ToString() != "" && drp["item_rate"].ToString() != "" && drp["qnty"].ToString() != "")
                {
                    totRat += decimal.Parse(drp["item_rate"].ToString());
                    totQty += decimal.Parse(drp["qnty"].ToString());
                    totItemsP += Convert.ToDecimal(drp["item_rate"].ToString()) * Convert.ToDecimal(drp["qnty"].ToString());
                    totA += decimal.Parse(drp["Additional"].ToString());

                    //totAddi += (totItemsP * decimal.Parse(drp["Additional"].ToString())) / 100;
                    //Total += totItemsP;
                }
            }
            txtAddTot.Text = totAddi.ToString("N3");
            txtTotItems.Text = totItemsP.ToString("N3");
        }

        GridViewRow row = new GridViewRow(0, 0, DataControlRowType.Footer, DataControlRowState.Normal);
        TableCell cell;
        cell = new TableCell();
        cell.Text = "Total";
        cell.ColumnSpan = 4;
        cell.HorizontalAlign = HorizontalAlign.Right;
        row.Cells.Add(cell);
        cell = new TableCell();
        //cell.Text = totRat.ToString("N3");
        cell.Text = "";
        
        cell.HorizontalAlign = HorizontalAlign.Right;
        row.Cells.Add(cell);
        cell = new TableCell();
        cell.Text = totQty.ToString("N0");
        cell.HorizontalAlign = HorizontalAlign.Right;
        row.Cells.Add(cell);
        //cell = new TableCell();
        //cell.Text = totItemsP.ToString("N0");
        //cell.HorizontalAlign = HorizontalAlign.Right;
        //row.Cells.Add(cell);
        //cell = new TableCell();
        //cell.Text = totA.ToString("N3");
        //cell.HorizontalAlign = HorizontalAlign.Right;
        //row.Cells.Add(cell);
        cell = new TableCell();
        priceDr = Total;
        cell.Text = totItemsP.ToString("N3");
        cell.HorizontalAlign = HorizontalAlign.Right;
        row.Cells.Add(cell);
        row.Font.Bold = true;
        row.BackColor = System.Drawing.Color.LightGray;
        if (dgPVDetailsDtl.Rows.Count > 0)
        {
            dgPVDetailsDtl.Controls[0].Controls.Add(row);
        }
        txtTotalAmount.Text = totItemsP.ToString("N3");
        txtDue.Text = totItemsP.ToString("N2");
        // while using Total Paid field separately
        //row.Attributes.Add("style", "display:none");

        //PVIesms_UP.Update();
    }
    //private void ShowFooterTotal()
    //{
    //    decimal ctot = decimal.Zero;
    //    decimal totAddi = 0;
    //    decimal totRat = 0;
    //    decimal totQty = 0;
    //    double totItemsP = 0;
    //    decimal totA = 0;
    //    decimal Total = 0;
        
    //    if (Session["purdtl"] != null)
    //    {
    //        DataTable dt = (DataTable)Session["purdtl"];    
    //        foreach (DataRow drp in dt.Rows)
    //        {
    //            if (drp["item_code"].ToString() != "" && drp["item_rate"].ToString() != "" && drp["qnty"].ToString() != "")
    //            {
    //                totRat += decimal.Parse(drp["item_rate"].ToString());
    //                totQty += decimal.Parse(drp["qnty"].ToString());
    //                totItemsP += Convert.ToDouble(drp["item_rate"].ToString()) * Convert.ToDouble(drp["qnty"].ToString());
    //                totA += decimal.Parse(drp["Additional"].ToString());

    //                //totAddi += (totItemsP * decimal.Parse(drp["Additional"].ToString())) / 100;
    //               // Total += (totItemsP + totAddi);
    //            }
    //        }
    //        txtAddTot.Text = totAddi.ToString("N3");
    //        txtTotItems.Text = totItemsP.ToString("N3");
    //    }

    //    GridViewRow row = new GridViewRow(0, 0, DataControlRowType.Footer, DataControlRowState.Normal);
    //    TableCell cell;         
    //    cell = new TableCell();
    //    cell.Text = "Total";
    //    cell.ColumnSpan = 3;
    //    cell.HorizontalAlign = HorizontalAlign.Right;  
    //    row.Cells.Add(cell);
    //    cell = new TableCell();
    //    cell.Text = totRat.ToString("N3");
    //    cell.HorizontalAlign = HorizontalAlign.Right;        
    //    row.Cells.Add(cell);
    //    cell = new TableCell();
    //    cell.Text = totQty.ToString("N3");
    //    cell.HorizontalAlign = HorizontalAlign.Right;
    //    row.Cells.Add(cell);
    //    //cell = new TableCell();
    //    //cell.Text = totItemsP.ToString("N0");
    //    //cell.HorizontalAlign = HorizontalAlign.Right;
    //    //row.Cells.Add(cell);
    //    cell = new TableCell();
    //    cell.Text = totA.ToString("N3");
    //    cell.HorizontalAlign = HorizontalAlign.Right;
    //    row.Cells.Add(cell);
    //    cell = new TableCell();
    //    priceDr = Total;
    //    cell.Text = totItemsP.ToString("N0");
    //    cell.HorizontalAlign = HorizontalAlign.Right;
    //    row.Cells.Add(cell);
    //    row.Font.Bold = true;
    //    row.BackColor = System.Drawing.Color.LightGray;
    //    if (dgPVDetailsDtl.Rows.Count > 0)
    //    {
    //        dgPVDetailsDtl.Controls[0].Controls.Add(row);
    //    }
    //    txtTotalAmount.Text = totItemsP.ToString("N2").Replace(",", "");
    //    txtDue.Text = totItemsP.ToString("N2").Replace(",", "");
    //    // while using Total Paid field separately
    //    //row.Attributes.Add("style", "display:none");
    //}



    //*************************  txtItemsRate_TextChanged *******************//

    protected void txtItemsRate_TextChanged(object sender, EventArgs e)
    {
        try
        {
            GridViewRow gvr = (GridViewRow)((TextBox)sender).NamingContainer;
            DataTable dt = (DataTable)Session["purdtl"];
            if (dt.Rows.Count > 0)
            {
                DataRow dr = dt.Rows[gvr.DataItemIndex];
                dr["ID"] = dr["ID"].ToString();
                dr["item_desc"] = dr["item_desc"].ToString();
                dr["item_code"] = dr["item_code"].ToString();
                dr["msr_unit_code"] = dr["msr_unit_code"].ToString();
                dr["item_rate"] = ((TextBox)gvr.FindControl("txtItemRate")).Text;
                if (((TextBox)gvr.FindControl("txtQnty")).Text == "") { dr["qnty"] = "0"; }
                dr["qnty"] = ((TextBox)gvr.FindControl("txtQnty")).Text;

            }
            string found = "";
            foreach (DataRow drd in dt.Rows)
            {
                if (drd["item_code"].ToString() == "" && drd["item_desc"].ToString() == "")
                {
                    found = "Y";
                }
            }
            if (found == "")
            {
                DataRow drd = dt.NewRow();
                dt.Rows.Add(drd);
            }
            dgPVDetailsDtl.DataSource = dt;
            dgPVDetailsDtl.DataBind();
            ShowFooterTotal();
            ((TextBox)dgPVDetailsDtl.Rows[dgPVDetailsDtl.Rows.Count - 2].FindControl("txtQnty")).Focus();
        }
        catch (Exception ex)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('" + ex + "');", true);
        }
    }

  //*************************  txtQnty_TextChanged *******************//

    protected void txtQnty_TextChanged(object sender, EventArgs e)
    {
        try
        {
            GridViewRow gvr = (GridViewRow)((TextBox)sender).NamingContainer;
            DataTable dt = (DataTable)Session["purdtl"];
            if (dt.Rows.Count > 0)
            {
                DataRow dr = dt.Rows[gvr.DataItemIndex];
                dr["ID"] = dr["ID"].ToString();
                dr["item_desc"] = dr["item_desc"].ToString();
                dr["item_code"] = dr["item_code"].ToString();
                dr["msr_unit_code"] = dr["msr_unit_code"].ToString();
                dr["item_rate"] = ((TextBox)gvr.FindControl("txtItemRate")).Text;
                if (((TextBox)gvr.FindControl("txtQnty")).Text == "") { dr["qnty"] = "0"; }
                dr["qnty"] = ((TextBox)gvr.FindControl("txtQnty")).Text;

            }
            string found = "";
            foreach (DataRow drd in dt.Rows)
            {
                if (drd["item_code"].ToString() == "" && drd["item_desc"].ToString() == "")
                {
                    found = "Y";
                }
            }
            if (found == "")
            {
                DataRow drd = dt.NewRow();
                dt.Rows.Add(drd);
            }
            dgPVDetailsDtl.DataSource = dt;
            dgPVDetailsDtl.DataBind();
            ShowFooterTotal();
            ((TextBox)dgPVDetailsDtl.Rows[dgPVDetailsDtl.Rows.Count - 2].FindControl("txtAdditional")).Focus();
        }
        catch (Exception ex)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('" + ex + "');", true);
        }
    }
    //*************************  txtAdditional_TextChanged *******************//

    protected void txtAdditional_TextChanged(object sender, EventArgs e)
    {
        try
        {
            GridViewRow gvr = (GridViewRow)((TextBox)sender).NamingContainer;
            DataTable dt = (DataTable)Session["purdtl"];
            if (dt.Rows.Count > 0)
            {
                DataRow dr = dt.Rows[gvr.DataItemIndex];
                if (((TextBox)gvr.FindControl("txtAdditional")).Text == "") { dr["Additional"] = "0"; }
                dr["Additional"] = ((TextBox)gvr.FindControl("txtAdditional")).Text;
            }
            dgPVDetailsDtl.DataSource = dt;
            dgPVDetailsDtl.DataBind();
            ShowFooterTotal();
            ((TextBox)dgPVDetailsDtl.Rows[dgPVDetailsDtl.Rows.Count - 1].FindControl("txtItemDesc")).Focus();
        }
        catch (Exception ex)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('" + ex + "');", true);
        }
    }
    protected void ddlParty_SelectedIndexChanged(object sender, EventArgs e)
    {
        ViewState["AddressParty"] = IdManager.GetShowSingleValueString("Address", "ID", "PartyInfo", ddlParty.SelectedValue);
        ViewState["PhoneParty"] = IdManager.GetShowSingleValueString("Phone", "ID", "PartyInfo", ddlParty.SelectedValue);
        Session["Party_COA"] = IdManager.GetShowSingleValueString("Gl_CoaCode", "ID", "PartyInfo", ddlParty.SelectedValue);
    }
    protected void txtPO_TextChanged(object sender, EventArgs e)
    {
        DataTable dt = PurchaseOrderManager.GetShowOrder(txtPO.Text);
        if (dt.Rows.Count > 0)
        {
            txtPO.Text = dt.Rows[0]["PO"].ToString();
            txtPODate.Text =Convert.ToDateTime(dt.Rows[0]["PODate"]).ToString("dd/MM/yyyy");
            Supplier sup = SupplierManager.GetSupplier(dt.Rows[0]["SupplierID"].ToString());
            if (sup != null)
            {
                txtSupplierSearch.Text = sup.SupName;
                ViewState["Address"] = sup.SupAddr1;
                ViewState["Phone"] = sup.SupPhone;
                Session["Supplier_COA"] = sup.GlCoa;
            }
            lblOrNo.Text = dt.Rows[0]["ID"].ToString();
            DataTable dt1 = PurchaseOrderManager.GetPurchaseOrderItemsDetails(dt.Rows[0]["ID"].ToString());
            dgPVDetailsDtl.DataSource = dt1;
            Session["purdtl"] = dt1;
            dgPVDetailsDtl.DataBind();
            ShowFooterTotal();
            tabVch.Visible = true;
           // dgPOrderMst.Visible = false;
            PVI_UP.Update();
            PVIesms_UP.Update();
            txtGRNO.Enabled = txtPO.Enabled = txtGRNODate.Enabled = txtSupplierSearch.Enabled =txtPODate.Enabled= false;
        }
    }
    protected void ddlPaymentMethord_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlPaymentMethord.SelectedValue == "C")
        { 
            VisiblePayment(false,false,false,false,false,false,false,false);
            lblAmount.Text = "Cash Amount ";
            ddlChequeStatus.SelectedIndex = -1;
        }
        else if (ddlPaymentMethord.SelectedValue == "Q")
        {
            VisiblePayment(true, true, true, true, true, true, true, true);
            lblAmount.Text = "Cheque Amount ";
            ddlChequeStatus.SelectedIndex = 1;
        }
        else if (ddlPaymentMethord.SelectedValue == "CR")
        {
            VisiblePayment(false, false, true, true, true, true, true, true);
            lblAmount.Text = "Card Amount ";
        }
        else
        {
            VisiblePayment(false, false, false, false, false, false, false, false);
            lblAmount.Text = "Cash Amount ";
            ddlChequeStatus.SelectedIndex = -1;
        }
    }
    public void VisiblePayment(bool lblBank,bool Bank,bool lblChkNo,bool ChkNo,bool lblChkDate,bool chkdate,bool lblChkStatus,bool chkStatus)
    {
        lblBankName.Visible = lblBank;
        ddlBank.Visible = Bank;
        lblChequeNo.Visible = lblChkNo;
        txtChequeNo.Visible = ChkNo;
        lblChequeDate.Visible = lblChkDate;
        txtChequeDate.Visible = chkdate;
        lblChequeStatus.Visible = lblChkStatus;
        ddlChequeStatus.Visible = chkStatus;
        ddlBank.SelectedIndex = -1;
        txtChequeDate.Text = txtChequeNo.Text = "";
        txtChequeAmount.Text = "0";
        txtChequeAmount.Focus();
    }
    protected void txtSearch_TextChanged(object sender, EventArgs e)
    {
        DataTable dt = PVReturnManagerLocal.GetShowPVMasterInfo("");
        if (dt.Rows.Count > 0)
        {
            txtID.Text = dt.Rows[0]["ID"].ToString();
            //txtID.Text = dgPVMst.SelectedRow.Cells[7].Text;
            btnFind_Click(sender, e);

        }
    }
    protected void btnFind_Click(object sender, EventArgs e)
    {

        PurchaseVoucherInfoLocal purmst = PurchaseVoucherManagerLocal.GetPurchaseMst(txtID.Text);
        if (purmst != null)
        {
            txtChallanNo.Enabled = txtPO.Enabled = txtGRNODate.Enabled = txtChallanDate.Enabled = txtSupplierSearch.Enabled = txtRemarks.Enabled = true;
            //txtID.Text = dgPVMst.SelectedRow.Cells[7].Text;
            txtGRNO.Text = purmst.GoodsReceiveNo;
            txtGRNODate.Text = purmst.GoodsReceiveDate;
            txtPO.Text = purmst.PurchaseOrderNo;
            txtPODate.Text = purmst.PurchaseOrderDate;
            txtChallanNo.Text = purmst.ChallanNo;
            txtChallanDate.Text = purmst.ChallanDate;
            hfSupplierID.Value = purmst.Supplier;
            if (purmst.AdvancePayFlag == "1") { chkAdvance.Checked = true; }

            Supplier sup = SupplierManager.GetSupplier(purmst.Supplier);
            if (sup != null)
            {
                txtSupplierSearch.Text = sup.SupName;
                ViewState["Address"] = sup.SupAddr1;
                ViewState["Phone"] = sup.SupPhone;
                Session["Supplier_COA"] = sup.GlCoa;
            }
            txtRemarks.Text = purmst.Remarks;
            txtTotalAmount.Text = Convert.ToDouble(purmst.TotalAmount).ToString("N2");
            txtTotPayment.Text = Convert.ToDouble(purmst.TotalPayment).ToString("N2");
            ddlCarriagePerson.SelectedValue = purmst.CarriagePerson;
            txtCarriageCharge.Text = Convert.ToDouble(purmst.CarriageCharge).ToString("N0");
            ddlLaburePerson.SelectedValue = purmst.LaburePerson;
            txtLabureCharge.Text = Convert.ToDouble(purmst.LabureCharge).ToString("N0");
            txtOtherCharge.Text = Convert.ToDouble(purmst.OtherCharge).ToString("N0");
            ddlPaymentMethord.SelectedValue = purmst.PaymentMethord.Trim();
            ddlChequeStatus.SelectedValue = purmst.ChkStatus;
            txtShiftmentNo.Text = purmst.ShiftmentNO;
            lblShiftmentID.Text = purmst.ShiftmentID;
            if (purmst.PaymentMethord.Trim() != "C")
            {
                VisiblePayment(true, true, true, true, true, true, true, true);
                ddlBank.SelectedValue = purmst.BankId;
                txtChequeNo.Text = purmst.ChequeNo;
                txtChequeDate.Text = purmst.ChequeDate;
                txtChequeAmount.Text = Convert.ToDouble(purmst.ChequeAmount).ToString("N0");
            }
            else
            {
                VisiblePayment(false, false, false, false, false, false, false, false);
            }
            DataTable dt = PurchaseVoucherManagerLocal.GetPurchaseItemsDetails(txtID.Text);
            if (dt.Rows.Count > 0)
            {
                DataRow dr = dt.NewRow();
                dt.Rows.Add(dr);
                dgPVDetailsDtl.DataSource = dt;
                Session["purdtl"] = dt;
                ViewState["dtOldPvLocal"] = dt;
                dgPVDetailsDtl.DataBind();
                ShowFooterTotal();
            }
            txtDue.Text = Convert.ToDouble(purmst.Due).ToString("N2");
            tabVch.Visible = true;
            PanelHistory.Visible = btnNew.Visible = false;
            PVI_UP.Update();
            PVIesms_UP.Update();
            UPPaymentMtd.Update();
        }
    }
    protected void btnPrint_Click(object sender, EventArgs e)
    {
        if (ddlPaymentMethord.SelectedValue == "C")
        {
            CashReport();
        }
        else
        {
            BankReport();
        }
    }

    //*************************  Check Popup  *******************//


    protected void btnClientSave_Click(object sender, EventArgs e)
    {
       
        if (txtvalue.Text == "")
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('Enter Supplier Name..!!');", true);
            Page.ClientScript.RegisterStartupScript(this.GetType(), "CallMyFunction", "LoadModalDiv()", true);
            ModalPopupExtender1.Show();
            return;           
        }
        if (ddlType.SelectedValue == "S")
        {
            //string IdGlCoa = "";
            Supplier sup = new Supplier();
            sup.ComName = ""; sup.SupAddr1 = ""; sup.SupName = txtvalue.Text;
            sup.SupAddr2 = ""; sup.Designation = ""; sup.City = "";
            sup.SupMobile = txtMobile.Text; sup.State = ""; sup.SupPhone = "";
            sup.PostCode = ""; sup.Fax = ""; sup.Country = "";
            sup.Email = txtEmail.Text; sup.SupGroup = "3"; sup.Active = "True";
            sup.SupCode = IdManager.GetNextID("supplier", "Code").ToString().PadLeft(7, '0');
            sup.LoginBy = Session["user"].ToString();
            //IdGlCoa = IdManager.getAutoIdWithParameter("402", "GL_SEG_COA", "SEG_COA_CODE", "4020000", "0000", "4");
            //sup.GlCoa = IdGlCoa;
            sup.Country = ddlPopSupplier.SelectedValue;
            SupplierManager.CreateSupplier(sup);
            //string queryLoc = "select '' ID,'' ContactName  union select ID ,ContactName from Supplier where Country='2' order by 1";
            //util.PopulationDropDownList(ddlSupplier, "CostType", queryLoc, "ContactName", "ID");
            //Gl_COA(IdGlCoa);
            //string queryLoc = "select '' ID,'' ContactName  union select ID ,ContactName from Supplier order by 1";
            //util.PopulationDropDownList(ddlSupplier, "Supplier", queryLoc, "ContactName", "ID");
        }
        else if (ddlType.SelectedValue == "P")
        {
            //string IdGlCoa = "";
            PartyInfo aPartyInfo = new PartyInfo();
            PartyInfoManager aPartyInfoManager = new PartyInfoManager();
            //aPartyInfo.ID = lblID.Text;
            aPartyInfo.PartyCode = IdManager.GetNextID("PartyInfo", "PartyCode").ToString().PadLeft(7, '0');
            aPartyInfo.PartyName = txtvalue.Text;
            aPartyInfo.Address = ""; aPartyInfo.Mobile = txtMobile.Text; aPartyInfo.Phone ="";
            aPartyInfo.Email = txtEmail.Text;
            aPartyInfo.LoginBy = Session["user"].ToString();
            //IdGlCoa = IdManager.getAutoIdWithParameter("1044", "GL_SEG_COA", "SEG_COA_CODE", "1044000", "000", "3");
            //aPartyInfo.GlCoa = IdGlCoa;
            aPartyInfoManager.SavePartyInfo(aPartyInfo);
            //SegCoa sg = new SegCoa();
            //sg.GlSegCode = IdGlCoa;
            //sg.SegCoaDesc = "Accounts Receivable from-Party-" + txtvalue.Text;
            //sg.LvlCode = "02";
            //sg.ParentCode = "1044000";
            //sg.BudAllowed = "Y";
            //sg.PostAllowed = "N";
            //sg.AccType = "A";
            //sg.OpenDate = DateTime.Now.Date.ToString("dd/MM/yyyy");
            //sg.RootLeaf = "L";
            //sg.Status = "A";
            //sg.Taxable = "N";
            //sg.BookName = "AMB";
            //sg.EntryUser = Session["user"].ToString();
            //sg.EntryDate = DateTime.Now.Date.ToString("dd/MM/yyyy");
            //sg.AuthoDate = DateTime.Now.Date.ToString("dd/MM/yyyy");
            //sg.AuthoUser = "ACC";
            //SegCoaManager.CreateSegCoa(sg);
            ////string dept = SegCoaManager.GetSegCoaDesc(Session["dept"].ToString());
            //GlCoa gl = new GlCoa();
            //gl.GlCoaCode = "1-" + IdGlCoa;
            //gl.CoaEnabled = "Y";
            //gl.BudAllowed = "N";
            //gl.PostAllowed = "Y";
            //gl.Taxable = "N";
            //gl.AccType = "A";
            //gl.Status = "A";
            //gl.BookName = "AMB";
            //string NM = Session["org"].ToString().Substring(0, 5);
            //gl.CoaDesc = NM + ",Accounts Receivable from-Party-" + txtvalue.Text;
            //gl.CoaCurrBal = "0.00";
            //gl.CoaNaturalCode = IdGlCoa;
            //GlCoaManager.CreateGlCoa(gl);

            //string query3 = "select '' ID,'' PartyName  union select  ID,PartyName from  PartyInfo order by 1";
            //util.PopulationDropDownList(ddlParty, "PartyInfo", query3, "PartyName", "ID");
            PVI_UP.Update();
        }
        txtvalue.Text = txtMobile.Text = txtEmail.Text = "";
        ddlType.SelectedIndex = -1;
    }
    private void CashReport()
    {
        string filename = "PV_" + txtGRNO.Text;
        Response.Clear();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment; filename=" + filename + ".pdf");
        Document document = new Document(PageSize.LEGAL.Rotate(), 50f, 50f, 40f, 40f);
        PdfWriter writer = PdfWriter.GetInstance(document, Response.OutputStream);
        document.Open();
        Rectangle page = document.PageSize;
        PdfPTable head = new PdfPTable(1);
        head.TotalWidth = page.Width - 50;
        Phrase phrase = new Phrase(DateTime.Now.ToString("dd/MM/yyyy"), new Font(Font.FontFamily.TIMES_ROMAN, 8));
        PdfPCell c = new PdfPCell(phrase);
        c.Border = Rectangle.NO_BORDER;
        c.VerticalAlignment = Element.ALIGN_BOTTOM;
        c.HorizontalAlignment = Element.ALIGN_RIGHT;
        head.AddCell(c);
        head.WriteSelectedRows(0, -1, 0, page.Height - document.TopMargin + head.TotalHeight + 20, writer.DirectContent);

        PdfPCell cell;
        byte[] logo = GlBookManager.GetGlLogo(Session["book"].ToString());
        iTextSharp.text.Image gif = iTextSharp.text.Image.GetInstance(logo);
        gif.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
        gif.ScalePercent(8f);

        float[] titwidth = new float[2] { 10, 200 };
        PdfPTable dth = new PdfPTable(titwidth);
        dth.WidthPercentage = 100;

        cell = new PdfPCell(gif);
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Rowspan = 4;
        cell.BorderWidth = 0f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["org"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
        
        dth.AddCell(cell);
        string StatusChk = "";
        if (ddlChequeStatus.SelectedValue == "P") { StatusChk = "PENDING CHEQUE STATEMENT"; }
        else if (ddlChequeStatus.SelectedValue == "A") { StatusChk = "HONOURED CHEQUE STATEMENT"; } else { StatusChk = "DISHONOURED CHEQUE STATEMENT"; }
        cell = new PdfPCell(new Phrase("CASH STATEMENT", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
       
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(txtSupplierSearch.Text + "  add: " + ViewState["Address"], FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
       
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(" Mobile Number : " + ViewState["Phone"], FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
       
        dth.AddCell(cell);
        document.Add(dth);
        LineSeparator line = new LineSeparator(1, 100, null, Element.ALIGN_CENTER, -2);
        document.Add(line);

        PdfPTable dtempty = new PdfPTable(1);
        cell = new PdfPCell(FormatHeaderPhrase(""));
        cell.BorderWidth = 0f;
        cell.FixedHeight = 10f;
        dtempty.AddCell(cell);
        document.Add(dtempty);

        float[] widthdtl = new float[10] { 45, 20, 45, 30, 20, 20, 23, 22, 20,  20 };
        PdfPTable pdtdtl = new PdfPTable(widthdtl);
        pdtdtl.WidthPercentage = 100;

        cell = new PdfPCell(FormatHeaderPhrase("Serial"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Date"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Particulars Of Goods"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Brand"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Qnty"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Rate"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Colspan = 3;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Amount"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);        

        //cell = new PdfPCell(FormatHeaderPhrase("Shipment No"));
        //cell.HorizontalAlignment = 1;
        //cell.VerticalAlignment = 1;
        //cell.BorderColor = BaseColor.LIGHT_GRAY;
        //cell.Rowspan = 2;
        //cell.PaddingTop = 10;
        //pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Status"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatPhrase("Supplier Rate"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatPhrase("Additional (%)"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatPhrase("Payment Rate"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);       

        DataTable dt = (DataTable)Session["purdtl"];
        //DataRow dr1 = dt.NewRow();
        //dt.Rows.Add(dr1);
        int Serial = 1;
        decimal totQty = 0;
        decimal tot = 0;
        foreach (DataRow dr in dt.Rows)
        {
            if (dr["item_code"].ToString() != "" && dr["item_desc"].ToString() != "")
            {
                cell = new PdfPCell(FormatPhrase(Serial.ToString()));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);
                //string GRN = "";
                //if (Serial == 1)
                //{ GRN = txtGRNODate.Text; }
                cell = new PdfPCell(FormatPhrase(DataManager.DateEncode(txtGRNODate.Text).ToString(IdManager.DateFormat())));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);


                cell = new PdfPCell(FormatPhrase(dr["item_desc"].ToString()));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(dr["BrandName"].ToString()));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(dr["qnty"].ToString()));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                decimal total = Convert.ToDecimal(dr["item_rate"]) * Convert.ToDecimal(dr["qnty"]);
                decimal totAdd = (total) + ((total * Convert.ToDecimal(dr["Additional"])) / 100);
                decimal totaddPer = ((total * Convert.ToDecimal(dr["Additional"])) / 100);

                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["item_rate"]).ToString("N3")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["Additional"]).ToString()));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["item_rate"]).ToString("N3")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(totAdd.ToString("N3")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);                
                

               // cell = new PdfPCell(FormatPhrase(txtSiftment.Text));
                //cell.HorizontalAlignment = 2;
                //cell.VerticalAlignment = 1;
                //cell.BorderColor = BaseColor.LIGHT_GRAY;
                //pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(ddlChequeStatus.SelectedItem.Text));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);
                //tot += Convert.ToDecimal(dr["Total"]);
                //totQty += Convert.ToDecimal(dr["qnty"]);

                Serial++;
            }
        }

        cell = new PdfPCell(FormatPhrase(""));
        cell.FixedHeight = 20f;
        cell.HorizontalAlignment = 2;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Colspan = 9;
        pdtdtl.AddCell(cell);
        document.Add(pdtdtl);

        PdfPTable pdt1 = new PdfPTable(1);
        cell.FixedHeight = 10f;
        cell.Border = 0;
        pdt1.AddCell(cell);


        cell = SignatureFormat(document, cell);       

        document.Close();
        Response.Flush();
        Response.End();
    }

    private void BankReport()
    {
        string filename = "PV_" + txtGRNO.Text;
        Response.Clear();
        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition", "attachment; filename=" + filename + ".pdf");
        Document document = new Document(PageSize.LEGAL.Rotate(), 50f, 50f, 40f, 40f);
        PdfWriter writer = PdfWriter.GetInstance(document, Response.OutputStream);
        document.Open();
        Rectangle page = document.PageSize;
        PdfPTable head = new PdfPTable(1);
        head.TotalWidth = page.Width - 50;
        Phrase phrase = new Phrase(DateTime.Now.ToString("dd/MM/yyyy"), new Font(Font.FontFamily.TIMES_ROMAN, 8));
        PdfPCell c = new PdfPCell(phrase);
        c.Border = Rectangle.NO_BORDER;
        c.VerticalAlignment = Element.ALIGN_BOTTOM;
        c.HorizontalAlignment = Element.ALIGN_RIGHT;
        head.AddCell(c);
        head.WriteSelectedRows(0, -1, 0, page.Height - document.TopMargin + head.TotalHeight + 20, writer.DirectContent);

        PdfPCell cell;
        byte[] logo = GlBookManager.GetGlLogo(Session["book"].ToString());
        iTextSharp.text.Image gif = iTextSharp.text.Image.GetInstance(logo);
        gif.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
        gif.ScalePercent(8f);

        float[] titwidth = new float[2] { 10, 200 };
        PdfPTable dth = new PdfPTable(titwidth);
        dth.WidthPercentage = 100;

        cell = new PdfPCell(gif);
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Rowspan = 4;
        cell.BorderWidth = 0f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(Session["org"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        string StatusChk = "";
        if (ddlChequeStatus.SelectedValue == "P") { StatusChk = "PENDING CHEQUE STATEMENT"; }
        else if (ddlChequeStatus.SelectedValue == "A") { StatusChk = "HONOURED CHEQUE STATEMENT"; } else { StatusChk = "DISHONOURED CHEQUE STATEMENT"; }
        cell = new PdfPCell(new Phrase(StatusChk, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(txtSupplierSearch.Text + "  add: " + ViewState["Address"], FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        cell = new PdfPCell(new Phrase(" Mobile Number : " + ViewState["Phone"], FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Colspan = 7;
        cell.BorderWidth = 0f;
        // cell.FixedHeight = 20f;
        dth.AddCell(cell);
        document.Add(dth);
        LineSeparator line = new LineSeparator(1, 100, null, Element.ALIGN_CENTER, -2);
        document.Add(line);

        PdfPTable dtempty = new PdfPTable(1);
        cell = new PdfPCell(FormatHeaderPhrase(""));
        cell.BorderWidth = 0f;
        cell.FixedHeight = 10f;
        dtempty.AddCell(cell);
        document.Add(dtempty);

        float[] widthdtl = new float[15] { 15, 20, 45, 30, 20, 20, 23, 22, 20, 20, 20, 20, 20, 20, 20 };
        PdfPTable pdtdtl = new PdfPTable(widthdtl);
        pdtdtl.WidthPercentage = 100;

        cell = new PdfPCell(FormatHeaderPhrase("Serial"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Date"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Particulars Of Goods"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Brand"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Qnty"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Rate"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Colspan = 3;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatHeaderPhrase("Amount"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Cheque Status"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Colspan = 4;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);

        //cell = new PdfPCell(FormatHeaderPhrase("Shipment No"));
        //cell.HorizontalAlignment = 1;
        //cell.VerticalAlignment = 1;
        //cell.BorderColor = BaseColor.LIGHT_GRAY;
        //cell.Rowspan = 2;
        //cell.PaddingTop = 10;
        //pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatHeaderPhrase("Status"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Rowspan = 2;
        cell.PaddingTop = 10;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatPhrase("Supplier Rate"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatPhrase("Additional (%)"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatPhrase("Payment Rate"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatPhrase("Issue Date"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatPhrase("Cheque No"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);
        cell = new PdfPCell(FormatPhrase("Payment Date"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        cell = new PdfPCell(FormatPhrase("Bank"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtdtl.AddCell(cell);

        DataTable dt = (DataTable)Session["purdtl"];
        //DataRow dr1 = dt.NewRow();
        //dt.Rows.Add(dr1);
        int Serial = 1;
        decimal totQty = 0;
        decimal tot = 0;
        foreach (DataRow dr in dt.Rows)
        {
            if (dr["item_code"].ToString() != "" && dr["item_desc"].ToString() != "")
            {
                cell = new PdfPCell(FormatPhrase(Serial.ToString()));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);
                //string GRN = "";
                //if (Serial == 1)
                //{ GRN = txtGRNODate.Text; }
                cell = new PdfPCell(FormatPhrase(DataManager.DateEncode(txtGRNODate.Text).ToString(IdManager.DateFormat())));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);


                cell = new PdfPCell(FormatPhrase(dr["item_desc"].ToString()));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(dr["BrandName"].ToString()));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(dr["qnty"].ToString()));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                decimal total = Convert.ToDecimal(dr["item_rate"]) * Convert.ToDecimal(dr["qnty"]);
                decimal totAdd = (total) + ((total * Convert.ToDecimal(dr["Additional"])) / 100);
                decimal totaddPer = ((total * Convert.ToDecimal(dr["Additional"])) / 100);

                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["item_rate"]).ToString("N3")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(Convert.ToDecimal(dr["Additional"]).ToString()));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase((totaddPer).ToString("N3")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(totAdd.ToString("N3")));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(txtGRNODate.Text));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(txtChequeNo.Text));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(txtChequeDate.Text));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(ddlBank.SelectedItem.Text));
                cell.HorizontalAlignment = 2;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);

            //    cell = new PdfPCell(FormatPhrase(txtSiftment.Text));
                //cell.HorizontalAlignment = 2;
                //cell.VerticalAlignment = 1;
                //cell.BorderColor = BaseColor.LIGHT_GRAY;
                //pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatPhrase(ddlChequeStatus.SelectedItem.Text));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                cell.BorderColor = BaseColor.LIGHT_GRAY;
                pdtdtl.AddCell(cell);
                //tot += Convert.ToDecimal(dr["Total"]);
                //totQty += Convert.ToDecimal(dr["qnty"]);

                Serial++;
            }
        }

        cell = new PdfPCell(FormatPhrase(""));
        cell.FixedHeight = 20f;
        cell.HorizontalAlignment = 2;
        cell.VerticalAlignment = 1;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        cell.Colspan = 9;
        pdtdtl.AddCell(cell);
        document.Add(pdtdtl);

        PdfPTable pdt1 = new PdfPTable(1);
        cell.FixedHeight = 10f;
        cell.Border = 0;
        pdt1.AddCell(cell);

        cell = SignatureFormat(document, cell);
        document.Close();
        Response.Flush();
        Response.End();
    }

    private static PdfPCell SignatureFormat(Document document, PdfPCell cell)
    {
        float[] widtl = new float[5] { 20, 20, 20, 20, 20 };
        PdfPTable pdtsig = new PdfPTable(widtl);
        pdtsig.WidthPercentage = 100;
        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.Colspan = 5;
        cell.FixedHeight = 40f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);


        cell = new PdfPCell(FormatPhrase("Prepared by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);

        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        cell = new PdfPCell(FormatPhrase("Checked by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);

        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        cell = new PdfPCell(FormatPhrase("Authorised by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        document.Add(pdtsig);
        return cell;
    }
    private static Phrase FormatPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9));
    }

    private static Phrase FormatHeaderPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD));
    }
   
    //private void Gl_COA(string GlCoa)
    //{
    //    SegCoa sg = new SegCoa();
    //    sg.GlSegCode = GlCoa;
    //    sg.SegCoaDesc = "Accounts Payable To " + txtvalue.Text;
    //    sg.LvlCode = "02";
    //    sg.ParentCode = "4020000";
    //    sg.BudAllowed = "Y";
    //    sg.PostAllowed = "N";
    //    sg.AccType = "A";
    //    sg.OpenDate = DateTime.Now.Date.ToString("dd/MM/yyyy");
    //    sg.RootLeaf = "L";
    //    sg.Status = "A";
    //    sg.Taxable = "N";
    //    sg.BookName = "AMB";
    //    sg.EntryUser = Session["user"].ToString();
    //    sg.EntryDate = DateTime.Now.Date.ToString("dd/MM/yyyy");
    //    sg.AuthoDate = DateTime.Now.Date.ToString("dd/MM/yyyy");
    //    sg.AuthoUser = "ACC";
    //    SegCoaManager.CreateSegCoa(sg);
    //    //string dept = SegCoaManager.GetSegCoaDesc(Session["dept"].ToString());
    //    GlCoa gl = new GlCoa();
    //    gl.GlCoaCode = "1-" + GlCoa;
    //    gl.CoaEnabled = "Y";
    //    gl.BudAllowed = "N";
    //    gl.PostAllowed = "Y";
    //    gl.Taxable = "N";
    //    gl.AccType = "A";
    //    gl.Status = "A";
    //    gl.BookName = "AMB";
    //    string NM = Session["org"].ToString().Substring(0, 5);
    //    gl.CoaDesc = NM + ",Accounts Payable To," + txtvalue.Text + "," + txtMobile.Text;
    //    gl.CoaCurrBal = "0.00";
    //    gl.CoaNaturalCode = GlCoa;
    //    GlCoaManager.CreateGlCoa(gl);
    //}
    protected void txtShiftmentNo_TextChanged(object sender, EventArgs e)
    {
        DataTable dt = ShiftmentAssignManager.GetShowShiftmentAssignOnSearch(txtShiftmentNo.Text);
        if (dt.Rows.Count > 0)
        {
            txtShiftmentNo.Text = dt.Rows[0]["ShiftmentNO"].ToString();            
            lblShiftmentID.Text = dt.Rows[0]["ID"].ToString();
            txtRemarks.Focus();
        }
    }
    protected void BtnSearch_Click(object sender, EventArgs e)
    {
        DataTable dt = PurchaseVoucherManagerLocal.GetShowPurchaseMst(txtGrnNo.Text, lblSupplier.Text, txtFromDate.Text, txtToDate.Text);
        dgPVMst.DataSource = dt;
        dgPVMst.DataBind();
    }
    protected void txtSupplier_TextChanged(object sender, EventArgs e)
    {
        DataTable dtSupplier = PurchaseVoucherManagerLocal.GetSupplierInfo(txtSupplier.Text);
        if (dtSupplier.Rows.Count > 0)
        {
            txtSupplier.Text = dtSupplier.Rows[0]["ContactName"].ToString();
            lblSupplier.Text = dtSupplier.Rows[0]["ID"].ToString();
            UPSupplier.Update();
        }
    }
    protected void Refresh_Click(object sender, EventArgs e)
    {
        //DataTable dt = PurchaseVoucherManager.GetShowPurchaseMst();
        Users usr = Delve.UsersManager.getUser(Session["user"].ToString());
        DataTable dt = PurchaseVoucherManagerLocal.GetShowPurchaseMst(usr.Dept);
        dgPVMst.DataSource = dt;
        Session["PvMst"] = dt;
        dgPVMst.DataBind();
        txtSupplier.Text = txtToDate.Text = txtFromDate.Text = txtGrnNo.Text = lblSupplier.Text = string.Empty;
    }

    protected void txtGrnNo_TextChanged(object sender, EventArgs e)
    {
        DataTable dt = PurchaseVoucherManager.GetShowPVMasterInfo(txtGrnNo.Text);

        if (dt.Rows.Count > 0)
        {
            txtGrnNo.Text = dt.Rows[0]["GRN"].ToString();
            //txtID.Text = dgPVMst.SelectedRow.Cells[7].Text;
            //btnFind_Click(sender, e);
        }
       
    }
    protected void txtSupplierSearch_TextChanged(object sender, EventArgs e)
    {
        DataTable dtSupplier = PurchaseVoucherManager.GetSupplierInfo(txtSupplierSearch.Text);
        if (dtSupplier.Rows.Count > 0)
        {
            Session["Supplier_COA"] = dtSupplier.Rows[0]["Gl_CoaCode"].ToString();
            txtSupplierSearch.Text = dtSupplier.Rows[0]["ContactName"].ToString();
            lblPhoneNo.Text = "Ph : " + dtSupplier.Rows[0]["Phone"].ToString() + " Mob : " + dtSupplier.Rows[0]["Mobile"].ToString();
            hfSupplierID.Value = dtSupplier.Rows[0]["ID"].ToString();
        }
        else
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Not Found Supplier.!!');", true);
            txtSupplierSearch.Text = hfSupplierID.Value = "";
            txtSupplierSearch.Focus();
        }
        PVI_UP.Update();
        PVIesms_UP.Update();
    }
}