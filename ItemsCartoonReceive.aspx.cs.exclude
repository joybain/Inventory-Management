using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using iTextSharp.text;
using iTextSharp.text.pdf;
using Delve;
using System.Drawing;
using System.Data.SqlClient;

public partial class ItemsCartoonReceive : System.Web.UI.Page
{
    private static Permis per;
    public readonly ShiftmentItemsCartoonManager _aShiftmentItemsCartoonManager=new ShiftmentItemsCartoonManager();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["user"] == null)
        {
            if (Session.SessionID != "" | Session.SessionID != null)
            {
                clsSession ses = clsSessionManager.getSession(Session.SessionID);
                if (ses != null)
                {
                    Session["user"] = ses.UserId;
                    Session["book"] = "AMB";
                    string connectionString = DataManager.OraConnString();
                    SqlDataReader dReader;
                    SqlConnection conn = new SqlConnection();
                    conn.ConnectionString = connectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText =
                        "Select user_grp,[description],UserType,case when UserType=1 then 'Bangladesh' else 'Philippine' end AS[LoginCountry] from utl_userinfo where upper(user_name)=upper('" +
                        Session["user"].ToString().ToUpper() + "') and status='A'";
                    conn.Open();
                    dReader = cmd.ExecuteReader();
                    string wnot = "", userType = "";
                    if (dReader.HasRows == true)
                    {
                        while (dReader.Read())
                        {
                            Session["userlevel"] = int.Parse(dReader["user_grp"].ToString());
                            //Session["dept"] = dReader["dept"].ToString();
                            wnot = "Welcome " + dReader["description"].ToString();
                            Session["LoginCountry"] = dReader["LoginCountry"].ToString();
                            userType = dReader["UserType"].ToString();
                        }
                        Session["wnote"] = wnot;
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandType = CommandType.Text;
                        //cmd.CommandText = "Select book_desc,company_address1,company_address2,separator_type from gl_set_of_books where book_name='" + Session["book"].ToString() + "' ";
                        if (Convert.ToInt32(userType) == 2)
                        {

                            Session["bookMAN"] = "MAN";
                        }
                        else
                        {
                            Session["bookMAN"] = Session["book"].ToString();
                        }
                        cmd.CommandText = "Select book_desc,company_address1,company_address2,separator_type,ShotName from gl_set_of_books where book_name='" + Session["bookMAN"] + "' ";

                        if (dReader.IsClosed == false)
                        {
                            dReader.Close();
                        }
                        dReader = cmd.ExecuteReader();
                        if (dReader.HasRows == true)
                        {
                            while (dReader.Read())
                            {
                                Session["septype"] = dReader["separator_type"].ToString();
                                Session["org"] = dReader["book_desc"].ToString();
                                Session["add1"] = dReader["company_address1"].ToString();
                                Session["add2"] = dReader["company_address2"].ToString();
                            }
                        }
                    }
                    dReader.Close();
                    conn.Close();
                }
            }
        }
        try
        {
            string pageName = DataManager.GetCurrentPageName();
            string modid = PermisManager.getModuleId(pageName);
            per = PermisManager.getUsrPermis(Session["user"].ToString().Trim().ToUpper(), modid);
            if (per != null && per.AllowView == "Y")
            {
                ((Label)Page.Master.FindControl("lblLogin")).Text = Session["wnote"].ToString();
                ((Label)Page.Master.FindControl("lblCountryName")).Text = Session["LoginCountry"].ToString();
                ((LinkButton)Page.Master.FindControl("lbLogout")).Visible = true;
            }
            else
            {
                Response.Redirect("Home.aspx?sid=sam");
            }
        }
        catch
        {
            Response.Redirect("Default.aspx?sid=sam");
        }
        if (!IsPostBack)
        {
            RefreshAll();
        }
    }

    private void RefreshAll()
    {
        txtCartoonNo.Text =
            txtShiftmentNo.Text =
                txtBercodeID.Text = lblShiftmentID.Text = lblItemsShiftID.Text = lblID.Text = lblItemID.Text = "";
        DataTable dt =
            ShiftmentItemsCartoonManager.GetShowShiftmentItems(txtCartoonNo.Text, txtCartoonNo1.Text,
                lblShiftmentID.Text, "1");
        dgShiftmentItems.Caption = "<h1> Total Carton : " + dt.Rows.Count;
        dgShiftmentItems.DataSource = dt;
        ViewState["History"] = dt;
        dgShiftmentItems.DataBind();

        DataTable dt1 =
            ShiftmentItemsCartoonManager.GetShowShiftmentItems(txtCartoonNo.Text, txtCartoonNo1.Text,
                lblShiftmentID.Text, "2");
        dgCartoonReceive.Caption = "<h1> Total Carton : " + dt1.Rows.Count;
        dgCartoonReceive.DataSource = dt1;
        ViewState["ReceiveHistory"] = dt1;
        dgCartoonReceive.DataBind();
        Tab1.Visible = true;
        Tab2.Visible = false;
        lblCartoonNo.Text = txtShiftmentNo.Text = lblItemID.Text = lblID.Text = txtCartoonNo1.Text = string.Empty;
        ViewState["Flag"] = null;
        txtBercodeID.Focus();
    }
    protected void BtnSearch_Click(object sender, EventArgs e)
    {
        if (string.IsNullOrEmpty(txtCartoonNo.Text) && string.IsNullOrEmpty(txtShiftmentNo.Text))
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('input Shipment No.!!');", true);
            return;
        }
        if (!string.IsNullOrEmpty(txtCartoonNo.Text) && string.IsNullOrEmpty(txtCartoonNo1.Text))
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('input Carton No.!!');", true);
            return;
        }
        if (!string.IsNullOrEmpty(txtCartoonNo.Text) && !string.IsNullOrEmpty(txtCartoonNo1.Text) && string.IsNullOrEmpty(txtShiftmentNo.Text))
        {
            ClientScript.RegisterStartupScript(this.GetType(), "ale", "alert('input Shipment No.!!');", true);
            return;
        }
        DataTable dt = ShiftmentItemsCartoonManager.GetShowShiftmentItems(txtCartoonNo.Text, txtCartoonNo1.Text, lblShiftmentID.Text, "3");
        //DataTable dt = ShiftmentItemsCartoonManager.GetShowSendAnReceiveItemsList(lblShiftmentID.Text, txtCartoonNo.Text,
          //  txtCartoonNo1.Text, "1");
        dgShiftmentItems.Caption = "<h1> Total Carton : " + dt.Rows.Count;
        dgShiftmentItems.DataSource = dt;
        ViewState["History"] = dt;
        dgShiftmentItems.DataBind();

        DataTable dt1 = ShiftmentItemsCartoonManager.GetShowShiftmentItems(txtCartoonNo.Text, txtCartoonNo1.Text, lblShiftmentID.Text, "4");
        dgCartoonReceive.Caption = "<h1> Total Carton : " + dt1.Rows.Count;
        dgCartoonReceive.DataSource = dt1;
        ViewState["ReceiveHistory"] = dt1;
        dgCartoonReceive.DataBind();
        ViewState["Flag"] = "1";
    }
    protected void dgShiftmentItems_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        dgShiftmentItems.DataSource = ViewState["History"];
        dgShiftmentItems.PageIndex = e.NewPageIndex;
        dgShiftmentItems.DataBind();
    }
    protected void dgCartoonReceive_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        dgCartoonReceive.DataSource = ViewState["ReceiveHistory"];
        dgCartoonReceive.PageIndex = e.NewPageIndex;
        dgCartoonReceive.DataBind();
    }
    protected void txtShiftmentNo_TextChanged(object sender, EventArgs e)
    {
        DataTable dtt = ShiftmentAssignManager.GetShowShiftmentAssignOnSearch(txtShiftmentNo.Text);
        if (dtt.Rows.Count > 0)
        {
            txtShiftmentNo.Text = dtt.Rows[0]["ShiftmentNO"].ToString();
            lblShiftmentID.Text = dtt.Rows[0]["ID"].ToString();
        }
        //DataTable dt = ShiftmentItemsCartoonManager.GetShowShiftmentItems(txtCartoonNo.Text, txtShiftmentNo.Text);
        //dgShiftmentItems.DataSource = dt;
        //ViewState["History"] = dt;
        //dgShiftmentItems.DataBind();
    }
    protected void btnRefresh_Click(object sender, EventArgs e)
    {
        RefreshAll();
    }
    protected void dgShiftmentItems_SelectedIndexChanged(object sender, EventArgs e)
    {

        getShiftmentQtyPrint();
    }
    protected void dgShiftmentItems_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName == "R")
        {
            GridViewRow gvr = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
            string ID = gvr.Cells[1].Text.Trim();
            lblID.Text = ID;
            CartoonShow(ID);
        }
    }
    private void CartoonShow(string ID)
    {
        lblItemsName.Text =lblCartoonNo.Text=lblShiftmentNo.Text=lblItemsShiftID.Text= string.Empty;
        DataTable dtMst = ShiftmentItemsManager.GetShowItemsInfo(ID, "");
        if (dtMst.Rows.Count > 0)
        {
            DataTable dtt = new DataTable();
            dtt.Columns.Add("ShiftmentBoxingMstID", typeof (string));
            dtt.Columns.Add("ItemsID", typeof (string));
            dtt.Columns.Add("ColorID", typeof (string));
            dtt.Columns.Add("ColorName", typeof (string));
            dtt.Columns.Add("TotalQty", typeof (string));
            dtt.Columns.Add("Batstock", typeof (string));
            dtt.Columns.Add("LassQty", typeof (string));
            dtt.Columns.Add("AccessQty", typeof (string));
            dtt.Columns.Add("BarcodeID", typeof(string));
            dtt.Columns.Add("ShiftmentID", typeof(string));
            lblID.Text = ID;
           // lblItemsName.Text = dtMst.Rows[0]["Name"].ToString();
            lblCartoonNo.Text = dtMst.Rows[0]["CartoonNo"].ToString();
            lblShiftmentNo.Text = dtMst.Rows[0]["ShiftmentNO"].ToString();
            lblItemsShiftID.Text = dtMst.Rows[0]["ShiftmentID"].ToString();
            foreach (DataRow drShiftment in dtMst.Rows)
            {
                if (string.IsNullOrEmpty(lblItemsName.Text))
                {
                    lblItemsName.Text = drShiftment["Name"].ToString();
                }
                else
                {
                    lblItemsName.Text = lblItemsName.Text + " , " + drShiftment["Name"].ToString();
                }
                DataTable dt11 = ShiftmentItemsCartoonManager.getShiftmentItemsCartoonItemsQuantity(ID,
                    drShiftment["SHITEMSid"].ToString());
                if (dt11 != null)
                {
                    decimal tot = 0;
                    for (int i = 0; i < dt11.Rows.Count; i++)
                    {
                        for (int j = 0; j < dt11.Columns.Count; j++)
                        {
                            if (j > 1)
                            {
                                if (dt11.Rows[i][j].ToString() != "")
                                {
                                    tot += Convert.ToDecimal(dt11.Rows[i][j].ToString());
                                }
                            }
                        }
                        dtt.NewRow();
                        dtt.Rows.Add(lblID.Text, drShiftment["ProductID"].ToString(), dt11.Rows[i]["ColorID"].ToString(),
                            dt11.Rows[i]["ColorName"].ToString(), tot, "0", "0", "0", drShiftment["SHITEMSid"].ToString(), dtMst.Rows[0]["ShiftmentID"].ToString());
                        tot = 0;
                    }
                }
            }
            dgItems.DataSource = dtt;
            ViewState["BadStock"] = dtt;
            dgItems.DataBind();
            Tab1.Visible = false;
            Tab2.Visible = true;
        }
    }

    protected void txtBercodeID_TextChanged(object sender, EventArgs e)
    {
        int Count = IdManager.GetShowSingleValueInt("COUNT(*)", "[ReceiveFlag] IS NULL AND ID", "[ShiftmentBoxingMst]", txtBercodeID.Text);
        if (Count > 0)
        {
            CartoonShow(txtBercodeID.Text);
                //ShiftmentItemsCartoonManager.GetItemsCartoonReceive(txtBercodeID.Text, Session["user"].ToString());
                //RefreshAll();
        }
        else
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('No Items Show....!!');", true);
            txtBercodeID.Focus();
            return;
        }
    }
    protected void btnSave_Click(object sender, EventArgs e)
    {
        string ShipmentID = lblItemsShiftID.Text;
        if (string.IsNullOrEmpty(lblItemsShiftID.Text))
        {
            ShipmentID = lblShiftmentID.Text;
        }
        DataTable dtBadStock = (DataTable)ViewState["BadStock"];
        DataTable dtCartoonList = ShiftmentItemsCartoonManager.GetShowShiftmentItems(lblCartoonNo.Text,
            lblCartoonNo.Text, ShipmentID, "");
        ShiftmentItemsCartoonManager.GetItemsCartoonReceive(lblID.Text, Session["user"].ToString(), dtBadStock, ShipmentID, dtCartoonList);
        ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Goods Received Sucessfully.!!');", true);
        btlClose_Click(sender, e);
        //RefreshAll();
    }
    protected void btnReceived_Click(object sender, EventArgs e)
    {
        if (string.IsNullOrEmpty(txtShiftmentNo.Text))
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Input Shipment No.!!');", true);
            txtShiftmentNo.Focus();
            return;
        }
        if (ViewState["Flag"] == null)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('First search then saved.!!');", true);
            return;
        }
        string ShipmentID = lblItemsShiftID.Text;
        if (string.IsNullOrEmpty(lblItemsShiftID.Text))
        {
            ShipmentID = lblShiftmentID.Text;
        }
        DataTable dtCartoonList = (DataTable)ViewState["History"];
        DataTable dt = (DataTable)ViewState["BadStock"];
        ShiftmentItemsCartoonManager.GetItemsCartoonReceive(lblID.Text, Session["user"].ToString(), dt,
            ShipmentID, dtCartoonList);
        ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('Goods received successfully.!!');", true);
        RefreshAll();
    }
    protected void btlClose_Click(object sender, EventArgs e)
    {
        RefreshAll();
    }
    private BarcodeLib.Barcode barcode = new BarcodeLib.Barcode();
    public void getShiftmentQtyPrint()
    {
        DataTable dtMst = ShiftmentItemsManager.GetShowItemsInfo(dgShiftmentItems.SelectedRow.Cells[1].Text.ToString(), "");
        if (dtMst.Rows.Count > 0)
        {
            string filename = "CartonNo(" + dgShiftmentItems.SelectedRow.Cells[3].Text.ToString() + ")";
            Response.Clear();
            Response.ContentType = "application/pdf";
            Response.AddHeader("content-disposition", "attachment; filename=" + filename + ".pdf");
            Document document = new Document(PageSize.A4);
            PdfWriter writer = PdfWriter.GetInstance(document, Response.OutputStream);
            document.Open();
            iTextSharp.text.Rectangle page = document.PageSize;
            PdfPTable head = new PdfPTable(1);
            head.TotalWidth = page.Width - 50;

            barcode.Alignment = BarcodeLib.AlignmentPositions.CENTER;
            int W = 550;
            int H = 160;

            BarcodeLib.TYPE type = BarcodeLib.TYPE.CODE128;
            barcode.IncludeLabel = false;
            barcode.RotateFlipType = (RotateFlipType)Enum.Parse(typeof(RotateFlipType), "RotateNoneFlipNone", true);
            barcode.LabelPosition = BarcodeLib.LabelPositions.BOTTOMCENTER;

            System.Drawing.Image generatedBarcode = barcode.Encode(type, dgShiftmentItems.SelectedRow.Cells[1].Text.ToString(), Color.Black, Color.White, W, H);
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            generatedBarcode.Save(stream, System.Drawing.Imaging.ImageFormat.Png);

            byte[] logo2 = stream.ToArray();
            iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(logo2);
            gif2.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
            gif2.ScalePercent(20f);

            PdfPCell cell;
            byte[] logo = GlBookManager.GetGlLogo(Session["book"].ToString());
            iTextSharp.text.Image gif = iTextSharp.text.Image.GetInstance(logo);
            gif.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
            gif.ScalePercent(8f);

            float[] titwidth = new float[3] { 15, 40, 15 };
            PdfPTable dth = new PdfPTable(titwidth);
            dth.WidthPercentage = 100;

            cell = new PdfPCell(gif);
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.VerticalAlignment = Element.ALIGN_TOP;
            cell.HorizontalAlignment = Element.ALIGN_TOP;
            cell.Rowspan = 4;
            cell.BorderWidth = 0f;
            dth.AddCell(cell);

            cell = new PdfPCell(new Phrase(Session["org"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD)));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.BorderWidth = 0f;
            // cell.FixedHeight = 20f;
            dth.AddCell(cell);

            cell = new PdfPCell(gif2);
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.VerticalAlignment = Element.ALIGN_MIDDLE;
            cell.HorizontalAlignment = Element.ALIGN_MIDDLE;
            cell.Rowspan = 4;
            cell.BorderWidth = 0f;
            dth.AddCell(cell);

            cell = new PdfPCell(new Phrase(Session["add1"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.BorderWidth = 0f;
            // cell.FixedHeight = 20f;
            dth.AddCell(cell);
            cell = new PdfPCell(new Phrase(Session["add2"].ToString(), FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.BorderWidth = 0f;
            //cell.FixedHeight = 20f;
            dth.AddCell(cell);
            cell = new PdfPCell(new Phrase("Items Image", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD)));
            cell.HorizontalAlignment = 1;
            cell.VerticalAlignment = 1;
            cell.BorderWidth = 0f;
            //cell.FixedHeight = 30f;
            dth.AddCell(cell);
            document.Add(dth);
            //LineSeparator line = new LineSeparator(1, 100, null, Element.ALIGN_CENTER, -2);
            //document.Add(line);

            PdfPTable dtempty = new PdfPTable(1);
            cell = new PdfPCell(FormatHeaderPhrase(""));
            cell.BorderWidth = 0f;
            cell.FixedHeight = 10f;
            dtempty.AddCell(cell);
            document.Add(dtempty);
            int serial = 0;
            foreach (DataRow drr in dtMst.Rows)
            {
                float[] MB = new float[1] { 100 };
                PdfPTable pdMB = new PdfPTable(MB);
                pdMB.WidthPercentage = 100;

                float[] widthdtl = new float[6] { 20, 20, 20, 20, 20, 20 };
                PdfPTable pdtdtl = new PdfPTable(widthdtl);
                pdtdtl.WidthPercentage = 100;

                if (serial == 0) { cell = new PdfPCell(FormatHeaderPhrase("CTN No : " + dtMst.Rows[0]["CartoonNo"].ToString())); }
                else { cell = new PdfPCell(FormatHeaderPhrase("")); }
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.Colspan = 2;
                cell.BorderWidth = 0f;
                pdtdtl.AddCell(cell);

                if (serial == 0) { cell = new PdfPCell(FormatHeaderPhrase("Shipment No. : " + dtMst.Rows[0]["ShiftmentNO"].ToString())); }
                else { cell = new PdfPCell(FormatHeaderPhrase("")); }
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.Colspan = 2;
                cell.BorderWidth = 0f;
                pdtdtl.AddCell(cell);

                if (serial == 0) { cell = new PdfPCell(FormatHeaderPhrase("Date : " + (DataManager.DateEncode(dtMst.Rows[0]["ShiftmentDate"].ToString())).ToString(IdManager.DateFormat()))); }
                else { cell = new PdfPCell(FormatHeaderPhrase("")); }
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.Colspan = 2;
                cell.BorderWidth = 0f;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatHeaderPhrase(""));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.Colspan = 6;
                cell.FixedHeight = 8f;
                cell.BorderWidth = 0f;
                pdtdtl.AddCell(cell);

                cell = new PdfPCell(FormatHeaderPhrase("Party Name"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                //cell.BorderWidth = 0f;
                //cell.FixedHeight = 20f;
                cell.Colspan = 2;
                pdtdtl.AddCell(cell);
                cell = new PdfPCell(FormatHeaderPhrase("Items Name"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                // cell.BorderWidth = 0f;
                //cell.FixedHeight = 20f;
                cell.Colspan = 2;
                pdtdtl.AddCell(cell);
                cell = new PdfPCell(FormatHeaderPhrase("Label"));
                cell.HorizontalAlignment = 1;
                cell.VerticalAlignment = 1;
                // cell.BorderWidth = 0f;
                // cell.FixedHeight = 30f;
                cell.Colspan = 2;
                pdtdtl.AddCell(cell);
                if (dtMst.Rows.Count > 0)
                {
                    cell = new PdfPCell(FormatFontPhrase(drr["PartyName"].ToString()));
                    cell.HorizontalAlignment = 0;
                    cell.VerticalAlignment = 1;
                    //cell.BorderWidth = 0f;
                    //cell.FixedHeight = 20f;
                    cell.Colspan = 2;
                    pdtdtl.AddCell(cell);
                    cell = new PdfPCell(FormatFontPhrase(drr["Name"].ToString()));
                    cell.HorizontalAlignment = 0;
                    cell.VerticalAlignment = 1;
                    //cell.BorderWidth = 0f;
                    //cell.FixedHeight = 20f;
                    cell.Colspan = 2;
                    pdtdtl.AddCell(cell);
                    cell = new PdfPCell(FormatFontPhrase(drr["Label"].ToString()));
                    cell.HorizontalAlignment = 0;
                    cell.VerticalAlignment = 1;
                    //cell.BorderWidth = 0f;
                    cell.Colspan = 2;
                    pdtdtl.AddCell(cell);
                }
                cell = new PdfPCell(FormatFontPhrase(""));
                cell.HorizontalAlignment = 0;
                cell.VerticalAlignment = 1;
                cell.BorderWidth = 0f;
                cell.FixedHeight = 8;
                cell.Colspan = 6;
                pdtdtl.AddCell(cell);
                DataTable dt = IdManager.GetShowDataTable("SELECT '' AS imagename,[ID] AS ImageID, [Image] AS Image from [ShiftmentBoxingItemsImage] where [BoxingItemsID] ='" + dgShiftmentItems.SelectedRow.Cells[1].Text.ToString() + "' and ItemsID='" + drr["SHITEMSid"].ToString() + "' ");
                if (dt.Rows.Count > 0)
                {
                    PdfPTable pdtclient = new PdfPTable(dt.Rows.Count);
                    pdtclient.WidthPercentage = 100;
                    decimal tt = decimal.Zero;
                    decimal tot = (6 / dt.Rows.Count);
                    tt = 6 * Math.Ceiling(tot);
                    for (int i = 0; i < tt; i++)
                    {
                        if (dt.Rows.Count - 1 < i)
                        {
                            cell = new PdfPCell(FormatHeaderPhrase(""));
                            cell.HorizontalAlignment = 1;
                            cell.VerticalAlignment = 1;
                            cell.BorderWidth = 0f;
                            pdtdtl.AddCell(cell);
                        }
                        else
                        {
                            DataRow dr = dt.Rows[i];
                            byte[] logo1 = (byte[])dr["Image"];
                            iTextSharp.text.Image gif1 = iTextSharp.text.Image.GetInstance(logo1);
                            gif1.Alignment = iTextSharp.text.Image.MIDDLE_ALIGN;
                            gif1.ScalePercent(30f);
                            cell = new PdfPCell(gif1);
                            cell.PaddingBottom = 10f;
                            cell.HorizontalAlignment = 1;
                            cell.VerticalAlignment = 1;
                            cell.BorderWidth = 0f;
                            pdtdtl.AddCell(cell);
                        }
                    }
                }
                //DataTable dt11 = ShiftmentItemsManager.GetShiftmentItemsQuantity(txtID.Text);
                DataTable dt11 = ShiftmentItemsCartoonManager.getShiftmentItemsCartoonItemsQuantity(dgShiftmentItems.SelectedRow.Cells[1].Text.ToString(), drr["SHITEMSid"].ToString());
                if (dt11 != null)
                {
                    float[] widthbi = new float[dt11.Columns.Count];
                    for (int i = 0; i < dt11.Columns.Count; i++)
                    {
                        widthbi[i] = 100 / dt11.Columns.Count;
                    }
                    PdfPTable with1 = new PdfPTable(widthbi);
                    with1.WidthPercentage = 100;

                    cell = new PdfPCell(FormatHeaderPhrase("Color Name"));
                    cell.HorizontalAlignment = 1;
                    cell.VerticalAlignment = 1;
                    with1.AddCell(cell);

                    for (int i = 2; i < dt11.Columns.Count; i++)
                    {
                        cell = new PdfPCell(FormatHeaderPhrase(dt11.Columns[i].ColumnName));
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        with1.AddCell(cell);
                    }
                    cell = new PdfPCell(FormatHeaderPhrase("Total"));
                    cell.HorizontalAlignment = 1;
                    cell.VerticalAlignment = 1;
                    with1.AddCell(cell);
                    int ff = 0;
                    double tot1 = 0;
                    double tot2 = 0;
                    for (int i = 0; i < dt11.Rows.Count; i++)
                    {
                        for (int j = 1; j < dt11.Columns.Count; j++)
                        {
                            cell = new PdfPCell(FormatFontPhrase(dt11.Rows[i][j].ToString()));
                            if (ff == 0)
                            { cell.HorizontalAlignment = 0; }
                            else { cell.HorizontalAlignment = 1; }
                            cell.VerticalAlignment = 1;
                            with1.AddCell(cell);
                            if (dt11.Rows[i][j].ToString() != "" && ff > 0)
                            {
                                tot1 += Convert.ToDouble(dt11.Rows[i][j].ToString());
                                tot2 += Convert.ToDouble(dt11.Rows[i][j].ToString());
                            }
                            ff++;

                        }
                        cell = new PdfPCell(FormatFontPhrase(tot1.ToString("N3")));
                        cell.HorizontalAlignment = 2;
                        cell.VerticalAlignment = 1;
                        with1.AddCell(cell);
                        ff = 0;
                        tot1 = 0;
                    }
                    cell = new PdfPCell(FormatHeaderPhrase("Total"));
                    cell.HorizontalAlignment = 2;
                    cell.VerticalAlignment = 1;
                    cell.Colspan = dt11.Columns.Count - 1;
                    with1.AddCell(cell);
                    cell = new PdfPCell(FormatHeaderPhrase(tot2.ToString("N3")));
                    cell.HorizontalAlignment = 2;
                    cell.VerticalAlignment = 1;
                    cell.Colspan = dt11.Columns.Count - 1;
                    with1.AddCell(cell);

                    string Remarks = IdManager.GetShowSingleValueString("Remarks", "ID", "ShiftmentBoxingMst", dgShiftmentItems.SelectedRow.Cells[1].Text.ToString());
                    cell = new PdfPCell(FormatHeaderPhrase("Remarks : " + Remarks));
                    cell.HorizontalAlignment = 0;
                    cell.VerticalAlignment = 1;
                    cell.Colspan = dt11.Columns.Count - 1 + dt11.Columns.Count - 1;
                    with1.AddCell(cell); 

                    cell = new PdfPCell(pdtdtl);
                    cell.BorderWidth = 1f;
                    pdMB.AddCell(cell);

                    cell = new PdfPCell(with1);
                    cell.BorderWidth = 1f;
                    pdMB.AddCell(cell);
                    document.Add(pdMB);
                    serial++;
                }
            }
            document.Close();
            Response.Flush();
            Response.End();
        }
    }
    private static PdfPCell SignatureFormat(Document document, PdfPCell cell)
    {
        float[] widtl = new float[5] { 20, 20, 20, 20, 20 };
        PdfPTable pdtsig = new PdfPTable(widtl);
        pdtsig.WidthPercentage = 100;
        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.Colspan = 5;
        cell.FixedHeight = 40f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);


        cell = new PdfPCell(FormatPhrase("Prepared by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);

        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        cell = new PdfPCell(FormatPhrase("Checked by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);

        cell = new PdfPCell(FormatPhrase(""));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 0;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        cell = new PdfPCell(FormatPhrase("Authorised by"));
        cell.HorizontalAlignment = 1;
        cell.VerticalAlignment = 1;
        cell.Border = 1;
        cell.FixedHeight = 20f;
        cell.BorderColor = BaseColor.LIGHT_GRAY;
        pdtsig.AddCell(cell);
        document.Add(pdtsig);
        return cell;
    }

    private static Phrase FormatPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9));
    }

    private static Phrase FormatHeaderPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD));
    }
    private static Phrase FormatFontPhrase(string value)
    {
        return new Phrase(value, FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.NORMAL));
    }

    protected void txtBadStock_TextChanged(object sender, EventArgs e)
    {
        if (ViewState["BadStock"] != null)
        {
            TextBox txt = (TextBox)sender;
            GridViewRow gvr = (GridViewRow)txt.NamingContainer;
            DataTable dtdtl = (DataTable)ViewState["BadStock"];
            DataRow dr1 = dtdtl.Rows[gvr.DataItemIndex];
            dr1.BeginEdit();

            dr1["Batstock"] = ((TextBox)gvr.FindControl("txtBadStock")).Text;
            
            dtdtl.AcceptChanges();
            ViewState["BadStock"] = dtdtl;
            dgItems.DataSource = dtdtl;
            dgItems.DataBind();
            if (dgItems.Rows.Count - 1 != (gvr.RowIndex))
            {
                ((TextBox)dgItems.Rows[gvr.RowIndex + 1].FindControl("txtBadStock")).Focus();
            }
           
        }
    }
    protected void txtLostQty_TextChanged(object sender, EventArgs e)
    {
        if (ViewState["BadStock"] != null)
        {
            TextBox txt = (TextBox)sender;
            GridViewRow gvr = (GridViewRow)txt.NamingContainer;
            DataTable dtdtl = (DataTable)ViewState["BadStock"];
            DataRow dr1 = dtdtl.Rows[gvr.DataItemIndex];
            dr1.BeginEdit();

            dr1["LassQty"] = ((TextBox)gvr.FindControl("txtLostQty")).Text;

            dtdtl.AcceptChanges();
            ViewState["BadStock"] = dtdtl;
            dgItems.DataSource = dtdtl;
            dgItems.DataBind();
            if (dgItems.Rows.Count - 1 != (gvr.RowIndex))
            {
                ((TextBox)dgItems.Rows[gvr.RowIndex + 1].FindControl("txtAccessQty")).Focus();
            }

        }
    }
    protected void txtAccessQty_TextChanged(object sender, EventArgs e)
    {
        if (ViewState["BadStock"] != null)
        {
            TextBox txt = (TextBox)sender;
            GridViewRow gvr = (GridViewRow)txt.NamingContainer;
            DataTable dtdtl = (DataTable)ViewState["BadStock"];
            DataRow dr1 = dtdtl.Rows[gvr.DataItemIndex];
            dr1.BeginEdit();

            dr1["AccessQty"] = ((TextBox)gvr.FindControl("txtAccessQty")).Text;

            dtdtl.AcceptChanges();
            ViewState["BadStock"] = dtdtl;
            dgItems.DataSource = dtdtl;
            dgItems.DataBind();
            if (dgItems.Rows.Count - 1 != (gvr.RowIndex))
            {
                ((TextBox)dgItems.Rows[gvr.RowIndex + 1].FindControl("txtLostQty")).Focus();
            }

        }
    }

    protected void dgCartoonReceive_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName == "ReceivedCanceled")
        {
            GridViewRow gvr = (GridViewRow) (((Button) e.CommandSource).NamingContainer);
            string BoxMstID = gvr.Cells[0].Text.ToString().Trim();
            DataTable dt = ShiftmentItemsCartoonManager.GetShowCartoonItemsDetails(BoxMstID);
            if (dt.Rows.Count > 0)
            {
                _aShiftmentItemsCartoonManager.GetCancelReceivedShipment(dt, Session["user"].ToString());

                ClientScript.RegisterStartupScript(this.GetType(), "Warning",
                    "alert('Goods received canceled successfully.!!');", true);
                 DataTable dt1 = ShiftmentItemsCartoonManager.GetShowShiftmentItems(txtCartoonNo.Text,
                     txtCartoonNo1.Text, lblShiftmentID.Text, "4");
                 dgCartoonReceive.Caption = "<h1> Total Carton : " + dt1.Rows.Count;
                 dgCartoonReceive.DataSource = dt1;
                 ViewState["ReceiveHistory"] = dt1;
                 dgCartoonReceive.DataBind();
                 ViewState["Flag"] = "1";
                // txtCourtoon.Text = dt.Rows[0]["CartoonNo"].ToString();
                // txtShiftmentNo.Text = dt.Rows[0]["ShiftmentNO"].ToString();
                // lblShiftmentID.Text = dt.Rows[0]["ShiftmentID"].ToString();
                //txtRemarks.Text = dt.Rows[0]["Remarks"].ToString();
            }
        }
    }

    protected void dgCartoonReceive_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow || e.Row.RowType == DataControlRowType.Header ||
                e.Row.RowType == DataControlRowType.Footer)
            {
                try
                {
                    if (Session["user"].ToString().Equals("mohsin") || Session["user"].ToString().Equals("mohsinph") ||
                        Session["user"].ToString().Equals("sam") || Session["user"].ToString().Equals("samph"))
                    {
                       
                    }
                    else
                    {
                        e.Row.Cells[5].Attributes.Add("style", "display:none");
                    }
                }
                catch
                {

                }
            }
        }
        catch (FormatException fex)
        {
            ClientScript.RegisterStartupScript(this.GetType(), "Warning", "alert('" + fex.Message + "');", true);
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Database"))
                ClientScript.RegisterStartupScript(this.GetType(), "Warning",
                    "alert('Database Maintain Error. Contact to the Software Provider..!!');", true);
            else
                ClientScript.RegisterStartupScript(this.GetType(), "Warning",
                    "alert('There is some problem to do the task. Try again properly.!!');", true);
        }
    }
}